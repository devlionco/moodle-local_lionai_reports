{"version":3,"file":"jquery.dataTables.min.js","sources":["../src/jquery.dataTables.js"],"sourcesContent":["/* eslint-disable no-alert */\n/* eslint-disable no-console */\n/* eslint-disable no-loop-func */\n/* eslint-disable max-depth */\n/* eslint-disable jsdoc/check-param-names */\n/* eslint-disable jsdoc/require-param-type */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable no-labels */\n/* eslint-disable max-len */\n/* eslint-disable camelcase */\n/* eslint-disable complexity */\n/* eslint-disable consistent-return */\n/* eslint-disable no-nested-ternary */\n/* eslint-disable no-undef */\n/* ! DataTables 2.0.2\n * Â© SpryMedia Ltd - datatables.net/license\n */\n\n/**\n * @summary     DataTables\n * @description Paginate, search and order HTML tables\n * @version     2.0.2\n * @author      SpryMedia Ltd\n * @contact     www.datatables.net\n * @copyright   SpryMedia Ltd.\n *\n * This source file is free software, available under the following license:\n *   MIT license - https://datatables.net/license\n *\n * This source file is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\n *\n * For details please refer to: https://www.datatables.net\n */\n\n(function(factory) {\n    \"use strict\";\n\n    if (typeof define === 'function' && define.amd) {\n        // AMD\n        define(['jquery'], function($) {\n            return factory($, window, document);\n        });\n    } else if (typeof exports === 'object') {\n        // CommonJS\n        // jQuery's factory checks for a global window - if it isn't present then it\n        // returns a factory function that expects the window object\n        var jq = require('jquery');\n\n        if (typeof window === 'undefined') {\n            module.exports = function(root, $) {\n                if (!root) {\n                    // CommonJS environments without a window global must pass a\n                    // root. This will give an error otherwise\n                    root = window;\n                }\n\n                if (!$) {\n                    $ = jq(root);\n                }\n\n                return factory($, root, root.document);\n            };\n        } else {\n            module.exports = factory(jq, window, window.document);\n        }\n    } else {\n        // Browser\n        window.DataTable = factory(jQuery, window, document);\n    }\n}(function($, window, document) {\n    \"use strict\";\n\n\n    var DataTable = function(selector, options) {\n        // Check if called with a window or jQuery object for DOM less applications\n        // This is for backwards compatibility\n        if (DataTable.factory(selector, options)) {\n            return DataTable;\n        }\n\n        // When creating with `new`, create a new DataTable, returning the API instance\n        if (this instanceof DataTable) {\n            return $(selector).DataTable(options);\n        } else {\n            // Argument switching\n            options = selector;\n        }\n\n        var _that = this;\n        var emptyInit = options === undefined;\n        var len = this.length;\n\n        if (emptyInit) {\n            options = {};\n        }\n\n        // Method to get DT API instance from jQuery object\n        this.api = function() {\n            return new _Api(this);\n        };\n\n        this.each(function() {\n            // For each initialisation we want to give it a clean initialisation\n            // object that can be bashed around\n            var o = {};\n            var oInit = len > 1 ? // Optimisation for single table case\n                _fnExtend(o, options, true) :\n                options;\n\n\n            var i = 0,\niLen;\n            var sId = this.getAttribute('id');\n            var bInitHandedOff = false;\n            var defaults = DataTable.defaults;\n            var $this = $(this);\n\n\n            /* Sanity check */\n            if (this.nodeName.toLowerCase() != 'table') {\n                _fnLog(null, 0, 'Non-table node initialisation (' + this.nodeName + ')', 2);\n                return;\n            }\n\n            $(this).trigger('options.dt', oInit);\n\n            /* Backwards compatibility for the defaults */\n            _fnCompatOpts(defaults);\n            _fnCompatCols(defaults.column);\n\n            /* Convert the camel-case defaults to Hungarian */\n            _fnCamelToHungarian(defaults, defaults, true);\n            _fnCamelToHungarian(defaults.column, defaults.column, true);\n\n            /* Setting up the initialisation object */\n            _fnCamelToHungarian(defaults, $.extend(oInit, $this.data()), true);\n\n\n            /* Check to see if we are re-initialising a table */\n            var allSettings = DataTable.settings;\n            for (i = 0, iLen = allSettings.length; i < iLen; i++) {\n                var s = allSettings[i];\n\n                /* Base check on table node */\n                if (\n                    s.nTable == this ||\n                    (s.nTHead && s.nTHead.parentNode == this) ||\n                    (s.nTFoot && s.nTFoot.parentNode == this)\n                ) {\n                    var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;\n                    var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;\n\n                    if (emptyInit || bRetrieve) {\n                        return s.oInstance;\n                    } else if (bDestroy) {\n                        new DataTable.Api(s).destroy();\n                        break;\n                    } else {\n                        _fnLog(s, 0, 'Cannot reinitialise DataTable', 3);\n                        return;\n                    }\n                }\n\n                /* If the element we are initialising has the same ID as a table which was previously\n                 * initialised, but the table nodes don't match (from before) then we destroy the old\n                 * instance by simply deleting it. This is under the assumption that the table has been\n                 * destroyed by other methods. Anyone using non-id selectors will need to do this manually\n                 */\n                if (s.sTableId == this.id) {\n                    allSettings.splice(i, 1);\n                    break;\n                }\n            }\n\n            /* Ensure the table has an ID - required for accessibility */\n            if (sId === null || sId === \"\") {\n                sId = \"DataTables_Table_\" + (DataTable.ext._unique++);\n                this.id = sId;\n            }\n\n            /* Create the settings object for this table and set some of the default parameters */\n            var oSettings = $.extend(true, {}, DataTable.models.oSettings, {\n                \"sDestroyWidth\": $this[0].style.width,\n                \"sInstance\": sId,\n                \"sTableId\": sId,\n                colgroup: $('<colgroup>').prependTo(this),\n                fastData: function(row, column, type) {\n                    return _fnGetCellData(oSettings, row, column, type);\n                }\n            });\n            oSettings.nTable = this;\n            oSettings.oInit = oInit;\n\n            allSettings.push(oSettings);\n\n            // Make a single API instance available for internal handling\n            oSettings.api = new _Api(oSettings);\n\n            // Need to add the instance after the instance after the settings object has been added\n            // to the settings array, so we can self reference the table instance if more than one\n            oSettings.oInstance = (_that.length === 1) ? _that : $this.dataTable();\n\n            // Backwards compatibility, before we apply all the defaults\n            _fnCompatOpts(oInit);\n\n            // If the length menu is given, but the init display length is not, use the length menu\n            if (oInit.aLengthMenu && !oInit.iDisplayLength) {\n                oInit.iDisplayLength = Array.isArray(oInit.aLengthMenu[0])\n                    ? oInit.aLengthMenu[0][0]\n                    : $.isPlainObject(oInit.aLengthMenu[0])\n                        ? oInit.aLengthMenu[0].value\n                        : oInit.aLengthMenu[0];\n            }\n\n            // Apply the defaults and init options to make a single init object will all\n            // options defined from defaults and instance options.\n            oInit = _fnExtend($.extend(true, {}, defaults), oInit);\n\n\n            // Map the initialisation options onto the settings object\n            _fnMap(oSettings.oFeatures, oInit, [\n                \"bPaginate\",\n                \"bLengthChange\",\n                \"bFilter\",\n                \"bSort\",\n                \"bSortMulti\",\n                \"bInfo\",\n                \"bProcessing\",\n                \"bAutoWidth\",\n                \"bSortClasses\",\n                \"bServerSide\",\n                \"bDeferRender\"\n            ]);\n            _fnMap(oSettings, oInit, [\n                \"ajax\",\n                \"fnFormatNumber\",\n                \"sServerMethod\",\n                \"aaSorting\",\n                \"aaSortingFixed\",\n                \"aLengthMenu\",\n                \"sPaginationType\",\n                \"iStateDuration\",\n                \"bSortCellsTop\",\n                \"iTabIndex\",\n                \"sDom\",\n                \"fnStateLoadCallback\",\n                \"fnStateSaveCallback\",\n                \"renderer\",\n                \"searchDelay\",\n                \"rowId\",\n                \"caption\",\n                \"layout\",\n                [\"iCookieDuration\", \"iStateDuration\"], // Backwards compat\n                [\"oSearch\", \"oPreviousSearch\"],\n                [\"aoSearchCols\", \"aoPreSearchCols\"],\n                [\"iDisplayLength\", \"_iDisplayLength\"]\n            ]);\n            _fnMap(oSettings.oScroll, oInit, [\n                [\"sScrollX\", \"sX\"],\n                [\"sScrollXInner\", \"sXInner\"],\n                [\"sScrollY\", \"sY\"],\n                [\"bScrollCollapse\", \"bCollapse\"]\n            ]);\n            _fnMap(oSettings.oLanguage, oInit, \"fnInfoCallback\");\n\n            /* Callback functions which are array driven */\n            _fnCallbackReg(oSettings, 'aoDrawCallback', oInit.fnDrawCallback);\n            _fnCallbackReg(oSettings, 'aoStateSaveParams', oInit.fnStateSaveParams);\n            _fnCallbackReg(oSettings, 'aoStateLoadParams', oInit.fnStateLoadParams);\n            _fnCallbackReg(oSettings, 'aoStateLoaded', oInit.fnStateLoaded);\n            _fnCallbackReg(oSettings, 'aoRowCallback', oInit.fnRowCallback);\n            _fnCallbackReg(oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow);\n            _fnCallbackReg(oSettings, 'aoHeaderCallback', oInit.fnHeaderCallback);\n            _fnCallbackReg(oSettings, 'aoFooterCallback', oInit.fnFooterCallback);\n            _fnCallbackReg(oSettings, 'aoInitComplete', oInit.fnInitComplete);\n            _fnCallbackReg(oSettings, 'aoPreDrawCallback', oInit.fnPreDrawCallback);\n\n            oSettings.rowIdFn = _fnGetObjectDataFn(oInit.rowId);\n\n            /* Browser support detection */\n            _fnBrowserDetect(oSettings);\n\n            var oClasses = oSettings.oClasses;\n\n            $.extend(oClasses, DataTable.ext.classes, oInit.oClasses);\n            $this.addClass(oClasses.table);\n\n            if (!oSettings.oFeatures.bPaginate) {\n                oInit.iDisplayStart = 0;\n            }\n\n            if (oSettings.iInitDisplayStart === undefined) {\n                /* Display start point, taking into account the save saving */\n                oSettings.iInitDisplayStart = oInit.iDisplayStart;\n                oSettings._iDisplayStart = oInit.iDisplayStart;\n            }\n\n            /* Language definitions */\n            var oLanguage = oSettings.oLanguage;\n            $.extend(true, oLanguage, oInit.oLanguage);\n\n            if (oLanguage.sUrl) {\n                /* Get the language definitions from a file - because this Ajax call makes the language\n                 * get async to the remainder of this function we use bInitHandedOff to indicate that\n                 * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor\n                 */\n                $.ajax({\n                    dataType: 'json',\n                    url: oLanguage.sUrl,\n                    success: function(json) {\n                        _fnCamelToHungarian(defaults.oLanguage, json);\n                        $.extend(true, oLanguage, json, oSettings.oInit.oLanguage);\n\n                        _fnCallbackFire(oSettings, null, 'i18n', [oSettings], true);\n                        _fnInitialise(oSettings);\n                    },\n                    error: function() {\n                        // Error occurred loading language file\n                        _fnLog(oSettings, 0, 'i18n file loading error', 21);\n\n                        // Continue on as best we can\n                        _fnInitialise(oSettings);\n                    }\n                });\n                bInitHandedOff = true;\n            } else {\n                _fnCallbackFire(oSettings, null, 'i18n', [oSettings]);\n            }\n\n            /*\n             * Columns\n             * See if we should load columns automatically or use defined ones\n             */\n            var columnsInit = [];\n            var thead = this.getElementsByTagName('thead');\n            var initHeaderLayout = _fnDetectHeader(oSettings, thead[0]);\n\n            // If we don't have a columns array, then generate one with nulls\n            if (oInit.aoColumns) {\n                columnsInit = oInit.aoColumns;\n            } else if (initHeaderLayout.length) {\n                for (i = 0, iLen = initHeaderLayout[0].length; i < iLen; i++) {\n                    columnsInit.push(null);\n                }\n            }\n\n            // Add the columns\n            for (i = 0, iLen = columnsInit.length; i < iLen; i++) {\n                _fnAddColumn(oSettings);\n            }\n\n            // Apply the column definitions\n            _fnApplyColumnDefs(oSettings, oInit.aoColumnDefs, columnsInit, initHeaderLayout, function(iCol, oDef) {\n                _fnColumnOptions(oSettings, iCol, oDef);\n            });\n\n            /* HTML5 attribute detection - build an mData object automatically if the\n             * attributes are found\n             */\n            var rowOne = $this.children('tbody').find('tr').eq(0);\n\n            if (rowOne.length) {\n                var a = function(cell, name) {\n                    return cell.getAttribute('data-' + name) !== null ? name : null;\n                };\n\n                $(rowOne[0]).children('th, td').each(function(i, cell) {\n                    var col = oSettings.aoColumns[i];\n\n                    if (!col) {\n                        _fnLog(oSettings, 0, 'Incorrect column count', 18);\n                    }\n\n                    if (col.mData === i) {\n                        var sort = a(cell, 'sort') || a(cell, 'order');\n                        var filter = a(cell, 'filter') || a(cell, 'search');\n\n                        if (sort !== null || filter !== null) {\n                            col.mData = {\n                                _: i + '.display',\n                                sort: sort !== null ? i + '.@data-' + sort : undefined,\n                                type: sort !== null ? i + '.@data-' + sort : undefined,\n                                filter: filter !== null ? i + '.@data-' + filter : undefined\n                            };\n                            col._isArrayHost = true;\n\n                            _fnColumnOptions(oSettings, i);\n                        }\n                    }\n                });\n            }\n\n            var features = oSettings.oFeatures;\n            var loadedInit = function() {\n                /*\n                 * Sorting\n                 * @todo For modularisation (1.11) this needs to do into a sort start up handler\n                 */\n\n                // If aaSorting is not defined, then we use the first indicator in asSorting\n                // in case that has been altered, so the default sort reflects that option\n                if (oInit.aaSorting === undefined) {\n                    var sorting = oSettings.aaSorting;\n                    for (i = 0, iLen = sorting.length; i < iLen; i++) {\n                        sorting[i][1] = oSettings.aoColumns[i].asSorting[0];\n                    }\n                }\n\n                /* Do a first pass on the sorting classes (allows any size changes to be taken into\n                 * account, and also will apply sorting disabled classes if disabled\n                 */\n                _fnSortingClasses(oSettings);\n\n                _fnCallbackReg(oSettings, 'aoDrawCallback', function() {\n                    if (oSettings.bSorted || _fnDataSource(oSettings) === 'ssp' || features.bDeferRender) {\n                        _fnSortingClasses(oSettings);\n                    }\n                });\n\n\n                /*\n                 * Final init\n                 * Cache the header, body and footer as required, creating them if needed\n                 */\n                var caption = $this.children('caption');\n\n                if (oSettings.caption) {\n                    if (caption.length === 0) {\n                        caption = $('<caption/>').appendTo($this);\n                    }\n\n                    caption.html(oSettings.caption);\n                }\n\n                // Store the caption side, so we can remove the element from the document\n                // when creating the element\n                if (caption.length) {\n                    caption[0]._captionSide = caption.css('caption-side');\n                    oSettings.captionNode = caption[0];\n                }\n\n                if (thead.length === 0) {\n                    thead = $('<thead/>').appendTo($this);\n                }\n                oSettings.nTHead = thead[0];\n                $('tr', thead).addClass(oClasses.thead.row);\n\n                var tbody = $this.children('tbody');\n                if (tbody.length === 0) {\n                    tbody = $('<tbody/>').insertAfter(thead);\n                }\n                oSettings.nTBody = tbody[0];\n\n                var tfoot = $this.children('tfoot');\n                if (tfoot.length === 0) {\n                    // If we are a scrolling table, and no footer has been given, then we need to create\n                    // a tfoot element for the caption element to be appended to\n                    tfoot = $('<tfoot/>').appendTo($this);\n                }\n                oSettings.nTFoot = tfoot[0];\n                $('tr', tfoot).addClass(oClasses.tfoot.row);\n\n                // Check if there is data passing into the constructor\n                if (oInit.aaData) {\n                    for (i = 0; i < oInit.aaData.length; i++) {\n                        _fnAddData(oSettings, oInit.aaData[i]);\n                    }\n                } else if (_fnDataSource(oSettings) == 'dom') {\n                    // Grab the data from the page\n                    _fnAddTr(oSettings, $(oSettings.nTBody).children('tr'));\n                }\n\n                /* Copy the data index array */\n                oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();\n\n                /* Initialisation complete - table can be drawn */\n                oSettings.bInitialised = true;\n\n                /* Check if we need to initialise the table (it might not have been handed off to the\n                 * language processor)\n                 */\n                if (bInitHandedOff === false) {\n                    _fnInitialise(oSettings);\n                }\n            };\n\n            /* Must be done after everything which can be overridden by the state saving! */\n            _fnCallbackReg(oSettings, 'aoDrawCallback', _fnSaveState);\n\n            if (oInit.bStateSave) {\n                features.bStateSave = true;\n                _fnLoadState(oSettings, oInit, loadedInit);\n            } else {\n                loadedInit();\n            }\n\n        });\n        _that = null;\n        return this;\n    };\n\n\n    /**\n     * DataTables extensions\n     *\n     * This namespace acts as a collection area for plug-ins that can be used to\n     * extend DataTables capabilities. Indeed many of the build in methods\n     * use this method to provide their own capabilities (sorting methods for\n     * example).\n     *\n     * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy\n     * reasons\n     *\n     *  @namespace\n     */\n    DataTable.ext = _ext = {\n        /**\n         * Buttons. For use with the Buttons extension for DataTables. This is\n         * defined here so other extensions can define buttons regardless of load\n         * order. It is _not_ used by DataTables core.\n         *\n         *  @type object\n         *  @default {}\n         */\n        buttons: {},\n\n\n        /**\n         * Element class names\n         *\n         *  @type object\n         *  @default {}\n         */\n        classes: {},\n\n\n        /**\n         * DataTables build type (expanded by the download builder)\n         *\n         *  @type string\n         */\n        builder: \"-source-\",\n\n\n        /**\n         * Error reporting.\n         *\n         * How should DataTables report an error. Can take the value 'alert',\n         * 'throw', 'none' or a function.\n         *\n         *  @type string|function\n         *  @default alert\n         */\n        errMode: \"alert\",\n\n\n        /**\n         * Legacy so v1 plug-ins don't throw js errors on load\n         */\n        feature: [],\n\n        /**\n         * Feature plug-ins.\n         *\n         * This is an object of callbacks which provide the features for DataTables\n         * to be initialised via the `layout` option.\n         */\n        features: {},\n\n\n        /**\n         * Row searching.\n         *\n         * This method of searching is complimentary to the default type based\n         * searching, and a lot more comprehensive as it allows you complete control\n         * over the searching logic. Each element in this array is a function\n         * (parameters described below) that is called for every row in the table,\n         * and your logic decides if it should be included in the searching data set\n         * or not.\n         *\n         * Searching functions have the following input parameters:\n         *\n         * 1. `{object}` DataTables settings object: see\n         *    {@link DataTable.models.oSettings}\n         * 2. `{array|object}` Data for the row to be processed (same as the\n         *    original format that was passed in as the data source, or an array\n         *    from a DOM data source\n         * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which\n         *    can be useful to retrieve the `TR` element if you need DOM interaction.\n         *\n         * And the following return is expected:\n         *\n         * * {boolean} Include the row in the searched result set (true) or not\n         *   (false)\n         *\n         * Note that as with the main search ability in DataTables, technically this\n         * is \"filtering\", since it is subtractive. However, for consistency in\n         * naming we call it searching here.\n         *\n         *  @type array\n         *  @default []\n         *\n         *  @example\n         *    // The following example shows custom search being applied to the\n         *    // fourth column (i.e. the data[3] index) based on two input values\n         *    // from the end-user, matching the data in a certain range.\n         *    $.fn.dataTable.ext.search.push(\n         *      function( settings, data, dataIndex ) {\n         *        var min = document.getElementById('min').value * 1;\n         *        var max = document.getElementById('max').value * 1;\n         *        var version = data[3] == \"-\" ? 0 : data[3]*1;\n         *\n         *        if ( min == \"\" && max == \"\" ) {\n         *          return true;\n         *        }\n         *        else if ( min == \"\" && version < max ) {\n         *          return true;\n         *        }\n         *        else if ( min < version && \"\" == max ) {\n         *          return true;\n         *        }\n         *        else if ( min < version && version < max ) {\n         *          return true;\n         *        }\n         *        return false;\n         *      }\n         *    );\n         */\n        search: [],\n\n\n        /**\n         * Selector extensions\n         *\n         * The `selector` option can be used to extend the options available for the\n         * selector modifier options (`selector-modifier` object data type) that\n         * each of the three built in selector types offer (row, column and cell +\n         * their plural counterparts). For example the Select extension uses this\n         * mechanism to provide an option to select only rows, columns and cells\n         * that have been marked as selected by the end user (`{selected: true}`),\n         * which can be used in conjunction with the existing built in selector\n         * options.\n         *\n         * Each property is an array to which functions can be pushed. The functions\n         * take three attributes:\n         *\n         * * Settings object for the host table\n         * * Options object (`selector-modifier` object type)\n         * * Array of selected item indexes\n         *\n         * The return is an array of the resulting item indexes after the custom\n         * selector has been applied.\n         *\n         *  @type object\n         */\n        selector: {\n            cell: [],\n            column: [],\n            row: []\n        },\n\n\n        /**\n         * Legacy configuration options. Enable and disable legacy options that\n         * are available in DataTables.\n         *\n         *  @type object\n         */\n        legacy: {\n            /**\n             * Enable / disable DataTables 1.9 compatible server-side processing\n             * requests\n             *\n             *  @type boolean\n             *  @default null\n             */\n            ajax: null\n        },\n\n\n        /**\n         * Pagination plug-in methods.\n         *\n         * Each entry in this object is a function and defines which buttons should\n         * be shown by the pagination rendering method that is used for the table:\n         * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the\n         * buttons are displayed in the document, while the functions here tell it\n         * what buttons to display. This is done by returning an array of button\n         * descriptions (what each button will do).\n         *\n         * Pagination types (the four built in options and any additional plug-in\n         * options defined here) can be used through the `paginationType`\n         * initialisation parameter.\n         *\n         * The functions defined take two parameters:\n         *\n         * 1. `{int} page` The current page index\n         * 2. `{int} pages` The number of pages in the table\n         *\n         * Each function is expected to return an array where each element of the\n         * array can be one of:\n         *\n         * * `first` - Jump to first page when activated\n         * * `last` - Jump to last page when activated\n         * * `previous` - Show previous page when activated\n         * * `next` - Show next page when activated\n         * * `{int}` - Show page of the index given\n         * * `{array}` - A nested array containing the above elements to add a\n         *   containing 'DIV' element (might be useful for styling).\n         *\n         * Note that DataTables v1.9- used this object slightly differently whereby\n         * an object with two functions would be defined for each plug-in. That\n         * ability is still supported by DataTables 1.10+ to provide backwards\n         * compatibility, but this option of use is now decremented and no longer\n         * documented in DataTables 1.10+.\n         *\n         *  @type object\n         *  @default {}\n         *\n         *  @example\n         *    // Show previous, next and current page buttons only\n         *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {\n         *      return [ 'previous', page, 'next' ];\n         *    };\n         */\n        pager: {},\n\n\n        renderer: {\n            pageButton: {},\n            header: {}\n        },\n\n\n        /**\n         * Ordering plug-ins - custom data source\n         *\n         * The extension options for ordering of data available here is complimentary\n         * to the default type based ordering that DataTables typically uses. It\n         * allows much greater control over the the data that is being used to\n         * order a column, but is necessarily therefore more complex.\n         *\n         * This type of ordering is useful if you want to do ordering based on data\n         * live from the DOM (for example the contents of an 'input' element) rather\n         * than just the static string that DataTables knows of.\n         *\n         * The way these plug-ins work is that you create an array of the values you\n         * wish to be ordering for the column in question and then return that\n         * array. The data in the array much be in the index order of the rows in\n         * the table (not the currently ordering order!). Which order data gathering\n         * function is run here depends on the `dt-init columns.orderDataType`\n         * parameter that is used for the column (if any).\n         *\n         * The functions defined take two parameters:\n         *\n         * 1. `{object}` DataTables settings object: see\n         *    {@link DataTable.models.oSettings}\n         * 2. `{int}` Target column index\n         *\n         * Each function is expected to return an array:\n         *\n         * * `{array}` Data for the column to be ordering upon\n         *\n         *  @type array\n         *\n         *  @example\n         *    // Ordering using `input` node values\n         *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )\n         *    {\n         *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {\n         *        return $('input', td).val();\n         *      } );\n         *    }\n         */\n        order: {},\n\n\n        /**\n         * Type based plug-ins.\n         *\n         * Each column in DataTables has a type assigned to it, either by automatic\n         * detection or by direct assignment using the `type` option for the column.\n         * The type of a column will effect how it is ordering and search (plug-ins\n         * can also make use of the column type if required).\n         *\n         * @namespace\n         */\n        type: {\n            /**\n             * Automatic column class assignment\n             */\n            className: {},\n\n            /**\n             * Type detection functions.\n             *\n             * The functions defined in this object are used to automatically detect\n             * a column's type, making initialisation of DataTables super easy, even\n             * when complex data is in the table.\n             *\n             * The functions defined take two parameters:\n             *\n             *  1. `{*}` Data from the column cell to be analysed\n             *  2. `{settings}` DataTables settings object. This can be used to\n             *     perform context specific type detection - for example detection\n             *     based on language settings such as using a comma for a decimal\n             *     place. Generally speaking the options from the settings will not\n             *     be required\n             *\n             * Each function is expected to return:\n             *\n             * * `{string|null}` Data type detected, or null if unknown (and thus\n             *   pass it on to the other type detection functions.\n             *\n             *  @type array\n             *\n             *  @example\n             *    // Currency type detection plug-in:\n             *    $.fn.dataTable.ext.type.detect.push(\n             *      function ( data, settings ) {\n             *        // Check the numeric part\n             *        if ( ! data.substring(1).match(/[0-9]/) ) {\n             *          return null;\n             *        }\n             *\n             *        // Check prefixed by currency\n             *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {\n             *          return 'currency';\n             *        }\n             *        return null;\n             *      }\n             *    );\n             */\n            detect: [],\n\n            /**\n             * Automatic renderer assignment\n             */\n            render: {},\n\n\n            /**\n             * Type based search formatting.\n             *\n             * The type based searching functions can be used to pre-format the\n             * data to be search on. For example, it can be used to strip HTML\n             * tags or to de-format telephone numbers for numeric only searching.\n             *\n             * Note that is a search is not defined for a column of a given type,\n             * no search formatting will be performed.\n             *\n             * Pre-processing of searching data plug-ins - When you assign the sType\n             * for a column (or have it automatically detected for you by DataTables\n             * or a type detection plug-in), you will typically be using this for\n             * custom sorting, but it can also be used to provide custom searching\n             * by allowing you to pre-processing the data and returning the data in\n             * the format that should be searched upon. This is done by adding\n             * functions this object with a parameter name which matches the sType\n             * for that target column. This is the corollary of <i>afnSortData</i>\n             * for searching data.\n             *\n             * The functions defined take a single parameter:\n             *\n             *  1. `{*}` Data from the column cell to be prepared for searching\n             *\n             * Each function is expected to return:\n             *\n             * * `{string|null}` Formatted string that will be used for the searching.\n             *\n             *  @type object\n             *  @default {}\n             *\n             *  @example\n             *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {\n             *      return d.replace(/\\n/g,\" \").replace( /<.*?>/g, \"\" );\n             *    }\n             */\n            search: {},\n\n\n            /**\n             * Type based ordering.\n             *\n             * The column type tells DataTables what ordering to apply to the table\n             * when a column is sorted upon. The order for each type that is defined,\n             * is defined by the functions available in this object.\n             *\n             * Each ordering option can be described by three properties added to\n             * this object:\n             *\n             * * `{type}-pre` - Pre-formatting function\n             * * `{type}-asc` - Ascending order function\n             * * `{type}-desc` - Descending order function\n             *\n             * All three can be used together, only `{type}-pre` or only\n             * `{type}-asc` and `{type}-desc` together. It is generally recommended\n             * that only `{type}-pre` is used, as this provides the optimal\n             * implementation in terms of speed, although the others are provided\n             * for compatibility with existing Javascript sort functions.\n             *\n             * `{type}-pre`: Functions defined take a single parameter:\n             *\n             *  1. `{*}` Data from the column cell to be prepared for ordering\n             *\n             * And return:\n             *\n             * * `{*}` Data to be sorted upon\n             *\n             * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort\n             * functions, taking two parameters:\n             *\n             *  1. `{*}` Data to compare to the second parameter\n             *  2. `{*}` Data to compare to the first parameter\n             *\n             * And returning:\n             *\n             * * `{*}` Ordering match: <0 if first parameter should be sorted lower\n             *   than the second parameter, ===0 if the two parameters are equal and\n             *   >0 if the first parameter should be sorted height than the second\n             *   parameter.\n             *\n             *  @type object\n             *  @default {}\n             *\n             *  @example\n             *    // Numeric ordering of formatted numbers with a pre-formatter\n             *    $.extend( $.fn.dataTable.ext.type.order, {\n             *      \"string-pre\": function(x) {\n             *        a = (a === \"-\" || a === \"\") ? 0 : a.replace( /[^\\d\\-\\.]/g, \"\" );\n             *        return parseFloat( a );\n             *      }\n             *    } );\n             *\n             *  @example\n             *    // Case-sensitive string ordering, with no pre-formatting method\n             *    $.extend( $.fn.dataTable.ext.order, {\n             *      \"string-case-asc\": function(x,y) {\n             *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n             *      },\n             *      \"string-case-desc\": function(x,y) {\n             *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));\n             *      }\n             *    } );\n             */\n            order: {}\n        },\n\n        /**\n         * Unique DataTables instance counter\n         *\n         * @type int\n         * @private\n         */\n        _unique: 0,\n\n\n        //\n        // Depreciated\n        // The following properties are retained for backwards compatibility only.\n        // The should not be used in new projects and will be removed in a future\n        // version\n        //\n\n        /**\n         * Version check function.\n         *  @type function\n         *  @depreciated Since 1.10\n         */\n        fnVersionCheck: DataTable.fnVersionCheck,\n\n\n        /**\n         * Index for what 'this' index API functions should use\n         *  @type int\n         *  @deprecated Since v1.10\n         */\n        iApiIndex: 0,\n\n\n        /**\n         * Software version\n         *  @type string\n         *  @deprecated Since v1.10\n         */\n        sVersion: DataTable.version\n    };\n\n\n    //\n    // Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts\n    //\n    $.extend(_ext, {\n        afnFiltering: _ext.search,\n        aTypes: _ext.type.detect,\n        ofnSearch: _ext.type.search,\n        oSort: _ext.type.order,\n        afnSortData: _ext.order,\n        aoFeatures: _ext.feature,\n        oStdClasses: _ext.classes,\n        oPagination: _ext.pager\n    });\n\n\n    $.extend(DataTable.ext.classes, {\n        container: 'dt-container',\n        empty: {\n            row: 'dt-empty'\n        },\n        info: {\n            container: 'dt-info'\n        },\n        length: {\n            container: 'dt-length',\n            select: 'dt-input'\n        },\n        order: {\n            canAsc: 'dt-orderable-asc',\n            canDesc: 'dt-orderable-desc',\n            isAsc: 'dt-ordering-asc',\n            isDesc: 'dt-ordering-desc',\n            none: 'dt-orderable-none',\n            position: 'sorting_'\n        },\n        processing: {\n            container: 'dt-processing'\n        },\n        scrolling: {\n            body: 'dt-scroll-body',\n            container: 'dt-scroll',\n            footer: {\n                self: 'dt-scroll-foot',\n                inner: 'dt-scroll-footInner'\n            },\n            header: {\n                self: 'dt-scroll-head',\n                inner: 'dt-scroll-headInner'\n            }\n        },\n        search: {\n            container: 'dt-search',\n            input: 'dt-input'\n        },\n        table: 'dataTable',\n        tbody: {\n            cell: '',\n            row: ''\n        },\n        thead: {\n            cell: '',\n            row: ''\n        },\n        tfoot: {\n            cell: '',\n            row: ''\n        },\n        paging: {\n            active: 'current',\n            button: 'dt-paging-button',\n            container: 'dt-paging',\n            disabled: 'disabled'\n        }\n    });\n\n\n    /*\n     * It is useful to have variables which are scoped locally so only the\n     * DataTables functions can access them and they don't leak into global space.\n     * At the same time these functions are often useful over multiple files in the\n     * core and API, so we list, or at least document, all variables which are used\n     * by DataTables as private variables here. This also ensures that there is no\n     * clashing of variable names and that they can easily referenced for reuse.\n     */\n\n\n    // Defined else where\n    //  _selector_run\n    //  _selector_opts\n    //  _selector_row_indexes\n\n    var _ext; // DataTable.ext\n    var _Api; // DataTable.Api\n    var _api_register; // DataTable.Api.register\n    var _api_registerPlural; // DataTable.Api.registerPlural\n\n    var _re_dic = {};\n    var _re_new_lines = /[\\r\\n\\u2028]/g;\n    var _re_html = /<.*?>/g;\n\n    // This is not strict ISO8601 - Date.parse() is quite lax, although\n    // implementations differ between browsers.\n    var _re_date = /^\\d{2,4}[./-]\\d{1,2}[./-]\\d{1,2}([T ]{1}\\d{1,2}[:.]\\d{2}([.:]\\d{2})?)?$/;\n\n    // Escape regular expression special characters\n    var _re_escape_regex = new RegExp('(\\\\' + ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\\\', '$', '^', '-'].join('|\\\\') + ')', 'g');\n\n    // https://en.wikipedia.org/wiki/Foreign_exchange_market\n    // - \\u20BD - Russian ruble.\n    // - \\u20a9 - South Korean Won\n    // - \\u20BA - Turkish Lira\n    // - \\u20B9 - Indian Rupee\n    // - R - Brazil (R$) and South Africa\n    // - fr - Swiss Franc\n    // - kr - Swedish krona, Norwegian krone and Danish krone\n    // - \\u2009 is thin space and \\u202F is narrow no-break space, both used in many\n    // - É - Bitcoin\n    // - Î - Ethereum\n    //   standards as thousands separators.\n    var _re_formatted_numeric = /['\\u00A0,$Â£â¬Â¥%\\u2009\\u202F\\u20BD\\u20a9\\u20BArfkÉÎ]/gi;\n\n\n    var _empty = function(d) {\n        return !d || d === true || d === '-' ? true : false;\n    };\n\n\n    var _intVal = function(s) {\n        var integer = parseInt(s, 10);\n        return !isNaN(integer) && isFinite(s) ? integer : null;\n    };\n\n    // Convert from a formatted number with characters other than `.` as the\n    // decimal place, to a Javascript number\n    var _numToDecimal = function(num, decimalPoint) {\n        // Cache created regular expressions for speed as this function is called often\n        if (!_re_dic[decimalPoint]) {\n            _re_dic[decimalPoint] = new RegExp(_fnEscapeRegex(decimalPoint), 'g');\n        }\n        return typeof num === 'string' && decimalPoint !== '.' ?\n            num.replace(/\\./g, '').replace(_re_dic[decimalPoint], '.') :\n            num;\n    };\n\n\n    var _isNumber = function(d, decimalPoint, formatted) {\n        var type = typeof d;\n        var strType = type === 'string';\n\n        if (type === 'number' || type === 'bigint') {\n            return true;\n        }\n\n        // If empty return immediately so there must be a number if it is a\n        // formatted string (this stops the string \"k\", or \"kr\", etc being detected\n        // as a formatted number for currency\n        if (_empty(d)) {\n            return true;\n        }\n\n        if (decimalPoint && strType) {\n            d = _numToDecimal(d, decimalPoint);\n        }\n\n        if (formatted && strType) {\n            d = d.replace(_re_formatted_numeric, '');\n        }\n\n        return !isNaN(parseFloat(d)) && isFinite(d);\n    };\n\n\n    // A string without HTML in it can be considered to be HTML still\n    var _isHtml = function(d) {\n        return _empty(d) || typeof d === 'string';\n    };\n\n    // Is a string a number surrounded by HTML?\n    var _htmlNumeric = function(d, decimalPoint, formatted) {\n        if (_empty(d)) {\n            return true;\n        }\n\n        // Input and select strings mean that this isn't just a number\n        if (typeof d === 'string' && d.match(/<(input|select)/i)) {\n            return null;\n        }\n\n        var html = _isHtml(d);\n        return !html ?\n            null :\n            _isNumber(_stripHtml(d), decimalPoint, formatted) ?\n                true :\n                null;\n    };\n\n\n    var _pluck = function(a, prop, prop2) {\n        var out = [];\n        var i = 0,\nien = a.length;\n\n        // Could have the test in the loop for slightly smaller code, but speed\n        // is essential here\n        if (prop2 !== undefined) {\n            for (; i < ien; i++) {\n                if (a[i] && a[i][prop]) {\n                    out.push(a[i][prop][prop2]);\n                }\n            }\n        } else {\n            for (; i < ien; i++) {\n                if (a[i]) {\n                    out.push(a[i][prop]);\n                }\n            }\n        }\n\n        return out;\n    };\n\n\n    // Basically the same as _pluck, but rather than looping over `a` we use `order`\n    // as the indexes to pick from `a`\n    var _pluck_order = function(a, order, prop, prop2) {\n        var out = [];\n        var i = 0,\nien = order.length;\n\n        // Could have the test in the loop for slightly smaller code, but speed\n        // is essential here\n        if (prop2 !== undefined) {\n            for (; i < ien; i++) {\n                if (a[order[i]][prop]) {\n                    out.push(a[order[i]][prop][prop2]);\n                }\n            }\n        } else {\n            for (; i < ien; i++) {\n                if (a[order[i]]) {\n                    out.push(a[order[i]][prop]);\n                }\n            }\n        }\n\n        return out;\n    };\n\n\n    var _range = function(len, start) {\n        var out = [];\n        var end;\n\n        if (start === undefined) {\n            start = 0;\n            end = len;\n        } else {\n            end = start;\n            start = len;\n        }\n\n        for (var i = start; i < end; i++) {\n            out.push(i);\n        }\n\n        return out;\n    };\n\n\n    var _removeEmpty = function(a) {\n        var out = [];\n\n        for (var i = 0, ien = a.length; i < ien; i++) {\n            if (a[i]) { // Careful - will remove all falsy values!\n                out.push(a[i]);\n            }\n        }\n\n        return out;\n    };\n\n    // Replaceable function in api.util\n    var _stripHtml = function(d) {\n        return d\n            .replace(_re_html, '') // Complete tags\n            .replace(/<script/i, ''); // Safety for incomplete script tag\n    };\n\n    // Replaceable function in api.util\n    var _escapeHtml = function(d) {\n        if (Array.isArray(d)) {\n            d = d.join(',');\n        }\n\n        return typeof d === 'string' ?\n            d\n                .replace(/&/g, '&amp;')\n                .replace(/</g, '&lt;')\n                .replace(/>/g, '&gt;')\n                .replace(/\"/g, '&quot;') :\n            d;\n    };\n\n    // Remove diacritics from a string by decomposing it and then removing\n    // non-ascii characters\n    var _normalize = function(str, both) {\n        if (typeof str !== 'string') {\n            return str;\n        }\n\n        // It is faster to just run `normalize` than it is to check if\n        // we need to with a regex!\n        var res = str.normalize(\"NFD\");\n\n        // Equally, here we check if a regex is needed or not\n        return res.length !== str.length\n            ? (both === true ? str + ' ' : '') + res.replace(/[\\u0300-\\u036f]/g, \"\")\n            : res;\n    };\n\n    /**\n     * Determine if all values in the array are unique. This means we can short\n     * cut the _unique method at the cost of a single loop. A sorted array is used\n     * to easily check the values.\n     *\n     * @param  {array} src Source array\n     * @return {boolean} true if all unique, false otherwise\n     * @ignore\n     */\n    var _areAllUnique = function(src) {\n        if (src.length < 2) {\n            return true;\n        }\n\n        var sorted = src.slice().sort();\n        var last = sorted[0];\n\n        for (var i = 1, ien = sorted.length; i < ien; i++) {\n            if (sorted[i] === last) {\n                return false;\n            }\n\n            last = sorted[i];\n        }\n\n        return true;\n    };\n\n\n    /**\n     * Find the unique elements in a source array.\n     *\n     * @param  {array} src Source array\n     * @return {array} Array of unique items\n     * @ignore\n     */\n    var _unique = function(src) {\n        if (Array.from && Set) {\n            return Array.from(new Set(src));\n        }\n\n        if (_areAllUnique(src)) {\n            return src.slice();\n        }\n\n        // A faster unique method is to use object keys to identify used values,\n        // but this doesn't work with arrays or objects, which we must also\n        // consider. See jsperf.app/compare-array-unique-versions/4 for more\n        // information.\n        var\n            out = [],\n            val,\n            i,\nien = src.length,\n            j,\nk = 0;\n\n        again: for (i = 0; i < ien; i++) {\n            val = src[i];\n\n            for (j = 0; j < k; j++) {\n                if (out[j] === val) {\n                    continue again;\n                }\n            }\n\n            out.push(val);\n            k++;\n        }\n\n        return out;\n    };\n\n    // Surprisingly this is faster than [].concat.apply\n    // https://jsperf.com/flatten-an-array-loop-vs-reduce/2\n    var _flatten = function(out, val) {\n        if (Array.isArray(val)) {\n            for (var i = 0; i < val.length; i++) {\n                _flatten(out, val[i]);\n            }\n        } else {\n            out.push(val);\n        }\n\n        return out;\n    };\n\n    // Similar to jQuery's addClass, but use classList.add\n    /**\n     * @param el\n     * @param name\n     */\n    function _addClass(el, name) {\n        if (name) {\n            name.split(' ').forEach(function(n) {\n                if (n) {\n                    // `add` does deduplication, so no need to check `contains`\n                    el.classList.add(n);\n                }\n            });\n        }\n    }\n\n    /**\n     * DataTables utility methods\n     *\n     * This namespace provides helper methods that DataTables uses internally to\n     * create a DataTable, but which are not exclusively used only for DataTables.\n     * These methods can be used by extension authors to save the duplication of\n     * code.\n     *\n     *  @namespace\n     */\n    DataTable.util = {\n        /**\n         * Return a string with diacritic characters decomposed\n         * @param {*} mixed Function or string to normalize\n         * @param {*} both Return original string and the normalized string\n         * @returns String or undefined\n         */\n        diacritics: function(mixed, both) {\n            var type = typeof mixed;\n\n            if (type !== 'function') {\n                return _normalize(mixed, both);\n            }\n            _normalize = mixed;\n        },\n\n        /**\n         * Debounce a function\n         *\n         * @param {function} fn Function to be called\n         * @param {integer} freq Call frequency in mS\n         * @param timeout\n         * @return {function} Wrapped function\n         */\n        debounce: function(fn, timeout) {\n            var timer;\n\n            return function() {\n                var that = this;\n                var args = arguments;\n\n                clearTimeout(timer);\n\n                timer = setTimeout(function() {\n                    fn.apply(that, args);\n                }, timeout || 250);\n            };\n        },\n\n        /**\n         * Throttle the calls to a function. Arguments and context are maintained\n         * for the throttled function.\n         *\n         * @param {function} fn Function to be called\n         * @param {integer} freq Call frequency in mS\n         * @return {function} Wrapped function\n         */\n        throttle: function(fn, freq) {\n            var\n                frequency = freq !== undefined ? freq : 200,\n                last,\n                timer;\n\n            return function() {\n                var\n                    that = this,\n                    now = +new Date(),\n                    args = arguments;\n\n                if (last && now < last + frequency) {\n                    clearTimeout(timer);\n\n                    timer = setTimeout(function() {\n                        last = undefined;\n                        fn.apply(that, args);\n                    }, frequency);\n                } else {\n                    last = now;\n                    fn.apply(that, args);\n                }\n            };\n        },\n\n        /**\n         * Escape a string such that it can be used in a regular expression\n         *\n         *  @param {string} val string to escape\n         *  @returns {string} escaped string\n         */\n        escapeRegex: function(val) {\n            return val.replace(_re_escape_regex, '\\\\$1');\n        },\n\n        /**\n         * Create a function that will write to a nested object or array\n         * @param {*} source JSON notation string\n         * @returns Write function\n         */\n        set: function(source) {\n            if ($.isPlainObject(source)) {\n                /* Unlike get, only the underscore (global) option is used for for\n                 * setting data since we don't know the type here. This is why an object\n                 * option is not documented for `mData` (which is read/write), but it is\n                 * for `mRender` which is read only.\n                 */\n                return DataTable.util.set(source._);\n            } else if (source === null) {\n                // Nothing to do when the data source is null\n                return function() { };\n            } else if (typeof source === 'function') {\n                return function(data, val, meta) {\n                    source(data, 'set', val, meta);\n                };\n            } else if (\n                typeof source === 'string' && (source.indexOf('.') !== -1 ||\n                    source.indexOf('[') !== -1 || source.indexOf('(') !== -1)\n            ) {\n                // Like the get, we need to get data from a nested object\n                var setData = function(data, val, src) {\n                    var a = _fnSplitObjNotation(src),\nb;\n                    var aLast = a[a.length - 1];\n                    var arrayNotation, funcNotation, o, innerSrc;\n\n                    for (var i = 0, iLen = a.length - 1; i < iLen; i++) {\n                        // Protect against prototype pollution\n                        if (a[i] === '__proto__' || a[i] === 'constructor') {\n                            throw new Error('Cannot set prototype values');\n                        }\n\n                        // Check if we are dealing with an array notation request\n                        arrayNotation = a[i].match(__reArray);\n                        funcNotation = a[i].match(__reFn);\n\n                        if (arrayNotation) {\n                            a[i] = a[i].replace(__reArray, '');\n                            data[a[i]] = [];\n\n                            // Get the remainder of the nested object to set so we can recurse\n                            b = a.slice();\n                            b.splice(0, i + 1);\n                            innerSrc = b.join('.');\n\n                            // Traverse each entry in the array setting the properties requested\n                            if (Array.isArray(val)) {\n                                for (var j = 0, jLen = val.length; j < jLen; j++) {\n                                    o = {};\n                                    setData(o, val[j], innerSrc);\n                                    data[a[i]].push(o);\n                                }\n                            } else {\n                                // We've been asked to save data to an array, but it\n                                // isn't array data to be saved. Best that can be done\n                                // is to just save the value.\n                                data[a[i]] = val;\n                            }\n\n                            // The inner call to setData has already traversed through the remainder\n                            // of the source and has set the data, thus we can exit here\n                            return;\n                        } else if (funcNotation) {\n                            // Function call\n                            a[i] = a[i].replace(__reFn, '');\n                            data = data[a[i]](val);\n                        }\n\n                        // If the nested object doesn't currently exist - since we are\n                        // trying to set the value - create it\n                        if (data[a[i]] === null || data[a[i]] === undefined) {\n                            data[a[i]] = {};\n                        }\n                        data = data[a[i]];\n                    }\n\n                    // Last item in the input - i.e, the actual set\n                    if (aLast.match(__reFn)) {\n                        // Function call\n                        data = data[aLast.replace(__reFn, '')](val);\n                    } else {\n                        // If array notation is used, we just want to strip it and use the property name\n                        // and assign the value. If it isn't used, then we get the result we want anyway\n                        data[aLast.replace(__reArray, '')] = val;\n                    }\n                };\n\n                return function(data, val) { // Meta is also passed in, but not used\n                    return setData(data, val, source);\n                };\n            } else {\n                // Array or flat object mapping\n                return function(data, val) { // Meta is also passed in, but not used\n                    data[source] = val;\n                };\n            }\n        },\n\n        /**\n         * Create a function that will read nested objects from arrays, based on JSON notation\n         * @param {*} source JSON notation string\n         * @returns Value read\n         */\n        get: function(source) {\n            if ($.isPlainObject(source)) {\n                // Build an object of get functions, and wrap them in a single call\n                var o = {};\n                $.each(source, function(key, val) {\n                    if (val) {\n                        o[key] = DataTable.util.get(val);\n                    }\n                });\n\n                return function(data, type, row, meta) {\n                    var t = o[type] || o._;\n                    return t !== undefined ?\n                        t(data, type, row, meta) :\n                        data;\n                };\n            } else if (source === null) {\n                // Give an empty string for rendering / sorting etc\n                return function(data) { // Type, row and meta also passed, but not used\n                    return data;\n                };\n            } else if (typeof source === 'function') {\n                return function(data, type, row, meta) {\n                    return source(data, type, row, meta);\n                };\n            } else if (\n                typeof source === 'string' && (source.indexOf('.') !== -1 ||\n                    source.indexOf('[') !== -1 || source.indexOf('(') !== -1)\n            ) {\n                /* If there is a . in the source string then the data source is in a\n                 * nested object so we loop over the data for each level to get the next\n                 * level down. On each loop we test for undefined, and if found immediately\n                 * return. This allows entire objects to be missing and sDefaultContent to\n                 * be used if defined, rather than throwing an error\n                 */\n                var fetchData = function(data, type, src) {\n                    var arrayNotation, funcNotation, out, innerSrc;\n\n                    if (src !== \"\") {\n                        var a = _fnSplitObjNotation(src);\n\n                        for (var i = 0, iLen = a.length; i < iLen; i++) {\n                            // Check if we are dealing with special notation\n                            arrayNotation = a[i].match(__reArray);\n                            funcNotation = a[i].match(__reFn);\n\n                            if (arrayNotation) {\n                                // Array notation\n                                a[i] = a[i].replace(__reArray, '');\n\n                                // Condition allows simply [] to be passed in\n                                if (a[i] !== \"\") {\n                                    data = data[a[i]];\n                                }\n                                out = [];\n\n                                // Get the remainder of the nested object to get\n                                a.splice(0, i + 1);\n                                innerSrc = a.join('.');\n\n                                // Traverse each entry in the array getting the properties requested\n                                if (Array.isArray(data)) {\n                                    for (var j = 0, jLen = data.length; j < jLen; j++) {\n                                        out.push(fetchData(data[j], type, innerSrc));\n                                    }\n                                }\n\n                                // If a string is given in between the array notation indicators, that\n                                // is used to join the strings together, otherwise an array is returned\n                                var join = arrayNotation[0].substring(1, arrayNotation[0].length - 1);\n                                data = (join === \"\") ? out : out.join(join);\n\n                                // The inner call to fetchData has already traversed through the remainder\n                                // of the source requested, so we exit from the loop\n                                break;\n                            } else if (funcNotation) {\n                                // Function call\n                                a[i] = a[i].replace(__reFn, '');\n                                data = data[a[i]]();\n                                continue;\n                            }\n\n                            if (data === null || data[a[i]] === null) {\n                                return null;\n                            } else if (data === undefined || data[a[i]] === undefined) {\n                                return undefined;\n                            }\n\n                            data = data[a[i]];\n                        }\n                    }\n\n                    return data;\n                };\n\n                return function(data, type) { // Row and meta also passed, but not used\n                    return fetchData(data, type, source);\n                };\n            } else {\n                // Array or flat object mapping\n                return function(data) { // Row and meta also passed, but not used\n                    return data[source];\n                };\n            }\n        },\n\n        stripHtml: function(mixed) {\n            var type = typeof mixed;\n\n            if (type === 'function') {\n                _stripHtml = mixed;\n                return;\n            } else if (type === 'string') {\n                return _stripHtml(mixed);\n            }\n            return mixed;\n        },\n\n        escapeHtml: function(mixed) {\n            var type = typeof mixed;\n\n            if (type === 'function') {\n                _escapeHtml = mixed;\n                return;\n            } else if (type === 'string' || Array.isArray(mixed)) {\n                return _escapeHtml(mixed);\n            }\n            return mixed;\n        },\n\n        unique: _unique\n    };\n\n\n    /**\n     * Create a mapping object that allows camel case parameters to be looked up\n     * for their Hungarian counterparts. The mapping is stored in a private\n     * parameter called `_hungarianMap` which can be accessed on the source object.\n     *  @param {object} o\n     *  @memberof DataTable#oApi\n     */\n    function _fnHungarianMap(o) {\n        var\n            hungarian = 'a aa ai ao as b fn i m o s ',\n            match,\n            newKey,\n            map = {};\n\n        $.each(o, function(key) {\n            match = key.match(/^([^A-Z]+?)([A-Z])/);\n\n            if (match && hungarian.indexOf(match[1] + ' ') !== -1) {\n                newKey = key.replace(match[0], match[2].toLowerCase());\n                map[newKey] = key;\n\n                if (match[1] === 'o') {\n                    _fnHungarianMap(o[key]);\n                }\n            }\n        });\n\n        o._hungarianMap = map;\n    }\n\n\n    /**\n     * Convert from camel case parameters to Hungarian, based on a Hungarian map\n     * created by _fnHungarianMap.\n     *  @param {object} src The model object which holds all parameters that can be\n     *    mapped.\n     *  @param {object} user The object to convert from camel case to Hungarian.\n     *  @param {boolean} force When set to `true`, properties which already have a\n     *    Hungarian value in the `user` object will be overwritten. Otherwise they\n     *    won't be.\n     *  @memberof DataTable#oApi\n     */\n    function _fnCamelToHungarian(src, user, force) {\n        if (!src._hungarianMap) {\n            _fnHungarianMap(src);\n        }\n\n        var hungarianKey;\n\n        $.each(user, function(key) {\n            hungarianKey = src._hungarianMap[key];\n\n            if (hungarianKey !== undefined && (force || user[hungarianKey] === undefined)) {\n                // For objects, we need to buzz down into the object to copy parameters\n                if (hungarianKey.charAt(0) === 'o') {\n                    // Copy the camelCase options over to the hungarian\n                    if (!user[hungarianKey]) {\n                        user[hungarianKey] = {};\n                    }\n                    $.extend(true, user[hungarianKey], user[key]);\n\n                    _fnCamelToHungarian(src[hungarianKey], user[hungarianKey], force);\n                } else {\n                    user[hungarianKey] = user[key];\n                }\n            }\n        });\n    }\n\n    /**\n     * Map one parameter onto another\n     *  @param {object} o Object to map\n     *  @param {*} knew The new parameter name\n     *  @param {*} old The old parameter name\n     */\n    var _fnCompatMap = function(o, knew, old) {\n        if (o[knew] !== undefined) {\n            o[old] = o[knew];\n        }\n    };\n\n\n    /**\n     * Provide backwards compatibility for the main DT options. Note that the new\n     * options are mapped onto the old parameters, so this is an external interface\n     * change only.\n     *  @param {object} init Object to map\n     */\n    function _fnCompatOpts(init) {\n        _fnCompatMap(init, 'ordering', 'bSort');\n        _fnCompatMap(init, 'orderMulti', 'bSortMulti');\n        _fnCompatMap(init, 'orderClasses', 'bSortClasses');\n        _fnCompatMap(init, 'orderCellsTop', 'bSortCellsTop');\n        _fnCompatMap(init, 'order', 'aaSorting');\n        _fnCompatMap(init, 'orderFixed', 'aaSortingFixed');\n        _fnCompatMap(init, 'paging', 'bPaginate');\n        _fnCompatMap(init, 'pagingType', 'sPaginationType');\n        _fnCompatMap(init, 'pageLength', 'iDisplayLength');\n        _fnCompatMap(init, 'searching', 'bFilter');\n\n        // Boolean initialisation of x-scrolling\n        if (typeof init.sScrollX === 'boolean') {\n            init.sScrollX = init.sScrollX ? '100%' : '';\n        }\n        if (typeof init.scrollX === 'boolean') {\n            init.scrollX = init.scrollX ? '100%' : '';\n        }\n\n        // Column search objects are in an array, so it needs to be converted\n        // element by element\n        var searchCols = init.aoSearchCols;\n\n        if (searchCols) {\n            for (var i = 0, ien = searchCols.length; i < ien; i++) {\n                if (searchCols[i]) {\n                    _fnCamelToHungarian(DataTable.models.oSearch, searchCols[i]);\n                }\n            }\n        }\n\n        // Enable search delay if server-side processing is enabled\n        if (init.serverSide && !init.searchDelay) {\n            init.searchDelay = 400;\n        }\n    }\n\n\n    /**\n     * Provide backwards compatibility for column options. Note that the new options\n     * are mapped onto the old parameters, so this is an external interface change\n     * only.\n     *  @param {object} init Object to map\n     */\n    function _fnCompatCols(init) {\n        _fnCompatMap(init, 'orderable', 'bSortable');\n        _fnCompatMap(init, 'orderData', 'aDataSort');\n        _fnCompatMap(init, 'orderSequence', 'asSorting');\n        _fnCompatMap(init, 'orderDataType', 'sortDataType');\n\n        // OrderData can be given as an integer\n        var dataSort = init.aDataSort;\n        if (typeof dataSort === 'number' && !Array.isArray(dataSort)) {\n            init.aDataSort = [dataSort];\n        }\n    }\n\n\n    /**\n     * Browser feature detection for capabilities, quirks\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnBrowserDetect(settings) {\n        // We don't need to do this every time DataTables is constructed, the values\n        // calculated are specific to the browser and OS configuration which we\n        // don't expect to change between initialisations\n        if (!DataTable.__browser) {\n            var browser = {};\n            DataTable.__browser = browser;\n\n            // Scrolling feature / quirks detection\n            var n = $('<div/>')\n                .css({\n                    position: 'fixed',\n                    top: 0,\n                    left: -1 * window.pageXOffset, // Allow for scrolling\n                    height: 1,\n                    width: 1,\n                    overflow: 'hidden'\n                })\n                .append(\n                    $('<div/>')\n                        .css({\n                            position: 'absolute',\n                            top: 1,\n                            left: 1,\n                            width: 100,\n                            overflow: 'scroll'\n                        })\n                        .append(\n                            $('<div/>')\n                                .css({\n                                    width: '100%',\n                                    height: 10\n                                })\n                        )\n                )\n                .appendTo('body');\n\n            var outer = n.children();\n            var inner = outer.children();\n\n            // Get scrollbar width\n            browser.barWidth = outer[0].offsetWidth - outer[0].clientWidth;\n\n            // In rtl text layout, some browsers (most, but not all) will place the\n            // scrollbar on the left, rather than the right.\n            browser.bScrollbarLeft = Math.round(inner.offset().left) !== 1;\n\n            n.remove();\n        }\n\n        $.extend(settings.oBrowser, DataTable.__browser);\n        settings.oScroll.iBarWidth = DataTable.__browser.barWidth;\n    }\n\n    /**\n     * Add a column to the list used for the table with default values\n     *  @param {object} oSettings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnAddColumn(oSettings) {\n        // Add column to aoColumns array\n        var oDefaults = DataTable.defaults.column;\n        var iCol = oSettings.aoColumns.length;\n        var oCol = $.extend({}, DataTable.models.oColumn, oDefaults, {\n            \"aDataSort\": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],\n            \"mData\": oDefaults.mData ? oDefaults.mData : iCol,\n            idx: iCol,\n            searchFixed: {},\n            colEl: $('<col>')\n        });\n        oSettings.aoColumns.push(oCol);\n\n        // Add search object for column specific search. Note that the `searchCols[ iCol ]`\n        // passed into extend can be undefined. This allows the user to give a default\n        // with only some of the parameters defined, and also not give a default\n        var searchCols = oSettings.aoPreSearchCols;\n        searchCols[iCol] = $.extend({}, DataTable.models.oSearch, searchCols[iCol]);\n    }\n\n\n    /**\n     * Apply options for a column\n     *  @param {object} oSettings dataTables settings object\n     *  @param {int} iCol column index to consider\n     *  @param {object} oOptions object with sType, bVisible and bSearchable etc\n     *  @memberof DataTable#oApi\n     */\n    function _fnColumnOptions(oSettings, iCol, oOptions) {\n        var oCol = oSettings.aoColumns[iCol];\n\n        /* User specified column options */\n        if (oOptions !== undefined && oOptions !== null) {\n            // Backwards compatibility\n            _fnCompatCols(oOptions);\n\n            // Map camel case parameters to their Hungarian counterparts\n            _fnCamelToHungarian(DataTable.defaults.column, oOptions, true);\n\n            /* Backwards compatibility for mDataProp */\n            if (oOptions.mDataProp !== undefined && !oOptions.mData) {\n                oOptions.mData = oOptions.mDataProp;\n            }\n\n            if (oOptions.sType) {\n                oCol._sManualType = oOptions.sType;\n            }\n\n            // `class` is a reserved word in Javascript, so we need to provide\n            // the ability to use a valid name for the camel case input\n            if (oOptions.className && !oOptions.sClass) {\n                oOptions.sClass = oOptions.className;\n            }\n\n            var origClass = oCol.sClass;\n\n            $.extend(oCol, oOptions);\n            _fnMap(oCol, oOptions, \"sWidth\", \"sWidthOrig\");\n\n            // Merge class from previously defined classes with this one, rather than just\n            // overwriting it in the extend above\n            if (origClass !== oCol.sClass) {\n                oCol.sClass = origClass + ' ' + oCol.sClass;\n            }\n\n            /* IDataSort to be applied (backwards compatibility), but aDataSort will take\n             * priority if defined\n             */\n            if (oOptions.iDataSort !== undefined) {\n                oCol.aDataSort = [oOptions.iDataSort];\n            }\n            _fnMap(oCol, oOptions, \"aDataSort\");\n        }\n\n        /* Cache the data get and set functions for speed */\n        var mDataSrc = oCol.mData;\n        var mData = _fnGetObjectDataFn(mDataSrc);\n\n        // The `render` option can be given as an array to access the helper rendering methods.\n        // The first element is the rendering method to use, the rest are the parameters to pass\n        if (oCol.mRender && Array.isArray(oCol.mRender)) {\n            var copy = oCol.mRender.slice();\n            var name = copy.shift();\n\n            oCol.mRender = DataTable.render[name].apply(window, copy);\n        }\n\n        oCol._render = oCol.mRender ? _fnGetObjectDataFn(oCol.mRender) : null;\n\n        var attrTest = function(src) {\n            return typeof src === 'string' && src.indexOf('@') !== -1;\n        };\n        oCol._bAttrSrc = $.isPlainObject(mDataSrc) && (\n            attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter)\n        );\n        oCol._setter = null;\n\n        oCol.fnGetData = function(rowData, type, meta) {\n            var innerData = mData(rowData, type, undefined, meta);\n\n            return oCol._render && type ?\n                oCol._render(innerData, type, rowData, meta) :\n                innerData;\n        };\n        oCol.fnSetData = function(rowData, val, meta) {\n            return _fnSetObjectDataFn(mDataSrc)(rowData, val, meta);\n        };\n\n        // Indicate if DataTables should read DOM data as an object or array\n        // Used in _fnGetRowElements\n        if (typeof mDataSrc !== 'number' && !oCol._isArrayHost) {\n            oSettings._rowReadObject = true;\n        }\n\n        /* Feature sorting overrides column specific when off */\n        if (!oSettings.oFeatures.bSort) {\n            oCol.bSortable = false;\n        }\n    }\n\n\n    /**\n     * Adjust the table column widths for new data. Note: you would probably want to\n     * do a redraw after calling this function!\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnAdjustColumnSizing(settings) {\n        _fnCalculateColumnWidths(settings);\n        _fnColumnSizes(settings);\n\n        var scroll = settings.oScroll;\n        if (scroll.sY !== '' || scroll.sX !== '') {\n            _fnScrollDraw(settings);\n        }\n\n        _fnCallbackFire(settings, null, 'column-sizing', [settings]);\n    }\n\n    /**\n     * Apply column sizes\n     *\n     * @param {*} settings DataTables settings object\n     */\n    function _fnColumnSizes(settings) {\n        var cols = settings.aoColumns;\n\n        for (var i = 0; i < cols.length; i++) {\n            var width = _fnColumnsSumWidth(settings, [i], false, false);\n\n            cols[i].colEl.css('width', width);\n        }\n    }\n\n\n    /**\n     * Convert the index of a visible column to the index in the data array (take account\n     * of hidden columns)\n     *  @param {object} oSettings dataTables settings object\n     *  @param {int} iMatch Visible column index to lookup\n     *  @returns {int} i the data index\n     *  @memberof DataTable#oApi\n     */\n    function _fnVisibleToColumnIndex(oSettings, iMatch) {\n        var aiVis = _fnGetColumns(oSettings, 'bVisible');\n\n        return typeof aiVis[iMatch] === 'number' ?\n            aiVis[iMatch] :\n            null;\n    }\n\n\n    /**\n     * Convert the index of an index in the data array and convert it to the visible\n     *   column index (take account of hidden columns)\n     *  @param {int} iMatch Column index to lookup\n     *  @param {object} oSettings dataTables settings object\n     *  @returns {int} i the data index\n     *  @memberof DataTable#oApi\n     */\n    function _fnColumnIndexToVisible(oSettings, iMatch) {\n        var aiVis = _fnGetColumns(oSettings, 'bVisible');\n        var iPos = aiVis.indexOf(iMatch);\n\n        return iPos !== -1 ? iPos : null;\n    }\n\n\n    /**\n     * Get the number of visible columns\n     *  @param {object} oSettings dataTables settings object\n     * @param settings\n     *  @returns {int} i the number of visible columns\n     *  @memberof DataTable#oApi\n     */\n    function _fnVisbleColumns(settings) {\n        var layout = settings.aoHeader;\n        var columns = settings.aoColumns;\n        var vis = 0;\n\n        if (layout.length) {\n            for (var i = 0, ien = layout[0].length; i < ien; i++) {\n                if (columns[i].bVisible && $(layout[0][i].cell).css('display') !== 'none') {\n                    vis++;\n                }\n            }\n        }\n\n        return vis;\n    }\n\n\n    /**\n     * Get an array of column indexes that match a given property\n     *  @param {object} oSettings dataTables settings object\n     *  @param {string} sParam Parameter in aoColumns to look for - typically\n     *    bVisible or bSearchable\n     *  @returns {array} Array of indexes with matched properties\n     *  @memberof DataTable#oApi\n     */\n    function _fnGetColumns(oSettings, sParam) {\n        var a = [];\n\n        oSettings.aoColumns.map(function(val, i) {\n            if (val[sParam]) {\n                a.push(i);\n            }\n        });\n\n        return a;\n    }\n\n\n    /**\n     * Calculate the 'type' of a column\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnColumnTypes(settings) {\n        var columns = settings.aoColumns;\n        var data = settings.aoData;\n        var types = DataTable.ext.type.detect;\n        var i, ien, j, jen, k, ken;\n        var col, detectedType, cache;\n\n        // For each column, spin over the\n        for (i = 0, ien = columns.length; i < ien; i++) {\n            col = columns[i];\n            cache = [];\n\n            if (!col.sType && col._sManualType) {\n                col.sType = col._sManualType;\n            } else if (!col.sType) {\n                for (j = 0, jen = types.length; j < jen; j++) {\n                    for (k = 0, ken = data.length; k < ken; k++) {\n\n                        if (!data[k]) {\n                            continue;\n                        }\n\n                        // Use a cache array so we only need to get the type data\n                        // from the formatter once (when using multiple detectors)\n                        if (cache[k] === undefined) {\n                            cache[k] = _fnGetCellData(settings, k, i, 'type');\n                        }\n\n                        detectedType = types[j](cache[k], settings);\n\n                        // If null, then this type can't apply to this column, so\n                        // rather than testing all cells, break out. There is an\n                        // exception for the last type which is `html`. We need to\n                        // scan all rows since it is possible to mix string and HTML\n                        // types\n                        if (!detectedType && j !== types.length - 2) {\n                            break;\n                        }\n\n                        // Only a single match is needed for html type since it is\n                        // bottom of the pile and very similar to string - but it\n                        // must not be empty\n                        if (detectedType === 'html' && !_empty(cache[k])) {\n                            break;\n                        }\n                    }\n\n                    // Type is valid for all data points in the column - use this\n                    // type\n                    if (detectedType) {\n                        col.sType = detectedType;\n                        break;\n                    }\n                }\n\n                // Fall back - if no type was detected, always use string\n                if (!col.sType) {\n                    col.sType = 'string';\n                }\n            }\n\n            // Set class names for header / footer for auto type classes\n            var autoClass = _ext.type.className[col.sType];\n\n            if (autoClass) {\n                _columnAutoClass(settings.aoHeader, i, autoClass);\n                _columnAutoClass(settings.aoFooter, i, autoClass);\n            }\n\n            var renderer = _ext.type.render[col.sType];\n\n            // This can only happen once! There is no way to remover\n            // a renderer. After the first time the renderer has\n            // already been set so createTr will run the renderer itself.\n            if (renderer && !col._render) {\n                col._render = DataTable.util.get(renderer);\n\n                _columnAutoRender(settings, i);\n            }\n        }\n    }\n\n    /**\n     * Apply an auto detected renderer to data which doesn't yet have\n     * a renderer\n     * @param settings\n     * @param colIdx\n     */\n    function _columnAutoRender(settings, colIdx) {\n        var data = settings.aoData;\n\n        for (var i = 0; i < data.length; i++) {\n            if (data[i].nTr) {\n                // We have to update the display here since there is no\n                // invalidation check for the data\n                var display = _fnGetCellData(settings, i, colIdx, 'display');\n\n                data[i].displayData[colIdx] = display;\n                _fnWriteCell(data[i].anCells[colIdx], display);\n\n                // No need to update sort / filter data since it has\n                // been invalidated and will be re-read with the\n                // renderer now applied\n            }\n        }\n    }\n\n    /**\n     * Apply a class name to a column's header cells\n     * @param container\n     * @param colIdx\n     * @param className\n     */\n    function _columnAutoClass(container, colIdx, className) {\n        container.forEach(function(row) {\n            if (row[colIdx] && row[colIdx].unique) {\n                _addClass(row[colIdx].cell, className);\n            }\n        });\n    }\n\n    /**\n     * Take the column definitions and static columns arrays and calculate how\n     * they relate to column indexes. The callback function will then apply the\n     * definition found for a column to a suitable configuration object.\n     *  @param {object} oSettings dataTables settings object\n     *  @param {array} aoColDefs The aoColumnDefs array that is to be applied\n     *  @param {array} aoCols The aoColumns array that defines columns individually\n     *  @param {array} headerLayout Layout for header as it was loaded\n     *  @param {function} fn Callback function - takes two parameters, the calculated\n     *    column index and the definition for that column.\n     *  @memberof DataTable#oApi\n     */\n    function _fnApplyColumnDefs(oSettings, aoColDefs, aoCols, headerLayout, fn) {\n        var i, iLen, j, jLen, k, kLen, def;\n        var columns = oSettings.aoColumns;\n\n        if (aoCols) {\n            for (i = 0, iLen = aoCols.length; i < iLen; i++) {\n                if (aoCols[i] && aoCols[i].name) {\n                    columns[i].sName = aoCols[i].name;\n                }\n            }\n        }\n\n        // Column definitions with aTargets\n        if (aoColDefs) {\n            /* Loop over the definitions array - loop in reverse so first instance has priority */\n            for (i = aoColDefs.length - 1; i >= 0; i--) {\n                def = aoColDefs[i];\n\n                /* Each definition can target multiple columns, as it is an array */\n                var aTargets = def.target !== undefined\n                    ? def.target\n                    : def.targets !== undefined\n                        ? def.targets\n                        : def.aTargets;\n\n                if (!Array.isArray(aTargets)) {\n                    aTargets = [aTargets];\n                }\n\n                for (j = 0, jLen = aTargets.length; j < jLen; j++) {\n                    var target = aTargets[j];\n\n                    if (typeof target === 'number' && target >= 0) {\n                        /* Add columns that we don't yet know about */\n                        while (columns.length <= target) {\n                            _fnAddColumn(oSettings);\n                        }\n\n                        /* Integer, basic index */\n                        fn(target, def);\n                    } else if (typeof target === 'number' && target < 0) {\n                        /* Negative integer, right to left column counting */\n                        fn(columns.length + target, def);\n                    } else if (typeof target === 'string') {\n                        for (k = 0, kLen = columns.length; k < kLen; k++) {\n                            if (target === '_all') {\n                                // Apply to all columns\n                                fn(k, def);\n                            } else if (target.indexOf(':name') !== -1) {\n                                // Column selector\n                                if (columns[k].sName === target.replace(':name', '')) {\n                                    fn(k, def);\n                                }\n                            } else {\n                                // Cell selector\n                                headerLayout.forEach(function(row) {\n                                    if (row[k]) {\n                                        var cell = $(row[k].cell);\n\n                                        // Legacy support. Note that it means that we don't support\n                                        // an element name selector only, since they are treated as\n                                        // class names for 1.x compat.\n                                        if (target.match(/^[a-z][\\w-]*$/i)) {\n                                            target = '.' + target;\n                                        }\n\n                                        if (cell.is(target)) {\n                                            fn(k, def);\n                                        }\n                                    }\n                                });\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        // Statically defined columns array\n        if (aoCols) {\n            for (i = 0, iLen = aoCols.length; i < iLen; i++) {\n                fn(i, aoCols[i]);\n            }\n        }\n    }\n\n\n    /**\n     * Get the width for a given set of columns\n     *\n     * @param {*} settings DataTables settings object\n     * @param {*} targets Columns - comma separated string or array of numbers\n     * @param {*} original Use the original width (true) or calculated (false)\n     * @param {*} incVisible Include visible columns (true) or not (false)\n     * @returns Combined CSS value\n     */\n    function _fnColumnsSumWidth(settings, targets, original, incVisible) {\n        if (!Array.isArray(targets)) {\n            targets = _fnColumnsFromHeader(targets);\n        }\n\n        var sum = 0;\n        var unit;\n        var columns = settings.aoColumns;\n\n        for (var i = 0, ien = targets.length; i < ien; i++) {\n            var column = columns[targets[i]];\n            var definedWidth = original ?\n                column.sWidthOrig :\n                column.sWidth;\n\n            if (!incVisible && column.bVisible === false) {\n                continue;\n            }\n\n            if (definedWidth === null || definedWidth === undefined) {\n                return null; // Can't determine a defined width - browser defined\n            } else if (typeof definedWidth === 'number') {\n                unit = 'px';\n                sum += definedWidth;\n            } else {\n                var matched = definedWidth.match(/([\\d\\.]+)([^\\d]*)/);\n\n                if (matched) {\n                    sum += matched[1] * 1;\n                    unit = matched.length === 3 ?\n                        matched[2] :\n                        'px';\n                }\n            }\n        }\n\n        return sum + unit;\n    }\n\n    /**\n     * @param cell\n     */\n    function _fnColumnsFromHeader(cell) {\n        var attr = $(cell).closest('[data-dt-column]').attr('data-dt-column');\n\n        if (!attr) {\n            return [];\n        }\n\n        return attr.split(',').map(function(val) {\n            return val * 1;\n        });\n    }\n    /**\n     * Add a data array to the table, creating DOM node etc. This is the parallel to\n     * _fnGatherData, but for adding rows from a Javascript source, rather than a\n     * DOM source.\n     *  @param {object} settings dataTables settings object\n     *  @param {array} data data array to be added\n     * @param dataIn\n     *  @param {node} [tr] TR element to add to the table - optional. If not given,\n     *    DataTables will create a row automatically\n     *  @param {array} [tds] Array of TD|TH elements for the row - must be given\n     *    if nTr is.\n     *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed\n     *  @memberof DataTable#oApi\n     */\n    function _fnAddData(settings, dataIn, tr, tds) {\n        /* Create the object for storing information about this new row */\n        var rowIdx = settings.aoData.length;\n        var rowModel = $.extend(true, {}, DataTable.models.oRow, {\n            src: tr ? 'dom' : 'data',\n            idx: rowIdx\n        });\n\n        rowModel._aData = dataIn;\n        settings.aoData.push(rowModel);\n\n        var columns = settings.aoColumns;\n\n        for (var i = 0, iLen = columns.length; i < iLen; i++) {\n            // Invalidate the column types as the new data needs to be revalidated\n            columns[i].sType = null;\n        }\n\n        /* Add to the display array */\n        settings.aiDisplayMaster.push(rowIdx);\n\n        var id = settings.rowIdFn(dataIn);\n        if (id !== undefined) {\n            settings.aIds[id] = rowModel;\n        }\n\n        /* Create the DOM information, or register it if already present */\n        if (tr || !settings.oFeatures.bDeferRender) {\n            _fnCreateTr(settings, rowIdx, tr, tds);\n        }\n\n        return rowIdx;\n    }\n\n\n    /**\n     * Add one or more TR elements to the table. Generally we'd expect to\n     * use this for reading data from a DOM sourced table, but it could be\n     * used for an TR element. Note that if a TR is given, it is used (i.e.\n     * it is not cloned).\n     *  @param {object} settings dataTables settings object\n     *  @param {array|node|jQuery} trs The TR element(s) to add to the table\n     *  @returns {array} Array of indexes for the added rows\n     *  @memberof DataTable#oApi\n     */\n    function _fnAddTr(settings, trs) {\n        var row;\n\n        // Allow an individual node to be passed in\n        if (!(trs instanceof $)) {\n            trs = $(trs);\n        }\n\n        return trs.map(function(i, el) {\n            row = _fnGetRowElements(settings, el);\n            return _fnAddData(settings, row.data, el, row.cells);\n        });\n    }\n\n\n    /**\n     * Get the data for a given cell from the internal cache, taking into account data mapping\n     *  @param {object} settings dataTables settings object\n     *  @param {int} rowIdx aoData row id\n     *  @param {int} colIdx Column index\n     *  @param {string} type data get type ('display', 'type' 'filter|search' 'sort|order')\n     *  @returns {*} Cell data\n     *  @memberof DataTable#oApi\n     */\n    function _fnGetCellData(settings, rowIdx, colIdx, type) {\n        if (type === 'search') {\n            type = 'filter';\n        } else if (type === 'order') {\n            type = 'sort';\n        }\n\n        var draw = settings.iDraw;\n        var col = settings.aoColumns[colIdx];\n        var rowData = settings.aoData[rowIdx]._aData;\n        var defaultContent = col.sDefaultContent;\n        var cellData = col.fnGetData(rowData, type, {\n            settings: settings,\n            row: rowIdx,\n            col: colIdx\n        });\n\n        // Allow for a node being returned for non-display types\n        if (type !== 'display' && cellData && typeof cellData === 'object' && cellData.nodeName) {\n            cellData = cellData.innerHTML;\n        }\n\n        if (cellData === undefined) {\n            if (settings.iDrawError != draw && defaultContent === null) {\n                _fnLog(settings, 0, \"Requested unknown parameter \" +\n                    (typeof col.mData == 'function' ? '{function}' : \"'\" + col.mData + \"'\") +\n                    \" for row \" + rowIdx + \", column \" + colIdx, 4);\n                settings.iDrawError = draw;\n            }\n            return defaultContent;\n        }\n\n        // When the data source is null and a specific data type is requested (i.e.\n        // not the original data), we can use default column data\n        if ((cellData === rowData || cellData === null) && defaultContent !== null && type !== undefined) {\n            cellData = defaultContent;\n        } else if (typeof cellData === 'function') {\n            // If the data source is a function, then we run it and use the return,\n            // executing in the scope of the data object (for instances)\n            return cellData.call(rowData);\n        }\n\n        if (cellData === null && type === 'display') {\n            return '';\n        }\n\n        if (type === 'filter') {\n            var fomatters = DataTable.ext.type.search;\n\n            if (fomatters[col.sType]) {\n                cellData = fomatters[col.sType](cellData);\n            }\n        }\n\n        return cellData;\n    }\n\n\n    /**\n     * Set the value for a specific cell, into the internal data cache\n     *  @param {object} settings dataTables settings object\n     *  @param {int} rowIdx aoData row id\n     *  @param {int} colIdx Column index\n     *  @param {*} val Value to set\n     *  @memberof DataTable#oApi\n     */\n    function _fnSetCellData(settings, rowIdx, colIdx, val) {\n        var col = settings.aoColumns[colIdx];\n        var rowData = settings.aoData[rowIdx]._aData;\n\n        col.fnSetData(rowData, val, {\n            settings: settings,\n            row: rowIdx,\n            col: colIdx\n        });\n    }\n\n    /**\n     * Write a value to a cell\n     * @param {*} td Cell\n     * @param {*} val Value\n     */\n    function _fnWriteCell(td, val) {\n        if (val && typeof val === 'object' && val.nodeName) {\n            $(td)\n                .empty()\n                .append(val);\n        } else {\n            td.innerHTML = val;\n        }\n    }\n\n\n    // Private variable that is used to match action syntax in the data property object\n    var __reArray = /\\[.*?\\]$/;\n    var __reFn = /\\(\\)$/;\n\n    /**\n     * Split string on periods, taking into account escaped periods\n     * @param  {string} str String to split\n     * @return {array} Split string\n     */\n    function _fnSplitObjNotation(str) {\n        var parts = str.match(/(\\\\.|[^.])+/g) || [''];\n\n        return parts.map(function(s) {\n            return s.replace(/\\\\\\./g, '.');\n        });\n    }\n\n\n    /**\n     * Return a function that can be used to get data from a source object, taking\n     * into account the ability to use nested objects as a source\n     *  @param {string|int|function} mSource The data source for the object\n     *  @returns {function} Data get function\n     *  @memberof DataTable#oApi\n     */\n    var _fnGetObjectDataFn = DataTable.util.get;\n\n\n    /**\n     * Return a function that can be used to set data from a source object, taking\n     * into account the ability to use nested objects as a source\n     *  @param {string|int|function} mSource The data source for the object\n     *  @returns {function} Data set function\n     *  @memberof DataTable#oApi\n     */\n    var _fnSetObjectDataFn = DataTable.util.set;\n\n\n    /**\n     * Return an array with the full table data\n     *  @param {object} oSettings dataTables settings object\n     * @param settings\n     *  @returns array {array} aData Master data array\n     *  @memberof DataTable#oApi\n     */\n    function _fnGetDataMaster(settings) {\n        return _pluck(settings.aoData, '_aData');\n    }\n\n\n    /**\n     * Nuke the table\n     *  @param {object} oSettings dataTables settings object\n     * @param settings\n     *  @memberof DataTable#oApi\n     */\n    function _fnClearTable(settings) {\n        settings.aoData.length = 0;\n        settings.aiDisplayMaster.length = 0;\n        settings.aiDisplay.length = 0;\n        settings.aIds = {};\n    }\n\n\n    /**\n     * Mark cached data as invalid such that a re-read of the data will occur when\n     * the cached data is next requested. Also update from the data source object.\n     *\n     * @param {object} settings DataTables settings object\n     * @param {int}    rowIdx   Row index to invalidate\n     * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'\n     *     or 'data'\n     * @param {int}    [colIdx] Column index to invalidate. If undefined the whole\n     *     row will be invalidated\n     * @memberof DataTable#oApi\n     *\n     * @todo For the modularisation of v1.11 this will need to become a callback, so\n     *   the sort and filter methods can subscribe to it. That will required\n     *   initialisation options for sorting, which is why it is not already baked in\n     */\n    function _fnInvalidate(settings, rowIdx, src, colIdx) {\n        var row = settings.aoData[rowIdx];\n        var i, ien;\n\n        // Remove the cached data for the row\n        row._aSortData = null;\n        row._aFilterData = null;\n        row.displayData = null;\n\n        // Are we reading last data from DOM or the data object?\n        if (src === 'dom' || ((!src || src === 'auto') && row.src === 'dom')) {\n            // Read the data from the DOM\n            row._aData = _fnGetRowElements(\n                settings, row, colIdx, colIdx === undefined ? undefined : row._aData\n            )\n                .data;\n        } else {\n            // Reading from data object, update the DOM\n            var cells = row.anCells;\n            var display = _fnGetRowDisplay(settings, rowIdx);\n\n            if (cells) {\n                if (colIdx !== undefined) {\n                    _fnWriteCell(cells[colIdx], display[colIdx]);\n                } else {\n                    for (i = 0, ien = cells.length; i < ien; i++) {\n                        _fnWriteCell(cells[i], display[i]);\n                    }\n                }\n            }\n        }\n\n        // Column specific invalidation\n        var cols = settings.aoColumns;\n        if (colIdx !== undefined) {\n            // Type - the data might have changed\n            cols[colIdx].sType = null;\n\n            // Max length string. Its a fairly cheep recalculation, so not worth\n            // something more complicated\n            cols[colIdx].maxLenString = null;\n        } else {\n            for (i = 0, ien = cols.length; i < ien; i++) {\n                cols[i].sType = null;\n                cols[i].maxLenString = null;\n            }\n\n            // Update DataTables special `DT_*` attributes for the row\n            _fnRowAttributes(settings, row);\n        }\n    }\n\n\n    /**\n     * Build a data source object from an HTML row, reading the contents of the\n     * cells that are in the row.\n     *\n     * @param {object} settings DataTables settings object\n     * @param {node|object} TR element from which to read data or existing row\n     *   object from which to re-read the data from the cells\n     * @param row\n     * @param {int} [colIdx] Optional column index\n     * @param {array|object} [d] Data source object. If `colIdx` is given then this\n     *   parameter should also be given and will be used to write the data into.\n     *   Only the column in question will be written\n     * @returns {object} Object with two parameters: `data` the data read, in\n     *   document order, and `cells` and array of nodes (they can be useful to the\n     *   caller, so rather than needing a second traversal to get them, just return\n     *   them from here).\n     * @memberof DataTable#oApi\n     */\n    function _fnGetRowElements(settings, row, colIdx, d) {\n        var\n            tds = [],\n            td = row.firstChild,\n            name, col,\ni = 0,\ncontents,\n            columns = settings.aoColumns,\n            objectRead = settings._rowReadObject;\n\n        // Allow the data object to be passed in, or construct\n        d = d !== undefined ?\n            d :\n            objectRead ?\n                {} :\n                [];\n\n        var attr = function(str, td) {\n            if (typeof str === 'string') {\n                var idx = str.indexOf('@');\n\n                if (idx !== -1) {\n                    var attr = str.substring(idx + 1);\n                    var setter = _fnSetObjectDataFn(str);\n                    setter(d, td.getAttribute(attr));\n                }\n            }\n        };\n\n        // Read data from a cell and store into the data object\n        var cellProcess = function(cell) {\n            if (colIdx === undefined || colIdx === i) {\n                col = columns[i];\n                contents = (cell.innerHTML).trim();\n\n                if (col && col._bAttrSrc) {\n                    var setter = _fnSetObjectDataFn(col.mData._);\n                    setter(d, contents);\n\n                    attr(col.mData.sort, cell);\n                    attr(col.mData.type, cell);\n                    attr(col.mData.filter, cell);\n                } else {\n                    // Depending on the `data` option for the columns the data can\n                    // be read to either an object or an array.\n                    if (objectRead) {\n                        if (!col._setter) {\n                            // Cache the setter function\n                            col._setter = _fnSetObjectDataFn(col.mData);\n                        }\n                        col._setter(d, contents);\n                    } else {\n                        d[i] = contents;\n                    }\n                }\n            }\n\n            i++;\n        };\n\n        if (td) {\n            // `tr` element was passed in\n            while (td) {\n                name = td.nodeName.toUpperCase();\n\n                if (name == \"TD\" || name == \"TH\") {\n                    cellProcess(td);\n                    tds.push(td);\n                }\n\n                td = td.nextSibling;\n            }\n        } else {\n            // Existing row object passed in\n            tds = row.anCells;\n\n            for (var j = 0, jen = tds.length; j < jen; j++) {\n                cellProcess(tds[j]);\n            }\n        }\n\n        // Read the ID from the DOM if present\n        var rowNode = row.firstChild ? row : row.nTr;\n\n        if (rowNode) {\n            var id = rowNode.getAttribute('id');\n\n            if (id) {\n                _fnSetObjectDataFn(settings.rowId)(d, id);\n            }\n        }\n\n        return {\n            data: d,\n            cells: tds\n        };\n    }\n\n    /**\n     * Render and cache a row's display data for the columns, if required\n     * @param settings\n     * @param rowIdx\n     * @returns\n     */\n    function _fnGetRowDisplay(settings, rowIdx) {\n        let rowModal = settings.aoData[rowIdx];\n        let columns = settings.aoColumns;\n\n        if (!rowModal.displayData) {\n            // Need to render and cache\n            rowModal.displayData = [];\n\n            for (var colIdx = 0, len = columns.length; colIdx < len; colIdx++) {\n                rowModal.displayData.push(\n                    _fnGetCellData(settings, rowIdx, colIdx, 'display')\n                );\n            }\n        }\n\n        return rowModal.displayData;\n    }\n\n    /**\n     * Create a new TR element (and it's TD children) for a row\n     *  @param {object} oSettings dataTables settings object\n     *  @param {int} iRow Row to consider\n     *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,\n     *    DataTables will create a row automatically\n     *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\n     *    if nTr is.\n     *  @memberof DataTable#oApi\n     */\n    function _fnCreateTr(oSettings, iRow, nTrIn, anTds) {\n        var\n            row = oSettings.aoData[iRow],\n            rowData = row._aData,\n            cells = [],\n            nTr, nTd, oCol,\n            i, iLen, create,\n            trClass = oSettings.oClasses.tbody.row;\n\n        if (row.nTr === null) {\n            nTr = nTrIn || document.createElement('tr');\n\n            row.nTr = nTr;\n            row.anCells = cells;\n\n            _addClass(nTr, trClass);\n\n            /* Use a private property on the node to allow reserve mapping from the node\n             * to the aoData array for fast look up\n             */\n            nTr._DT_RowIndex = iRow;\n\n            /* Special parameters can be given by the data source to be used on the row */\n            _fnRowAttributes(oSettings, row);\n\n            /* Process each column */\n            for (i = 0, iLen = oSettings.aoColumns.length; i < iLen; i++) {\n                oCol = oSettings.aoColumns[i];\n                create = nTrIn && anTds[i] ? false : true;\n\n                nTd = create ? document.createElement(oCol.sCellType) : anTds[i];\n\n                if (!nTd) {\n                    _fnLog(oSettings, 0, 'Incorrect column count', 18);\n                }\n\n                nTd._DT_CellIndex = {\n                    row: iRow,\n                    column: i\n                };\n\n                cells.push(nTd);\n\n                var display = _fnGetRowDisplay(oSettings, iRow);\n\n                // Need to create the HTML if new, or if a rendering function is defined\n                if (\n                    create ||\n                    (\n                        (oCol.mRender || oCol.mData !== i) &&\n                        (!$.isPlainObject(oCol.mData) || oCol.mData._ !== i + '.display')\n                    )\n                ) {\n                    _fnWriteCell(nTd, display[i]);\n                }\n\n                // Visibility - add or remove as required\n                if (oCol.bVisible && create) {\n                    nTr.appendChild(nTd);\n                } else if (!oCol.bVisible && !create) {\n                    nTd.parentNode.removeChild(nTd);\n                }\n\n                if (oCol.fnCreatedCell) {\n                    oCol.fnCreatedCell.call(oSettings.oInstance,\n                        nTd, _fnGetCellData(oSettings, iRow, i), rowData, iRow, i\n                    );\n                }\n            }\n\n            _fnCallbackFire(oSettings, 'aoRowCreatedCallback', 'row-created', [nTr, rowData, iRow, cells]);\n        } else {\n            _addClass(row.nTr, trClass);\n        }\n    }\n\n\n    /**\n     * Add attributes to a row based on the special `DT_*` parameters in a data\n     * source object.\n     *  @param {object} settings DataTables settings object\n     *  @param {object} DataTables row object for the row to be modified\n     * @param row\n     *  @memberof DataTable#oApi\n     */\n    function _fnRowAttributes(settings, row) {\n        var tr = row.nTr;\n        var data = row._aData;\n\n        if (tr) {\n            var id = settings.rowIdFn(data);\n\n            if (id) {\n                tr.id = id;\n            }\n\n            if (data.DT_RowClass) {\n                // Remove any classes added by DT_RowClass before\n                var a = data.DT_RowClass.split(' ');\n                row.__rowc = row.__rowc ?\n                    _unique(row.__rowc.concat(a)) :\n                    a;\n\n                $(tr)\n                    .removeClass(row.__rowc.join(' '))\n                    .addClass(data.DT_RowClass);\n            }\n\n            if (data.DT_RowAttr) {\n                $(tr).attr(data.DT_RowAttr);\n            }\n\n            if (data.DT_RowData) {\n                $(tr).data(data.DT_RowData);\n            }\n        }\n    }\n\n\n    /**\n     * Create the HTML header for the table\n     *  @param {object} oSettings dataTables settings object\n     * @param settings\n     * @param side\n     *  @memberof DataTable#oApi\n     */\n    function _fnBuildHead(settings, side) {\n        var classes = settings.oClasses;\n        var columns = settings.aoColumns;\n        var i, ien, row;\n        var target = side === 'header'\n            ? settings.nTHead\n            : settings.nTFoot;\n        var titleProp = side === 'header' ? 'sTitle' : side;\n\n        // Footer might be defined\n        if (!target) {\n            return;\n        }\n\n        // If no cells yet and we have content for them, then create\n        if (side === 'header' || _pluck(settings.aoColumns, titleProp).join('')) {\n            row = $('tr', target);\n\n            // Add a row if needed\n            if (!row.length) {\n                row = $('<tr/>').appendTo(target);\n            }\n\n            // Add the number of cells needed to make up to the number of columns\n            if (row.length === 1) {\n                var cells = $('td, th', row);\n\n                for (i = cells.length, ien = columns.length; i < ien; i++) {\n                    $('<th/>')\n                        .html(columns[i][titleProp] || '')\n                        .appendTo(row);\n                }\n            }\n        }\n\n        var detected = _fnDetectHeader(settings, target, true);\n\n        if (side === 'header') {\n            settings.aoHeader = detected;\n        } else {\n            settings.aoFooter = detected;\n        }\n\n        // ARIA role for the rows\n        $(target).children('tr').attr('role', 'row');\n\n        // Every cell needs to be passed through the renderer\n        $(target).children('tr').children('th, td')\n            .each(function() {\n                _fnRenderer(settings, side)(\n                    settings, $(this), classes\n                );\n            });\n    }\n\n    /**\n     * Build a layout structure for a header or footer\n     *\n     * @param {*} settings DataTables settings\n     * @param {*} source Source layout array\n     * @param {*} incColumns What columns should be included\n     * @returns Layout array\n     */\n    function _fnHeaderLayout(settings, source, incColumns) {\n        var row, column, cell;\n        var local = [];\n        var structure = [];\n        var columns = settings.aoColumns;\n        var columnCount = columns.length;\n        var rowspan, colspan;\n\n        if (!source) {\n            return;\n        }\n\n        // Default is to work on only visible columns\n        if (!incColumns) {\n            incColumns = _range(columnCount)\n                .filter(function(idx) {\n                    return columns[idx].bVisible;\n                });\n        }\n\n        // Make a copy of the master layout array, but with only the columns we want\n        for (row = 0; row < source.length; row++) {\n            // Remove any columns we haven't selected\n            local[row] = source[row].slice().filter(function(cell, i) {\n                return incColumns.includes(i);\n            });\n\n            // Prep the structure array - it needs an element for each row\n            structure.push([]);\n        }\n\n        for (row = 0; row < local.length; row++) {\n            for (column = 0; column < local[row].length; column++) {\n                rowspan = 1;\n                colspan = 1;\n\n                // Check to see if there is already a cell (row/colspan) covering our target\n                // insert point. If there is, then there is nothing to do.\n                if (structure[row][column] === undefined) {\n                    cell = local[row][column].cell;\n\n                    // Expand for rowspan\n                    while (\n                        local[row + rowspan] !== undefined &&\n                        local[row][column].cell == local[row + rowspan][column].cell\n                    ) {\n                        structure[row + rowspan][column] = null;\n                        rowspan++;\n                    }\n\n                    // And for colspan\n                    while (\n                        local[row][column + colspan] !== undefined &&\n                        local[row][column].cell == local[row][column + colspan].cell\n                    ) {\n                        // Which also needs to go over rows\n                        for (var k = 0; k < rowspan; k++) {\n                            structure[row + k][column + colspan] = null;\n                        }\n\n                        colspan++;\n                    }\n\n                    var titleSpan = $('span.dt-column-title', cell);\n\n                    structure[row][column] = {\n                        cell: cell,\n                        colspan: colspan,\n                        rowspan: rowspan,\n                        title: titleSpan.length\n                            ? titleSpan.html()\n                            : $(cell).html()\n                    };\n                }\n            }\n        }\n\n        return structure;\n    }\n\n\n    /**\n     * Draw the header (or footer) element based on the column visibility states.\n     *\n     *  @param object oSettings dataTables settings object\n     *  @param array aoSource Layout array from _fnDetectHeader\n     * @param settings\n     * @param source\n     *  @memberof DataTable#oApi\n     */\n    function _fnDrawHead(settings, source) {\n        var layout = _fnHeaderLayout(settings, source);\n        var tr, n;\n\n        for (var row = 0; row < source.length; row++) {\n            tr = source[row].row;\n\n            // All cells are going to be replaced, so empty out the row\n            // Can't use $().empty() as that kills event handlers\n            if (tr) {\n                while ((n = tr.firstChild)) {\n                    tr.removeChild(n);\n                }\n            }\n\n            for (var column = 0; column < layout[row].length; column++) {\n                var point = layout[row][column];\n\n                if (point) {\n                    $(point.cell)\n                        .appendTo(tr)\n                        .attr('rowspan', point.rowspan)\n                        .attr('colspan', point.colspan);\n                }\n            }\n        }\n    }\n\n\n    /**\n     * Insert the required TR nodes into the table for display\n     *  @param {object} oSettings dataTables settings object\n     *  @param ajaxComplete true after ajax call to complete rendering\n     *  @memberof DataTable#oApi\n     */\n    function _fnDraw(oSettings, ajaxComplete) {\n        // Allow for state saving and a custom start position\n        _fnStart(oSettings);\n\n        /* Provide a pre-callback function which can be used to cancel the draw is false is returned */\n        var aPreDraw = _fnCallbackFire(oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings]);\n        if (aPreDraw.indexOf(false) !== -1) {\n            _fnProcessingDisplay(oSettings, false);\n            return;\n        }\n\n        var anRows = [];\n        var iRowCount = 0;\n        var bServerSide = _fnDataSource(oSettings) == 'ssp';\n        var aiDisplay = oSettings.aiDisplay;\n        var iDisplayStart = oSettings._iDisplayStart;\n        var iDisplayEnd = oSettings.fnDisplayEnd();\n        var columns = oSettings.aoColumns;\n        var body = $(oSettings.nTBody);\n\n        oSettings.bDrawing = true;\n\n        /* Server-side processing draw intercept */\n        if (!bServerSide) {\n            oSettings.iDraw++;\n        } else if (!oSettings.bDestroying && !ajaxComplete) {\n            // Show loading message for server-side processing\n            if (oSettings.iDraw === 0) {\n                body.empty().append(_emptyRow(oSettings));\n            }\n\n            _fnAjaxUpdate(oSettings);\n            return;\n        }\n\n        if (aiDisplay.length !== 0) {\n            var iStart = bServerSide ? 0 : iDisplayStart;\n            var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;\n\n            for (var j = iStart; j < iEnd; j++) {\n                var iDataIndex = aiDisplay[j];\n                var aoData = oSettings.aoData[iDataIndex];\n                if (aoData.nTr === null) {\n                    _fnCreateTr(oSettings, iDataIndex);\n                }\n\n                var nRow = aoData.nTr;\n\n                // Add various classes as needed\n                for (var i = 0; i < columns.length; i++) {\n                    var col = columns[i];\n                    var td = aoData.anCells[i];\n\n                    _addClass(td, _ext.type.className[col.sType]); // Auto class\n                    _addClass(td, col.sClass); // Column class\n                    _addClass(td, oSettings.oClasses.tbody.cell); // All cells\n                }\n\n                // Row callback functions - might want to manipulate the row\n                // iRowCount and j are not currently documented. Are they at all\n                // useful?\n                _fnCallbackFire(oSettings, 'aoRowCallback', null,\n                    [nRow, aoData._aData, iRowCount, j, iDataIndex]);\n\n                anRows.push(nRow);\n                iRowCount++;\n            }\n        } else {\n            anRows[0] = _emptyRow(oSettings);\n        }\n\n        /* Header and footer callbacks */\n        _fnCallbackFire(oSettings, 'aoHeaderCallback', 'header', [$(oSettings.nTHead).children('tr')[0],\n        _fnGetDataMaster(oSettings), iDisplayStart, iDisplayEnd, aiDisplay]);\n\n        _fnCallbackFire(oSettings, 'aoFooterCallback', 'footer', [$(oSettings.nTFoot).children('tr')[0],\n        _fnGetDataMaster(oSettings), iDisplayStart, iDisplayEnd, aiDisplay]);\n\n        body.children().detach();\n        body.append($(anRows));\n\n        // Empty table needs a specific class\n        $(oSettings.nTableWrapper).toggleClass('dt-empty-footer', $('tr', oSettings.nTFoot).length === 0);\n\n        /* Call all required callback functions for the end of a draw */\n        _fnCallbackFire(oSettings, 'aoDrawCallback', 'draw', [oSettings], true);\n\n        /* Draw is complete, sorting and filtering must be as well */\n        oSettings.bSorted = false;\n        oSettings.bFiltered = false;\n        oSettings.bDrawing = false;\n    }\n\n\n    /**\n     * Redraw the table - taking account of the various features which are enabled\n     *  @param {object} oSettings dataTables settings object\n     * @param settings\n     *  @param {boolean} [holdPosition] Keep the current paging position. By default\n     *    the paging is reset to the first page\n     * @param recompute\n     *  @memberof DataTable#oApi\n     */\n    function _fnReDraw(settings, holdPosition, recompute) {\n        var\n            features = settings.oFeatures,\n            sort = features.bSort,\n            filter = features.bFilter;\n\n        if (recompute === undefined || recompute === true) {\n            if (sort) {\n                _fnSort(settings);\n            }\n\n            if (filter) {\n                _fnFilterComplete(settings, settings.oPreviousSearch);\n            } else {\n                // No filtering, so we want to just use the display master\n                settings.aiDisplay = settings.aiDisplayMaster.slice();\n            }\n        }\n\n        if (holdPosition !== true) {\n            settings._iDisplayStart = 0;\n        }\n\n        // Let any modules know about the draw hold position state (used by\n        // scrolling internally)\n        settings._drawHold = holdPosition;\n\n        _fnDraw(settings);\n\n        settings._drawHold = false;\n    }\n\n\n    /*\n     * Table is empty - create a row with an empty message in it\n     */\n    /**\n     * @param settings\n     */\n    function _emptyRow(settings) {\n        var oLang = settings.oLanguage;\n        var zero = oLang.sZeroRecords;\n        var dataSrc = _fnDataSource(settings);\n\n        if (\n            (settings.iDraw < 1 && dataSrc === 'ssp') ||\n            (settings.iDraw <= 1 && dataSrc === 'ajax')\n        ) {\n            zero = oLang.sLoadingRecords;\n        } else if (oLang.sEmptyTable && settings.fnRecordsTotal() === 0) {\n            zero = oLang.sEmptyTable;\n        }\n\n        return $('<tr/>')\n            .append($('<td />', {\n                'colSpan': _fnVisbleColumns(settings),\n                'class': settings.oClasses.empty.row\n            }).html(zero))[0];\n    }\n\n\n    /**\n     * Convert a `layout` object given by a user to the object structure needed\n     * for the renderer. This is done twice, once for above and once for below\n     * the table. Ordering must also be considered.\n     *\n     * @param {*} settings DataTables settings object\n     * @param {*} layout Layout object to convert\n     * @param {string} side `top` or `bottom`\n     * @returns Converted array structure - one item for each row.\n     */\n    function _layoutArray(settings, layout, side) {\n        var groups = {};\n\n        // Combine into like groups (e.g. `top`, `top2`, etc)\n        $.each(layout, function(pos, val) {\n            if (val === null) {\n                return;\n            }\n\n            var splitPos = pos.replace(/([A-Z])/g, ' $1').split(' ');\n\n            if (!groups[splitPos[0]]) {\n                groups[splitPos[0]] = {};\n            }\n\n            var align = splitPos.length === 1 ?\n                'full' :\n                splitPos[1].toLowerCase();\n            var group = groups[splitPos[0]];\n            var groupRun = function(contents, innerVal) {\n                // If it is an object, then there can be multiple features contained in it\n                if ($.isPlainObject(innerVal)) {\n                    Object.keys(innerVal).map(function(key) {\n                        contents.push({\n                            feature: key,\n                            opts: innerVal[key]\n                        });\n                    });\n                } else {\n                    contents.push(innerVal);\n                }\n            };\n\n            // Transform to an object with a contents property\n            if (!group[align] || !group[align].contents) {\n                group[align] = {contents: []};\n            }\n\n            // Allow for an array or just a single object\n            if (Array.isArray(val)) {\n                for (var i = 0; i < val.length; i++) {\n                    groupRun(group[align].contents, val[i]);\n                }\n            } else {\n                groupRun(group[align].contents, val);\n            }\n\n            // And make contents an array\n            if (!Array.isArray(group[align].contents)) {\n                group[align].contents = [group[align].contents];\n            }\n        });\n\n        var filtered = Object.keys(groups)\n            .map(function(pos) {\n                // Filter to only the side we need\n                if (pos.indexOf(side) !== 0) {\n                    return null;\n                }\n\n                return {\n                    name: pos,\n                    val: groups[pos]\n                };\n            })\n            .filter(function(item) {\n                return item !== null;\n            });\n\n        // Order by item identifier\n        filtered.sort(function(a, b) {\n            var order1 = a.name.replace(/[^0-9]/g, '') * 1;\n            var order2 = b.name.replace(/[^0-9]/g, '') * 1;\n\n            return order2 - order1;\n        });\n\n        if (side === 'bottom') {\n            filtered.reverse();\n        }\n\n        // Split into rows\n        var rows = [];\n        for (var i = 0, ien = filtered.length; i < ien; i++) {\n            if (filtered[i].val.full) {\n                rows.push({full: filtered[i].val.full});\n                _layoutResolve(settings, rows[rows.length - 1]);\n\n                delete filtered[i].val.full;\n            }\n\n            if (Object.keys(filtered[i].val).length) {\n                rows.push(filtered[i].val);\n                _layoutResolve(settings, rows[rows.length - 1]);\n            }\n        }\n\n        return rows;\n    }\n\n\n    /**\n     * Convert the contents of a row's layout object to nodes that can be inserted\n     * into the document by a renderer. Execute functions, look up plug-ins, etc.\n     *\n     * @param {*} settings DataTables settings object\n     * @param {*} row Layout object for this row\n     */\n    function _layoutResolve(settings, row) {\n        var getFeature = function(feature, opts) {\n            if (!_ext.features[feature]) {\n                _fnLog(settings, 0, 'Unknown feature: ' + feature);\n            }\n\n            return _ext.features[feature].apply(this, [settings, opts]);\n        };\n\n        var resolve = function(item) {\n            var line = row[item].contents;\n\n            for (var i = 0, ien = line.length; i < ien; i++) {\n                if (!line[i]) {\n                    continue;\n                } else if (typeof line[i] === 'string') {\n                    line[i] = getFeature(line[i], null);\n                } else if ($.isPlainObject(line[i])) {\n                    // If it's an object, it just has feature and opts properties from\n                    // the transform in _layoutArray\n                    line[i] = getFeature(line[i].feature, line[i].opts);\n                } else if (typeof line[i].node === 'function') {\n                    line[i] = line[i].node(settings);\n                } else if (typeof line[i] === 'function') {\n                    var inst = line[i](settings);\n\n                    line[i] = typeof inst.node === 'function' ?\n                        inst.node() :\n                        inst;\n                }\n            }\n        };\n\n        $.each(row, function(key) {\n            resolve(key);\n        });\n    }\n\n\n    /**\n     * Add the options to the page HTML for the table\n     *  @param {object} settings DataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnAddOptionsHtml(settings) {\n        var classes = settings.oClasses;\n        var table = $(settings.nTable);\n\n        // Wrapper div around everything DataTables controls\n        var insert = $('<div/>')\n            .attr({\n                id: settings.sTableId + '_wrapper',\n                'class': classes.container\n            })\n            .insertBefore(table);\n\n        settings.nTableWrapper = insert[0];\n\n        var top = _layoutArray(settings, settings.layout, 'top');\n        var bottom = _layoutArray(settings, settings.layout, 'bottom');\n        var renderer = _fnRenderer(settings, 'layout');\n\n        if (settings.sDom) {\n            // Legacy\n            _fnLayoutDom(settings, settings.sDom, insert);\n        } else {\n            // Everything above - the renderer will actually insert the contents into the document\n            top.forEach(function(item) {\n                renderer(settings, insert, item);\n            });\n\n            // The table - always the center of attention\n            renderer(settings, insert, {\n                full: {\n                    table: true,\n                    contents: [_fnFeatureHtmlTable(settings)]\n                }\n            });\n\n            // Everything below\n            bottom.forEach(function(item) {\n                renderer(settings, insert, item);\n            });\n        }\n\n        // Processing floats on top, so it isn't an inserted feature\n        _processingHtml(settings);\n    }\n\n    /**\n     * Draw the table with the legacy DOM property\n     * @param {*} settings DT settings object\n     * @param {*} dom DOM string\n     * @param {*} insert Insert point\n     */\n    function _fnLayoutDom(settings, dom, insert) {\n        var parts = dom.match(/(\".*?\")|('.*?')|./g);\n        var featureNode, option, newNode, next, attr;\n\n        for (var i = 0; i < parts.length; i++) {\n            featureNode = null;\n            option = parts[i];\n\n            if (option == '<') {\n                // New container div\n                newNode = $('<div/>');\n\n                // Check to see if we should append an id and/or a class name to the container\n                next = parts[i + 1];\n\n                if (next[0] == \"'\" || next[0] == '\"') {\n                    attr = next.replace(/['\"]/g, '');\n\n                    var id = '',\nclassName;\n\n                    /* The attribute can be in the format of \"#id.class\", \"#id\" or \"class\" This logic\n                     * breaks the string into parts and applies them as needed\n                     */\n                    if (attr.indexOf('.') != -1) {\n                        var split = attr.split('.');\n\n                        id = split[0];\n                        className = split[1];\n                    } else if (attr[0] == \"#\") {\n                        id = attr;\n                    } else {\n                        className = attr;\n                    }\n\n                    newNode\n                        .attr('id', id.substring(1))\n                        .addClass(className);\n\n                    i++; // Move along the position array\n                }\n\n                insert.append(newNode);\n                insert = newNode;\n            } else if (option == '>') {\n                // End container div\n                insert = insert.parent();\n            } else if (option == 't') {\n                // Table\n                featureNode = _fnFeatureHtmlTable(settings);\n            } else {\n                DataTable.ext.feature.forEach(function(feature) {\n                    if (option == feature.cFeature) {\n                        featureNode = feature.fnInit(settings);\n                    }\n                });\n            }\n\n            // Add to the display\n            if (featureNode) {\n                insert.append(featureNode);\n            }\n        }\n    }\n\n\n    /**\n     * Use the DOM source to create up an array of header cells. The idea here is to\n     * create a layout grid (array) of rows x columns, which contains a reference\n     * to the cell that that point in the grid (regardless of col/rowspan), such that\n     * any column / row could be removed and the new grid constructed\n     * @param settings\n     *  @param {node} thead The header/footer element for the table\n     * @param write\n     *  @returns {array} Calculated layout array\n     *  @memberof DataTable#oApi\n     */\n    function _fnDetectHeader(settings, thead, write) {\n        var columns = settings.aoColumns;\n        var rows = $(thead).children('tr');\n        var row, cell;\n        var i, k, l, iLen, shifted, column, colspan, rowspan;\n        var isHeader = thead && thead.nodeName.toLowerCase() === 'thead';\n        var layout = [];\n        var unique;\n        var shift = function(a, i, j) {\n            var k = a[i];\n            while (k[j]) {\n                j++;\n            }\n            return j;\n        };\n\n        // We know how many rows there are in the layout - so prep it\n        for (i = 0, iLen = rows.length; i < iLen; i++) {\n            layout.push([]);\n        }\n\n        for (i = 0, iLen = rows.length; i < iLen; i++) {\n            row = rows[i];\n            column = 0;\n\n            // For every cell in the row..\n            cell = row.firstChild;\n            while (cell) {\n                if (\n                    cell.nodeName.toUpperCase() == 'TD' ||\n                    cell.nodeName.toUpperCase() == 'TH'\n                ) {\n                    var cols = [];\n\n                    // Get the col and rowspan attributes from the DOM and sanitise them\n                    colspan = cell.getAttribute('colspan') * 1;\n                    rowspan = cell.getAttribute('rowspan') * 1;\n                    colspan = (!colspan || colspan === 0 || colspan === 1) ? 1 : colspan;\n                    rowspan = (!rowspan || rowspan === 0 || rowspan === 1) ? 1 : rowspan;\n\n                    // There might be colspan cells already in this row, so shift our target\n                    // accordingly\n                    shifted = shift(layout, i, column);\n\n                    // Cache calculation for unique columns\n                    unique = colspan === 1 ?\n                        true :\n                        false;\n\n                    // Perform header setup\n                    if (write) {\n                        if (unique) {\n                            // Allow column options to be set from HTML attributes\n                            _fnColumnOptions(settings, shifted, $(cell).data());\n\n                            // Get the width for the column. This can be defined from the\n                            // width attribute, style attribute or `columns.width` option\n                            var columnDef = columns[shifted];\n                            var width = cell.getAttribute('width') || null;\n                            var t = cell.style.width.match(/width:\\s*(\\d+[pxem%]+)/);\n                            if (t) {\n                                width = t[1];\n                            }\n\n                            columnDef.sWidthOrig = columnDef.sWidth || width;\n\n                            if (isHeader) {\n                                // Column title handling - can be user set, or read from the DOM\n                                // This happens before the render, so the original is still in place\n                                if (columnDef.sTitle !== null && !columnDef.autoTitle) {\n                                    cell.innerHTML = columnDef.sTitle;\n                                }\n\n                                if (!columnDef.sTitle && unique) {\n                                    columnDef.sTitle = cell.innerHTML.replace(/<.*?>/g, \"\");\n                                    columnDef.autoTitle = true;\n                                }\n                            } else {\n                                // Footer specific operations\n                                if (columnDef.footer) {\n                                    cell.innerHTML = columnDef.footer;\n                                }\n                            }\n\n                            // Fall back to the aria-label attribute on the table header if no ariaTitle is\n                            // provided.\n                            if (!columnDef.ariaTitle) {\n                                columnDef.ariaTitle = $(cell).attr(\"aria-label\") || columnDef.sTitle;\n                            }\n\n                            // Column specific class names\n                            if (columnDef.className) {\n                                $(cell).addClass(columnDef.className);\n                            }\n                        }\n\n                        // Wrap the column title so we can write to it in future\n                        if ($('span.dt-column-title', cell).length === 0) {\n                            $('<span>')\n                                .addClass('dt-column-title')\n                                .append(cell.childNodes)\n                                .appendTo(cell);\n                        }\n\n                        if (isHeader && $('span.dt-column-order', cell).length === 0) {\n                            $('<span>')\n                                .addClass('dt-column-order')\n                                .appendTo(cell);\n                        }\n                    }\n\n                    // If there is col / rowspan, copy the information into the layout grid\n                    for (l = 0; l < colspan; l++) {\n                        for (k = 0; k < rowspan; k++) {\n                            layout[i + k][shifted + l] = {\n                                cell: cell,\n                                unique: unique\n                            };\n\n                            layout[i + k].row = row;\n                        }\n\n                        cols.push(shifted + l);\n                    }\n\n                    // Assign an attribute so spanning cells can still be identified\n                    // as belonging to a column\n                    cell.setAttribute('data-dt-column', _unique(cols).join(','));\n                }\n\n                cell = cell.nextSibling;\n            }\n        }\n\n        return layout;\n    }\n\n    /**\n     * Set the start position for draw\n     *  @param {object} oSettings dataTables settings object\n     */\n    function _fnStart(oSettings) {\n        var bServerSide = _fnDataSource(oSettings) == 'ssp';\n        var iInitDisplayStart = oSettings.iInitDisplayStart;\n\n        // Check and see if we have an initial draw position from state saving\n        if (iInitDisplayStart !== undefined && iInitDisplayStart !== -1) {\n            oSettings._iDisplayStart = bServerSide ?\n                iInitDisplayStart :\n                iInitDisplayStart >= oSettings.fnRecordsDisplay() ?\n                    0 :\n                    iInitDisplayStart;\n\n            oSettings.iInitDisplayStart = -1;\n        }\n    }\n\n    /**\n     * Create an Ajax call based on the table's settings, taking into account that\n     * parameters can have multiple forms, and backwards compatibility.\n     *\n     * @param {object} oSettings dataTables settings object\n     * @param {array} data Data to send to the server, required by\n     *     DataTables - may be augmented by developer callbacks\n     * @param {function} fn Callback function to run when data is obtained\n     */\n    function _fnBuildAjax(oSettings, data, fn) {\n        var ajaxData;\n        var ajax = oSettings.ajax;\n        var instance = oSettings.oInstance;\n        var callback = function(json) {\n            var status = oSettings.jqXHR\n                ? oSettings.jqXHR.status\n                : null;\n\n            if (json === null || (typeof status === 'number' && status == 204)) {\n                json = {};\n                _fnAjaxDataSrc(oSettings, json, []);\n            }\n\n            var error = json.error || json.sError;\n            if (error) {\n                _fnLog(oSettings, 0, error);\n            }\n\n            oSettings.json = json;\n\n            _fnCallbackFire(oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR], true);\n            fn(json);\n        };\n\n        if ($.isPlainObject(ajax) && ajax.data) {\n            ajaxData = ajax.data;\n\n            var newData = typeof ajaxData === 'function' ?\n                ajaxData(data, oSettings) : // Fn can manipulate data or return\n                ajaxData; // An object object or array to merge\n\n            // If the function returned something, use that alone\n            data = typeof ajaxData === 'function' && newData ?\n                newData :\n                $.extend(true, data, newData);\n\n            // Remove the data property as we've resolved it already and don't want\n            // jQuery to do it again (it is restored at the end of the function)\n            delete ajax.data;\n        }\n\n        var baseAjax = {\n            \"url\": typeof ajax === 'string' ?\n                ajax :\n                '',\n            \"data\": data,\n            \"success\": callback,\n            \"dataType\": \"json\",\n            \"cache\": false,\n            \"type\": oSettings.sServerMethod,\n            \"error\": function(xhr, error) {\n                var ret = _fnCallbackFire(oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR], true);\n\n                if (ret.indexOf(true) === -1) {\n                    if (error == \"parsererror\") {\n                        _fnLog(oSettings, 0, 'Invalid JSON response', 1);\n                    } else if (xhr.readyState === 4) {\n                        _fnLog(oSettings, 0, 'Ajax error', 7);\n                    }\n                }\n\n                _fnProcessingDisplay(oSettings, false);\n            }\n        };\n\n        // If `ajax` option is an object, extend and override our default base\n        if ($.isPlainObject(ajax)) {\n            $.extend(baseAjax, ajax);\n        }\n\n        // Store the data submitted for the API\n        oSettings.oAjaxData = data;\n\n        // Allow plug-ins and external processes to modify the data\n        _fnCallbackFire(oSettings, null, 'preXhr', [oSettings, data, baseAjax], true);\n\n        if (typeof ajax === 'function') {\n            // Is a function - let the caller define what needs to be done\n            oSettings.jqXHR = ajax.call(instance, data, callback, oSettings);\n        } else if (ajax.url === '') {\n            // No url, so don't load any data. Just apply an empty data array\n            // to the object for the callback.\n            var empty = {};\n\n            DataTable.util.set(ajax.dataSrc)(empty, []);\n            callback(empty);\n        } else {\n            // Object to extend the base settings\n            oSettings.jqXHR = $.ajax(baseAjax);\n\n            // Restore for next time around\n            if (ajaxData) {\n                ajax.data = ajaxData;\n            }\n        }\n    }\n\n\n    /**\n     * Update the table using an Ajax call\n     *  @param {object} settings dataTables settings object\n     *  @returns {boolean} Block the table drawing or not\n     *  @memberof DataTable#oApi\n     */\n    function _fnAjaxUpdate(settings) {\n        settings.iDraw++;\n        _fnProcessingDisplay(settings, true);\n\n        _fnBuildAjax(\n            settings,\n            _fnAjaxParameters(settings),\n            function(json) {\n                _fnAjaxUpdateDraw(settings, json);\n            }\n        );\n    }\n\n\n    /**\n     * Build up the parameters in an object needed for a server-side processing\n     * request.\n     *  @param {object} oSettings dataTables settings object\n     * @param settings\n     *  @returns {bool} block the table drawing or not\n     *  @memberof DataTable#oApi\n     */\n    function _fnAjaxParameters(settings) {\n        var\n            columns = settings.aoColumns,\n            features = settings.oFeatures,\n            preSearch = settings.oPreviousSearch,\n            preColSearch = settings.aoPreSearchCols,\n            colData = function(idx, prop) {\n                return typeof columns[idx][prop] === 'function' ?\n                    'function' :\n                    columns[idx][prop];\n            };\n\n        return {\n            draw: settings.iDraw,\n            columns: columns.map(function(column, i) {\n                return {\n                    data: colData(i, 'mData'),\n                    name: column.sName,\n                    searchable: column.bSearchable,\n                    orderable: column.bSortable,\n                    search: {\n                        value: preColSearch[i].search,\n                        regex: preColSearch[i].regex,\n                        fixed: Object.keys(column.searchFixed).map(function(name) {\n                            return {\n                                name: name,\n                                term: column.searchFixed[name].toString()\n                            };\n                        })\n                    }\n                };\n            }),\n            order: _fnSortFlatten(settings).map(function(val) {\n                return {\n                    column: val.col,\n                    dir: val.dir,\n                    name: colData(val.col, 'sName')\n                };\n            }),\n            start: settings._iDisplayStart,\n            length: features.bPaginate ?\n                settings._iDisplayLength :\n                -1,\n            search: {\n                value: preSearch.search,\n                regex: preSearch.regex,\n                fixed: Object.keys(settings.searchFixed).map(function(name) {\n                    return {\n                        name: name,\n                        term: settings.searchFixed[name].toString()\n                    };\n                })\n            }\n        };\n    }\n\n\n    /**\n     * Data the data from the server (nuking the old) and redraw the table\n     *  @param {object} oSettings dataTables settings object\n     * @param settings\n     *  @param {object} json json data return from the server.\n     *  @param {string} json.sEcho Tracking flag for DataTables to match requests\n     *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering\n     *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering\n     *  @param {array} json.aaData The data to display on this page\n     *  @param {string} [json.sColumns] Column ordering (sName, comma separated)\n     *  @memberof DataTable#oApi\n     */\n    function _fnAjaxUpdateDraw(settings, json) {\n        var data = _fnAjaxDataSrc(settings, json);\n        var draw = _fnAjaxDataSrcParam(settings, 'draw', json);\n        var recordsTotal = _fnAjaxDataSrcParam(settings, 'recordsTotal', json);\n        var recordsFiltered = _fnAjaxDataSrcParam(settings, 'recordsFiltered', json);\n\n        if (draw !== undefined) {\n            // Protect against out of sequence returns\n            if (draw * 1 < settings.iDraw) {\n                return;\n            }\n            settings.iDraw = draw * 1;\n        }\n\n        // No data in returned object, so rather than an array, we show an empty table\n        if (!data) {\n            data = [];\n        }\n\n        _fnClearTable(settings);\n        settings._iRecordsTotal = parseInt(recordsTotal, 10);\n        settings._iRecordsDisplay = parseInt(recordsFiltered, 10);\n\n        for (var i = 0, ien = data.length; i < ien; i++) {\n            _fnAddData(settings, data[i]);\n        }\n        settings.aiDisplay = settings.aiDisplayMaster.slice();\n\n        _fnDraw(settings, true);\n        _fnInitComplete(settings);\n        _fnProcessingDisplay(settings, false);\n    }\n\n\n    /**\n     * Get the data from the JSON data source to use for drawing a table. Using\n     * `_fnGetObjectDataFn` allows the data to be sourced from a property of the\n     * source object, or from a processing function.\n     *  @param {object} settings dataTables settings object\n     *  @param  {object} json Data source object / array from the server\n     * @param write\n     *  @return {array} Array of data to use\n     */\n    function _fnAjaxDataSrc(settings, json, write) {\n        var dataProp = 'data';\n\n        if ($.isPlainObject(settings.ajax) && settings.ajax.dataSrc !== undefined) {\n            // Could in inside a `dataSrc` object, or not!\n            var dataSrc = settings.ajax.dataSrc;\n\n            // String, function and object are valid types\n            if (typeof dataSrc === 'string' || typeof dataSrc === 'function') {\n                dataProp = dataSrc;\n            } else if (dataSrc.data !== undefined) {\n                dataProp = dataSrc.data;\n            }\n        }\n\n        if (!write) {\n            if (dataProp === 'data') {\n                // If the default, then we still want to support the old style, and safely ignore\n                // it if possible\n                return json.aaData || json[dataProp];\n            }\n\n            return dataProp !== \"\" ?\n                _fnGetObjectDataFn(dataProp)(json) :\n                json;\n        }\n\n        // Set\n        _fnSetObjectDataFn(dataProp)(json, write);\n    }\n\n    /**\n     * Very similar to _fnAjaxDataSrc, but for the other SSP properties\n     * @param {*} settings DataTables settings object\n     * @param {*} param Target parameter\n     * @param {*} json JSON data\n     * @returns Resolved value\n     */\n    function _fnAjaxDataSrcParam(settings, param, json) {\n        var dataSrc = $.isPlainObject(settings.ajax)\n            ? settings.ajax.dataSrc\n            : null;\n\n        if (dataSrc && dataSrc[param]) {\n            // Get from custom location\n            return _fnGetObjectDataFn(dataSrc[param])(json);\n        }\n\n        // Else - Default behaviour\n        var old = '';\n\n        // Legacy support\n        if (param === 'draw') {\n            old = 'sEcho';\n        } else if (param === 'recordsTotal') {\n            old = 'iTotalRecords';\n        } else if (param === 'recordsFiltered') {\n            old = 'iTotalDisplayRecords';\n        }\n\n        return json[old] !== undefined\n            ? json[old]\n            : json[param];\n    }\n\n\n    /**\n     * Filter the table using both the global filter and column based filtering\n     *  @param {object} settings dataTables settings object\n     *  @param {object} input search information\n     *  @memberof DataTable#oApi\n     */\n    function _fnFilterComplete(settings, input) {\n        var columnsSearch = settings.aoPreSearchCols;\n\n        // Resolve any column types that are unknown due to addition or invalidation\n        // @todo As per sort - can this be moved into an event handler?\n        _fnColumnTypes(settings);\n\n        // In server-side processing all filtering is done by the server, so no point hanging around here\n        if (_fnDataSource(settings) != 'ssp') {\n            // Check if any of the rows were invalidated\n            _fnFilterData(settings);\n\n            // Start from the full data set\n            settings.aiDisplay = settings.aiDisplayMaster.slice();\n\n            // Global filter first\n            _fnFilter(settings.aiDisplay, settings, input.search, input);\n\n            $.each(settings.searchFixed, function(name, term) {\n                _fnFilter(settings.aiDisplay, settings, term, {});\n            });\n\n            // Then individual column filters\n            for (var i = 0; i < columnsSearch.length; i++) {\n                var col = columnsSearch[i];\n\n                _fnFilter(\n                    settings.aiDisplay,\n                    settings,\n                    col.search,\n                    col,\n                    i\n                );\n\n                $.each(settings.aoColumns[i].searchFixed, function(name, term) {\n                    _fnFilter(settings.aiDisplay, settings, term, {}, i);\n                });\n            }\n\n            // And finally global filtering\n            _fnFilterCustom(settings);\n        }\n\n        // Tell the draw function we have been filtering\n        settings.bFiltered = true;\n\n        _fnCallbackFire(settings, null, 'search', [settings]);\n    }\n\n\n    /**\n     * Apply custom filtering functions\n     *\n     * This is legacy now that we have named functions, but it is widely used\n     * from 1.x, so it is not yet deprecated.\n     *  @param {object} oSettings dataTables settings object\n     * @param settings\n     *  @memberof DataTable#oApi\n     */\n    function _fnFilterCustom(settings) {\n        var filters = DataTable.ext.search;\n        var displayRows = settings.aiDisplay;\n        var row, rowIdx;\n\n        for (var i = 0, ien = filters.length; i < ien; i++) {\n            var rows = [];\n\n            // Loop over each row and see if it should be included\n            for (var j = 0, jen = displayRows.length; j < jen; j++) {\n                rowIdx = displayRows[j];\n                row = settings.aoData[rowIdx];\n\n                if (filters[i](settings, row._aFilterData, rowIdx, row._aData, j)) {\n                    rows.push(rowIdx);\n                }\n            }\n\n            // So the array reference doesn't break set the results into the\n            // existing array\n            displayRows.length = 0;\n            displayRows.push.apply(displayRows, rows);\n        }\n    }\n\n\n    /**\n     * Filter the data table based on user input and draw the table\n     * @param searchRows\n     * @param settings\n     * @param input\n     * @param options\n     * @param column\n     */\n    function _fnFilter(searchRows, settings, input, options, column) {\n        if (input === '') {\n            return;\n        }\n\n        var i = 0;\n\n        // Search term can be a function, regex or string - if a string we apply our\n        // smart filtering regex (assuming the options require that)\n        var searchFunc = typeof input === 'function' ? input : null;\n        var rpSearch = input instanceof RegExp\n            ? input\n            : searchFunc\n                ? null\n                : _fnFilterCreateSearch(input, options);\n\n        // Then for each row, does the test pass. If not, lop the row from the array\n        while (i < searchRows.length) {\n            var row = settings.aoData[searchRows[i]];\n            var data = column === undefined\n                ? row._sFilterRow\n                : row._aFilterData[column];\n\n            if ((searchFunc && !searchFunc(data, row._aData, searchRows[i], column)) || (rpSearch && !rpSearch.test(data))) {\n                searchRows.splice(i, 1);\n                i--;\n            }\n\n            i++;\n        }\n    }\n\n\n    /**\n     * Build a regular expression object suitable for searching a table\n     *  @param {string} sSearch string to search for\n     *  @param {bool} bRegex treat as a regular expression or not\n     *  @param {bool} bSmart perform smart filtering or not\n     *  @param {bool} bCaseInsensitive Do case insensitive matching or not\n     * @param search\n     * @param inOpts\n     *  @returns {RegExp} constructed object\n     *  @memberof DataTable#oApi\n     */\n    function _fnFilterCreateSearch(search, inOpts) {\n        var not = [];\n        var options = $.extend({}, {\n            boundary: false,\n            caseInsensitive: true,\n            exact: false,\n            regex: false,\n            smart: true\n        }, inOpts);\n\n        if (typeof search !== 'string') {\n            search = search.toString();\n        }\n\n        // Remove diacritics if normalize is set up to do so\n        search = _normalize(search);\n\n        if (options.exact) {\n            return new RegExp(\n                '^' + _fnEscapeRegex(search) + '$',\n                options.caseInsensitive ? 'i' : ''\n            );\n        }\n\n        search = options.regex ?\n            search :\n            _fnEscapeRegex(search);\n\n        if (options.smart) {\n            /* For smart filtering we want to allow the search to work regardless of\n             * word order. We also want double quoted text to be preserved, so word\n             * order is important - a la google. And a negative look around for\n             * finding rows which don't contain a given string.\n             *\n             * So this is the sort of thing we want to generate:\n             *\n             * ^(?=.*?\\bone\\b)(?=.*?\\btwo three\\b)(?=.*?\\bfour\\b).*$\n             */\n            var parts = search.match(/!?[\"\\u201C][^\"\\u201D]+[\"\\u201D]|[^ ]+/g) || [''];\n            var a = parts.map(function(word) {\n                var negative = false;\n                var m;\n\n                // Determine if it is a \"does not include\"\n                if (word.charAt(0) === '!') {\n                    negative = true;\n                    word = word.substring(1);\n                }\n\n                // Strip the quotes from around matched phrases\n                if (word.charAt(0) === '\"') {\n                    m = word.match(/^\"(.*)\"$/);\n                    word = m ? m[1] : word;\n                } else if (word.charAt(0) === '\\u201C') {\n                    // Smart quote match (iPhone users)\n                    m = word.match(/^\\u201C(.*)\\u201D$/);\n                    word = m ? m[1] : word;\n                }\n\n                // For our \"not\" case, we need to modify the string that is\n                // allowed to match at the end of the expression.\n                if (negative) {\n                    if (word.length > 1) {\n                        not.push('(?!' + word + ')');\n                    }\n\n                    word = '';\n                }\n\n                return word.replace('\"', '');\n            });\n\n            var match = not.length\n                ? not.join('')\n                : '';\n\n            var boundary = options.boundary\n                ? '\\\\b'\n                : '';\n\n            search = '^(?=.*?' + boundary + a.join(')(?=.*?' + boundary) + ')(' + match + '.)*$';\n        }\n\n        return new RegExp(search, options.caseInsensitive ? 'i' : '');\n    }\n\n\n    /**\n     * Escape a string such that it can be used in a regular expression\n     *  @param {string} sVal string to escape\n     *  @returns {string} escaped string\n     *  @memberof DataTable#oApi\n     */\n    var _fnEscapeRegex = DataTable.util.escapeRegex;\n\n    var __filter_div = $('<div>')[0];\n    var __filter_div_textContent = __filter_div.textContent !== undefined;\n\n    // Update the filtering data for each row if needed (by invalidation or first run)\n    /**\n     * @param settings\n     */\n    function _fnFilterData(settings) {\n        var columns = settings.aoColumns;\n        var data = settings.aoData;\n        var column;\n        var j, jen, filterData, cellData, row;\n        var wasInvalidated = false;\n\n        for (var rowIdx = 0; rowIdx < data.length; rowIdx++) {\n            if (!data[rowIdx]) {\n                continue;\n            }\n\n            row = data[rowIdx];\n\n            if (!row._aFilterData) {\n                filterData = [];\n\n                for (j = 0, jen = columns.length; j < jen; j++) {\n                    column = columns[j];\n\n                    if (column.bSearchable) {\n                        cellData = _fnGetCellData(settings, rowIdx, j, 'filter');\n\n                        // Search in DataTables is string based\n                        if (cellData === null) {\n                            cellData = '';\n                        }\n\n                        if (typeof cellData !== 'string' && cellData.toString) {\n                            cellData = cellData.toString();\n                        }\n                    } else {\n                        cellData = '';\n                    }\n\n                    // If it looks like there is an HTML entity in the string,\n                    // attempt to decode it so sorting works as expected. Note that\n                    // we could use a single line of jQuery to do this, but the DOM\n                    // method used here is much faster https://jsperf.com/html-decode\n                    if (cellData.indexOf && cellData.indexOf('&') !== -1) {\n                        __filter_div.innerHTML = cellData;\n                        cellData = __filter_div_textContent ?\n                            __filter_div.textContent :\n                            __filter_div.innerText;\n                    }\n\n                    if (cellData.replace) {\n                        cellData = cellData.replace(/[\\r\\n\\u2028]/g, '');\n                    }\n\n                    filterData.push(cellData);\n                }\n\n                row._aFilterData = filterData;\n                row._sFilterRow = filterData.join('  ');\n                wasInvalidated = true;\n            }\n        }\n\n        return wasInvalidated;\n    }\n\n\n    /**\n     * Draw the table for the first time, adding all required features\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnInitialise(settings) {\n        var i,\niAjaxStart = settings.iInitDisplayStart;\n\n        /* Ensure that the table data is fully initialised */\n        if (!settings.bInitialised) {\n            setTimeout(function() {\n _fnInitialise(settings);\n}, 200);\n            return;\n        }\n\n        /* Build and draw the header / footer for the table */\n        _fnBuildHead(settings, 'header');\n        _fnBuildHead(settings, 'footer');\n        _fnDrawHead(settings, settings.aoHeader);\n        _fnDrawHead(settings, settings.aoFooter);\n\n        // Enable features\n        _fnAddOptionsHtml(settings);\n        _fnSortInit(settings);\n\n        _colGroup(settings);\n\n        /* Okay to show that something is going on now */\n        _fnProcessingDisplay(settings, true);\n\n        _fnCallbackFire(settings, null, 'preInit', [settings], true);\n\n        // If there is default sorting required - let's do it. The sort function\n        // will do the drawing for us. Otherwise we draw the table regardless of the\n        // Ajax source - this allows the table to look initialised for Ajax sourcing\n        // data (show 'loading' message possibly)\n        _fnReDraw(settings);\n\n        var dataSrc = _fnDataSource(settings);\n\n        // Server-side processing init complete is done by _fnAjaxUpdateDraw\n        if (dataSrc != 'ssp') {\n            // If there is an ajax source load the data\n            if (dataSrc == 'ajax') {\n                _fnBuildAjax(settings, {}, function(json) {\n                    var aData = _fnAjaxDataSrc(settings, json);\n\n                    // Got the data - add it to the table\n                    for (i = 0; i < aData.length; i++) {\n                        _fnAddData(settings, aData[i]);\n                    }\n\n                    // Reset the init display for cookie saving. We've already done\n                    // a filter, and therefore cleared it before. So we need to make\n                    // it appear 'fresh'\n                    settings.iInitDisplayStart = iAjaxStart;\n\n                    _fnReDraw(settings);\n                    _fnProcessingDisplay(settings, false);\n                    _fnInitComplete(settings);\n                }, settings);\n            } else {\n                _fnInitComplete(settings);\n                _fnProcessingDisplay(settings, false);\n            }\n        }\n    }\n\n\n    /**\n     * Draw the table for the first time, adding all required features\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnInitComplete(settings) {\n        if (settings._bInitComplete) {\n            return;\n        }\n\n        var args = [settings, settings.json];\n\n        settings._bInitComplete = true;\n\n        // Table is fully set up and we have data, so calculate the\n        // column widths\n        _fnAdjustColumnSizing(settings);\n\n        _fnCallbackFire(settings, null, 'plugin-init', args, true);\n        _fnCallbackFire(settings, 'aoInitComplete', 'init', args, true);\n    }\n\n    /**\n     * @param settings\n     * @param val\n     */\n    function _fnLengthChange(settings, val) {\n        var len = parseInt(val, 10);\n        settings._iDisplayLength = len;\n\n        _fnLengthOverflow(settings);\n\n        // Fire length change event\n        _fnCallbackFire(settings, null, 'length', [settings, len]);\n    }\n\n    /**\n     * Alter the display settings to change the page\n     *  @param {object} settings DataTables settings object\n     *  @param {string|int} action Paging action to take: \"first\", \"previous\",\n     *    \"next\" or \"last\" or page number to jump to (integer)\n     *  @param [bool] redraw Automatically draw the update or not\n     * @param redraw\n     *  @returns {bool} true page has changed, false - no change\n     *  @memberof DataTable#oApi\n     */\n    function _fnPageChange(settings, action, redraw) {\n        var\n            start = settings._iDisplayStart,\n            len = settings._iDisplayLength,\n            records = settings.fnRecordsDisplay();\n\n        if (records === 0 || len === -1) {\n            start = 0;\n        } else if (typeof action === \"number\") {\n            start = action * len;\n\n            if (start > records) {\n                start = 0;\n            }\n        } else if (action == \"first\") {\n            start = 0;\n        } else if (action == \"previous\") {\n            start = len >= 0 ?\n                start - len :\n                0;\n\n            if (start < 0) {\n                start = 0;\n            }\n        } else if (action == \"next\") {\n            if (start + len < records) {\n                start += len;\n            }\n        } else if (action == \"last\") {\n            start = Math.floor((records - 1) / len) * len;\n        } else if (action === 'ellipsis') {\n            return;\n        } else {\n            _fnLog(settings, 0, \"Unknown paging action: \" + action, 5);\n        }\n\n        var changed = settings._iDisplayStart !== start;\n        settings._iDisplayStart = start;\n\n        _fnCallbackFire(settings, null, changed ? 'page' : 'page-nc', [settings]);\n\n        if (changed && redraw) {\n            _fnDraw(settings);\n        }\n\n        return changed;\n    }\n\n\n    /**\n     * Generate the node required for the processing node\n     *  @param {object} settings DataTables settings object\n     */\n    function _processingHtml(settings) {\n        var table = settings.nTable;\n\n        if (settings.oFeatures.bProcessing) {\n            var n = $('<div/>', {\n                'id': settings.sTableId + '_processing',\n                'class': settings.oClasses.processing.container,\n                'role': 'status'\n            })\n                .html(settings.oLanguage.sProcessing)\n                .append('<div><div></div><div></div><div></div><div></div></div>')\n                .insertBefore(table);\n\n            $(table).on('processing.dt.DT', function(e, s, show) {\n                n.css('display', show ? 'block' : 'none');\n            });\n        }\n    }\n\n\n    /**\n     * Display or hide the processing indicator\n     *  @param {object} settings DataTables settings object\n     *  @param {bool} show Show the processing indicator (true) or not (false)\n     */\n    function _fnProcessingDisplay(settings, show) {\n        _fnCallbackFire(settings, null, 'processing', [settings, show]);\n    }\n    /**\n     * Add any control elements for the table - specifically scrolling\n     *  @param {object} settings dataTables settings object\n     *  @returns {node} Node to add to the DOM\n     *  @memberof DataTable#oApi\n     */\n    function _fnFeatureHtmlTable(settings) {\n        var table = $(settings.nTable);\n\n        // Scrolling from here on in\n        var scroll = settings.oScroll;\n\n        if (scroll.sX === '' && scroll.sY === '') {\n            return settings.nTable;\n        }\n\n        var scrollX = scroll.sX;\n        var scrollY = scroll.sY;\n        var classes = settings.oClasses.scrolling;\n        var caption = settings.captionNode;\n        var captionSide = caption ? caption._captionSide : null;\n        var headerClone = $(table[0].cloneNode(false));\n        var footerClone = $(table[0].cloneNode(false));\n        var footer = table.children('tfoot');\n        var _div = '<div/>';\n        var size = function(s) {\n            return !s ? null : _fnStringToCss(s);\n        };\n\n        if (!footer.length) {\n            footer = null;\n        }\n\n        /*\n         * The HTML structure that we want to generate in this function is:\n         *  div - scroller\n         *    div - scroll head\n         *      div - scroll head inner\n         *        table - scroll head table\n         *          thead - thead\n         *    div - scroll body\n         *      table - table (master table)\n         *        thead - thead clone for sizing\n         *        tbody - tbody\n         *    div - scroll foot\n         *      div - scroll foot inner\n         *        table - scroll foot table\n         *          tfoot - tfoot\n         */\n        var scroller = $(_div, {'class': classes.container})\n            .append(\n                $(_div, {'class': classes.header.self})\n                    .css({\n                        overflow: 'hidden',\n                        position: 'relative',\n                        border: 0,\n                        width: scrollX ? size(scrollX) : '100%'\n                    })\n                    .append(\n                        $(_div, {'class': classes.header.inner})\n                            .css({\n                                'box-sizing': 'content-box',\n                                width: scroll.sXInner || '100%'\n                            })\n                            .append(\n                                headerClone\n                                    .removeAttr('id')\n                                    .css('margin-left', 0)\n                                    .append(captionSide === 'top' ? caption : null)\n                                    .append(\n                                        table.children('thead')\n                                    )\n                            )\n                    )\n            )\n            .append(\n                $(_div, {'class': classes.body})\n                    .css({\n                        position: 'relative',\n                        overflow: 'auto',\n                        width: size(scrollX)\n                    })\n                    .append(table)\n            );\n\n        if (footer) {\n            scroller.append(\n                $(_div, {'class': classes.footer.self})\n                    .css({\n                        overflow: 'hidden',\n                        border: 0,\n                        width: scrollX ? size(scrollX) : '100%'\n                    })\n                    .append(\n                        $(_div, {'class': classes.footer.inner})\n                            .append(\n                                footerClone\n                                    .removeAttr('id')\n                                    .css('margin-left', 0)\n                                    .append(captionSide === 'bottom' ? caption : null)\n                                    .append(\n                                        table.children('tfoot')\n                                    )\n                            )\n                    )\n            );\n        }\n\n        var children = scroller.children();\n        var scrollHead = children[0];\n        var scrollBody = children[1];\n        var scrollFoot = footer ? children[2] : null;\n\n        // When the body is scrolled, then we also want to scroll the headers\n        $(scrollBody).on('scroll.DT', function() {\n            var scrollLeft = this.scrollLeft;\n\n            scrollHead.scrollLeft = scrollLeft;\n\n            if (footer) {\n                scrollFoot.scrollLeft = scrollLeft;\n            }\n        });\n\n        // When focus is put on the header cells, we might need to scroll the body\n        $('th, td', scrollHead).on('focus', function() {\n            var scrollLeft = scrollHead.scrollLeft;\n\n            scrollBody.scrollLeft = scrollLeft;\n\n            if (footer) {\n                scrollBody.scrollLeft = scrollLeft;\n            }\n        });\n\n        $(scrollBody).css('max-height', scrollY);\n        if (!scroll.bCollapse) {\n            $(scrollBody).css('height', scrollY);\n        }\n\n        settings.nScrollHead = scrollHead;\n        settings.nScrollBody = scrollBody;\n        settings.nScrollFoot = scrollFoot;\n\n        // On redraw - align columns\n        settings.aoDrawCallback.push(_fnScrollDraw);\n\n        return scroller[0];\n    }\n\n\n    /**\n     * Update the header, footer and body tables for resizing - i.e. column\n     * alignment.\n     *\n     * Welcome to the most horrible function DataTables. The process that this\n     * function follows is basically:\n     *   1. Re-create the table inside the scrolling div\n     *   2. Correct colgroup > col values if needed\n     *   3. Copy colgroup > col over to header and footer\n     *   4. Clean up\n     *\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnScrollDraw(settings) {\n        // Given that this is such a monster function, a lot of variables are use\n        // to try and keep the minimised size as small as possible\n        var\n            scroll = settings.oScroll,\n            barWidth = scroll.iBarWidth,\n            divHeader = $(settings.nScrollHead),\n            divHeaderInner = divHeader.children('div'),\n            divHeaderTable = divHeaderInner.children('table'),\n            divBodyEl = settings.nScrollBody,\n            divBody = $(divBodyEl),\n            divFooter = $(settings.nScrollFoot),\n            divFooterInner = divFooter.children('div'),\n            divFooterTable = divFooterInner.children('table'),\n            header = $(settings.nTHead),\n            table = $(settings.nTable),\n            footer = settings.nTFoot && $('th, td', settings.nTFoot).length ? $(settings.nTFoot) : null,\n            browser = settings.oBrowser,\n            headerCopy, footerCopy;\n\n        // If the scrollbar visibility has changed from the last draw, we need to\n        // adjust the column sizes as the table width will have changed to account\n        // for the scrollbar\n        var scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;\n\n        if (settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined) {\n            settings.scrollBarVis = scrollBarVis;\n            _fnAdjustColumnSizing(settings);\n            return; // Adjust column sizing will call this function again\n        } else {\n            settings.scrollBarVis = scrollBarVis;\n        }\n\n        // 1. Re-create the table inside the scrolling div\n        // Remove the old minimised thead and tfoot elements in the inner table\n        table.children('thead, tfoot').remove();\n\n        // Clone the current header and footer elements and then place it into the inner table\n        headerCopy = header.clone().prependTo(table);\n        headerCopy.find('th, td').removeAttr('tabindex');\n        headerCopy.find('[id]').removeAttr('id');\n\n        if (footer) {\n            footerCopy = footer.clone().prependTo(table);\n            footerCopy.find('[id]').removeAttr('id');\n        }\n\n        // 2. Correct colgroup > col values if needed\n        // It is possible that the cell sizes are smaller than the content, so we need to\n        // correct colgroup>col for such cases. This can happen if the auto width detection\n        // uses a cell which has a longer string, but isn't the widest! For example\n        // \"Chief Executive Officer (CEO)\" is the longest string in the demo, but\n        // \"Systems Administrator\" is actually the widest string since it doesn't collapse.\n        if (settings.aiDisplay.length) {\n            // Get the column sizes from the first row in the table\n            var colSizes = table.find('tbody tr').eq(0).find('th, td').map(function() {\n                return $(this).outerWidth();\n            });\n\n            // Check against what the colgroup > col is set to and correct if needed\n            $('col', settings.colgroup).each(function(i) {\n                var colWidth = this.style.width.replace('px', '');\n\n                if (colWidth !== colSizes[i]) {\n                    this.style.width = colSizes[i] + 'px';\n                }\n            });\n        }\n\n        // 3. Copy the colgroup over to the header and footer\n        divHeaderTable\n            .find('colgroup')\n            .remove();\n\n        divHeaderTable.append(settings.colgroup.clone());\n\n        if (footer) {\n            divFooterTable\n                .find('colgroup')\n                .remove();\n\n            divFooterTable.append(settings.colgroup.clone());\n        }\n\n        // \"Hide\" the header and footer that we used for the sizing. We need to keep\n        // the content of the cell so that the width applied to the header and body\n        // both match, but we want to hide it completely.\n        $('th, td', headerCopy).each(function() {\n            $(this.childNodes).wrapAll('<div class=\"dt-scroll-sizing\">');\n        });\n\n        if (footer) {\n            $('th, td', footerCopy).each(function() {\n                $(this.childNodes).wrapAll('<div class=\"dt-scroll-sizing\">');\n            });\n        }\n\n        // 4. Clean up\n        // Figure out if there are scrollbar present - if so then we need a the header and footer to\n        // provide a bit more space to allow \"overflow\" scrolling (i.e. past the scrollbar)\n        var isScrolling = Math.floor(table.height()) > divBodyEl.clientHeight || divBody.css('overflow-y') == \"scroll\";\n        var paddingSide = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right');\n\n        // Set the width's of the header and footer tables\n        var outerWidth = table.outerWidth();\n\n        divHeaderTable.css('width', _fnStringToCss(outerWidth));\n        divHeaderInner\n            .css('width', _fnStringToCss(outerWidth))\n            .css(paddingSide, isScrolling ? barWidth + \"px\" : \"0px\");\n\n        if (footer) {\n            divFooterTable.css('width', _fnStringToCss(outerWidth));\n            divFooterInner\n                .css('width', _fnStringToCss(outerWidth))\n                .css(paddingSide, isScrolling ? barWidth + \"px\" : \"0px\");\n        }\n\n        // Correct DOM ordering for colgroup - comes before the thead\n        table.children('colgroup').prependTo(table);\n\n        // Adjust the position of the header in case we loose the y-scrollbar\n        divBody.trigger('scroll');\n\n        // If sorting or filtering has occurred, jump the scrolling back to the top\n        // only if we aren't holding the position\n        if ((settings.bSorted || settings.bFiltered) && !settings._drawHold) {\n            divBodyEl.scrollTop = 0;\n        }\n    }\n\n    /**\n     * Calculate the width of columns for the table\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnCalculateColumnWidths(settings) {\n        // Not interested in doing column width calculation if auto-width is disabled\n        if (!settings.oFeatures.bAutoWidth) {\n            return;\n        }\n\n        var\n            table = settings.nTable,\n            columns = settings.aoColumns,\n            scroll = settings.oScroll,\n            scrollY = scroll.sY,\n            scrollX = scroll.sX,\n            scrollXInner = scroll.sXInner,\n            visibleColumns = _fnGetColumns(settings, 'bVisible'),\n            tableWidthAttr = table.getAttribute('width'), // From DOM element\n            tableContainer = table.parentNode,\n            i, column, columnIdx;\n\n        var styleWidth = table.style.width;\n        if (styleWidth && styleWidth.indexOf('%') !== -1) {\n            tableWidthAttr = styleWidth;\n        }\n\n        // Let plug-ins know that we are doing a recalc, in case they have changed any of the\n        // visible columns their own way (e.g. Responsive uses display:none).\n        _fnCallbackFire(\n            settings,\n            null,\n            'column-calc',\n            {visible: visibleColumns},\n            false\n        );\n\n        // Construct a single row, worst case, table with the widest\n        // node in the data, assign any user defined widths, then insert it into\n        // the DOM and allow the browser to do all the hard work of calculating\n        // table widths\n        var tmpTable = $(table.cloneNode())\n            .css('visibility', 'hidden')\n            .removeAttr('id');\n\n        // Clean up the table body\n        tmpTable.append('<tbody>');\n        var tr = $('<tr/>').appendTo(tmpTable.find('tbody'));\n\n        // Clone the table header and footer - we can't use the header / footer\n        // from the cloned table, since if scrolling is active, the table's\n        // real header and footer are contained in different table tags\n        tmpTable\n            .append($(settings.nTHead).clone())\n            .append($(settings.nTFoot).clone());\n\n        // Remove any assigned widths from the footer (from scrolling)\n        tmpTable.find('tfoot th, tfoot td').css('width', '');\n\n        // Apply custom sizing to the cloned header\n        tmpTable.find('thead th, thead td').each(function() {\n            // Get the `width` from the header layout\n            var width = _fnColumnsSumWidth(settings, this, true, false);\n\n            if (width) {\n                this.style.width = width;\n\n                // For scrollX we need to force the column width otherwise the\n                // browser will collapse it. If this width is smaller than the\n                // width the column requires, then it will have no effect\n                if (scrollX) {\n                    $(this).append($('<div/>').css({\n                        width: width,\n                        margin: 0,\n                        padding: 0,\n                        border: 0,\n                        height: 1\n                    }));\n                }\n            } else {\n                this.style.width = '';\n            }\n        });\n\n        // Find the widest piece of data for each column and put it into the table\n        for (i = 0; i < visibleColumns.length; i++) {\n            columnIdx = visibleColumns[i];\n            column = columns[columnIdx];\n\n            var longest = _fnGetMaxLenString(settings, columnIdx);\n            var autoClass = _ext.type.className[column.sType];\n            var text = longest + column.sContentPadding;\n            var insert = longest.indexOf('<') === -1\n                ? document.createTextNode(text)\n                : text;\n\n            $('<td/>')\n                .addClass(autoClass)\n                .addClass(column.sClass)\n                .append(insert)\n                .appendTo(tr);\n        }\n\n        // Tidy the temporary table - remove name attributes so there aren't\n        // duplicated in the dom (radio elements for example)\n        $('[name]', tmpTable).removeAttr('name');\n\n        // Table has been built, attach to the document so we can work with it.\n        // A holding element is used, positioned at the top of the container\n        // with minimal height, so it has no effect on if the container scrolls\n        // or not. Otherwise it might trigger scrolling when it actually isn't\n        // needed\n        var holder = $('<div/>').css(scrollX || scrollY ?\n            {\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                height: 1,\n                right: 0,\n                overflow: 'hidden'\n            } :\n            {}\n        )\n            .append(tmpTable)\n            .appendTo(tableContainer);\n\n        // When scrolling (X or Y) we want to set the width of the table as\n        // appropriate. However, when not scrolling leave the table width as it\n        // is. This results in slightly different, but I think correct behaviour\n        if (scrollX && scrollXInner) {\n            tmpTable.width(scrollXInner);\n        } else if (scrollX) {\n            tmpTable.css('width', 'auto');\n            tmpTable.removeAttr('width');\n\n            // If there is no width attribute or style, then allow the table to\n            // collapse\n            if (tmpTable.width() < tableContainer.clientWidth && tableWidthAttr) {\n                tmpTable.width(tableContainer.clientWidth);\n            }\n        } else if (scrollY) {\n            tmpTable.width(tableContainer.clientWidth);\n        } else if (tableWidthAttr) {\n            tmpTable.width(tableWidthAttr);\n        }\n\n        // Get the width of each column in the constructed table\n        var total = 0;\n        var bodyCells = tmpTable.find('tbody tr').eq(0).children();\n\n        for (i = 0; i < visibleColumns.length; i++) {\n            // Use getBounding for sub-pixel accuracy, which we then want to round up!\n            var bounding = bodyCells[i].getBoundingClientRect().width;\n\n            // Total is tracked to remove any sub-pixel errors as the outerWidth\n            // of the table might not equal the total given here\n            total += bounding;\n\n            // Width for each column to use\n            columns[visibleColumns[i]].sWidth = _fnStringToCss(bounding);\n        }\n\n        table.style.width = _fnStringToCss(total);\n\n        // Finished with the table - ditch it\n        holder.remove();\n\n        // If there is a width attr, we want to attach an event listener which\n        // allows the table sizing to automatically adjust when the window is\n        // resized. Use the width attr rather than CSS, since we can't know if the\n        // CSS is a relative value or absolute - DOM read is always px.\n        if (tableWidthAttr) {\n            table.style.width = _fnStringToCss(tableWidthAttr);\n        }\n\n        if ((tableWidthAttr || scrollX) && !settings._reszEvt) {\n            var bindResize = function() {\n                $(window).on('resize.DT-' + settings.sInstance, DataTable.util.throttle(function() {\n                    if (!settings.bDestroying) {\n                        _fnAdjustColumnSizing(settings);\n                    }\n                }));\n            };\n\n            bindResize();\n\n            settings._reszEvt = true;\n        }\n    }\n\n\n    /**\n     * Get the maximum strlen for each data column\n     *  @param {object} settings dataTables settings object\n     *  @param {int} colIdx column of interest\n     *  @returns {string} string of the max length\n     *  @memberof DataTable#oApi\n     */\n    function _fnGetMaxLenString(settings, colIdx) {\n        var column = settings.aoColumns[colIdx];\n\n        if (!column.maxLenString) {\n            var s,\nmax = '',\nmaxLen = -1;\n\n            for (var i = 0, ien = settings.aiDisplayMaster.length; i < ien; i++) {\n                var rowIdx = settings.aiDisplayMaster[i];\n                var data = _fnGetRowDisplay(settings, rowIdx)[colIdx];\n\n                var cellString = data && typeof data === 'object' && data.nodeType\n                    ? data.innerHTML\n                    : data + '';\n\n                // Remove id / name attributes from elements so they\n                // don't interfere with existing elements\n                cellString = cellString\n                    .replace(/id=\".*?\"/g, '')\n                    .replace(/name=\".*?\"/g, '');\n\n                s = _stripHtml(cellString)\n                    .replace(/&nbsp;/g, ' ');\n\n                if (s.length > maxLen) {\n                    // We want the HTML in the string, but the length that\n                    // is important is the stripped string\n                    max = cellString;\n                    maxLen = s.length;\n                }\n            }\n\n            column.maxLenString = max;\n        }\n\n        return column.maxLenString;\n    }\n\n\n    /**\n     * Append a CSS unit (only if required) to a string\n     *  @param {string} value to css-ify\n     * @param s\n     *  @returns {string} value with css unit\n     *  @memberof DataTable#oApi\n     */\n    function _fnStringToCss(s) {\n        if (s === null) {\n            return '0px';\n        }\n\n        if (typeof s == 'number') {\n            return s < 0 ?\n                '0px' :\n                s + 'px';\n        }\n\n        // Check it has a unit character already\n        return s.match(/\\d$/) ?\n            s + 'px' :\n            s;\n    }\n\n    /**\n     * Re-insert the `col` elements for current visibility\n     *\n     * @param {*} settings DT settings\n     */\n    function _colGroup(settings) {\n        var cols = settings.aoColumns;\n\n        settings.colgroup.empty();\n\n        for (i = 0; i < cols.length; i++) {\n            if (cols[i].bVisible) {\n                settings.colgroup.append(cols[i].colEl);\n            }\n        }\n    }\n\n\n    /**\n     * @param settings\n     */\n    function _fnSortInit(settings) {\n        var target = settings.nTHead;\n        var headerRows = target.querySelectorAll('tr');\n        var legacyTop = settings.bSortCellsTop;\n        var notSelector = ':not([data-dt-order=\"disable\"]):not([data-dt-order=\"icon-only\"])';\n\n        // Legacy support for `orderCellsTop`\n        if (legacyTop === true) {\n            target = headerRows[0];\n        } else if (legacyTop === false) {\n            target = headerRows[headerRows.length - 1];\n        }\n\n        _fnSortAttachListener(\n            settings,\n            target,\n            target === settings.nTHead\n                ? 'tr' + notSelector + ' th' + notSelector + ', tr' + notSelector + ' td' + notSelector\n                : 'th' + notSelector + ', td' + notSelector\n        );\n\n        // Need to resolve the user input array into our internal structure\n        var order = [];\n        _fnSortResolve(settings, order, settings.aaSorting);\n\n        settings.aaSorting = order;\n    }\n\n\n    /**\n     * @param settings\n     * @param node\n     * @param selector\n     * @param column\n     * @param callback\n     */\n    function _fnSortAttachListener(settings, node, selector, column, callback) {\n        _fnBindAction(node, selector, function(e) {\n            var run = false;\n            var columns = column === undefined\n                ? _fnColumnsFromHeader(e.target)\n                : [column];\n\n            if (columns.length) {\n                for (var i = 0, ien = columns.length; i < ien; i++) {\n                    var ret = _fnSortAdd(settings, columns[i], i, e.shiftKey);\n\n                    if (ret !== false) {\n                        run = true;\n                    }\n\n                    // If the first entry is no sort, then subsequent\n                    // sort columns are ignored\n                    if (settings.aaSorting.length === 1 && settings.aaSorting[0][1] === '') {\n                        break;\n                    }\n                }\n\n                if (run) {\n                    _fnProcessingDisplay(settings, true);\n\n                    // Allow the processing display to show\n                    setTimeout(function() {\n                        _fnSort(settings);\n                        _fnSortDisplay(settings);\n                        _fnReDraw(settings, false, false);\n                        _fnProcessingDisplay(settings, false);\n\n                        if (callback) {\n                            callback();\n                        }\n                    }, 0);\n                }\n            }\n        });\n    }\n\n    /**\n     * Sort the display array to match the master's order\n     * @param {*} settings\n     */\n    function _fnSortDisplay(settings) {\n        var display = settings.aiDisplay;\n        var master = settings.aiDisplayMaster;\n        var masterMap = {};\n        var map = {};\n        var i;\n\n        // Rather than needing an `indexOf` on master array, we can create a map\n        for (i = 0; i < master.length; i++) {\n            masterMap[master[i]] = i;\n        }\n\n        // And then cache what would be the indexOf fom the display\n        for (i = 0; i < display.length; i++) {\n            map[display[i]] = masterMap[display[i]];\n        }\n\n        display.sort(function(a, b) {\n            // Short version of this function is simply `master.indexOf(a) - master.indexOf(b);`\n            return map[a] - map[b];\n        });\n    }\n\n\n    /**\n     * @param settings\n     * @param nestedSort\n     * @param sort\n     */\n    function _fnSortResolve(settings, nestedSort, sort) {\n        var push = function(a) {\n            if ($.isPlainObject(a)) {\n                if (a.idx !== undefined) {\n                    // Index based ordering\n                    nestedSort.push([a.idx, a.dir]);\n                } else if (a.name) {\n                    // Name based ordering\n                    var cols = _pluck(settings.aoColumns, 'sName');\n                    var idx = cols.indexOf(a.name);\n\n                    if (idx !== -1) {\n                        nestedSort.push([idx, a.dir]);\n                    }\n                }\n            } else {\n                // Plain column index and direction pair\n                nestedSort.push(a);\n            }\n        };\n\n        if ($.isPlainObject(sort)) {\n            // Object\n            push(sort);\n        } else if (sort.length && typeof sort[0] === 'number') {\n            // 1D array\n            push(sort);\n        } else if (sort.length) {\n            // 2D array\n            for (var z = 0; z < sort.length; z++) {\n                push(sort[z]); // Object or array\n            }\n        }\n    }\n\n\n    /**\n     * @param settings\n     */\n    function _fnSortFlatten(settings) {\n        var\n            i, k, kLen,\n            aSort = [],\n            extSort = DataTable.ext.type.order,\n            aoColumns = settings.aoColumns,\n            aDataSort, iCol, sType, srcCol,\n            fixed = settings.aaSortingFixed,\n            fixedObj = $.isPlainObject(fixed),\n            nestedSort = [];\n\n        if (!settings.oFeatures.bSort) {\n            return aSort;\n        }\n\n        // Build the sort array, with pre-fix and post-fix options if they have been\n        // specified\n        if (Array.isArray(fixed)) {\n            _fnSortResolve(settings, nestedSort, fixed);\n        }\n\n        if (fixedObj && fixed.pre) {\n            _fnSortResolve(settings, nestedSort, fixed.pre);\n        }\n\n        _fnSortResolve(settings, nestedSort, settings.aaSorting);\n\n        if (fixedObj && fixed.post) {\n            _fnSortResolve(settings, nestedSort, fixed.post);\n        }\n\n        for (i = 0; i < nestedSort.length; i++) {\n            srcCol = nestedSort[i][0];\n\n            if (aoColumns[srcCol]) {\n                aDataSort = aoColumns[srcCol].aDataSort;\n\n                for (k = 0, kLen = aDataSort.length; k < kLen; k++) {\n                    iCol = aDataSort[k];\n                    sType = aoColumns[iCol].sType || 'string';\n\n                    if (nestedSort[i]._idx === undefined) {\n                        nestedSort[i]._idx = aoColumns[iCol].asSorting.indexOf(nestedSort[i][1]);\n                    }\n\n                    if (nestedSort[i][1]) {\n                        aSort.push({\n                            src: srcCol,\n                            col: iCol,\n                            dir: nestedSort[i][1],\n                            index: nestedSort[i]._idx,\n                            type: sType,\n                            formatter: extSort[sType + \"-pre\"],\n                            sorter: extSort[sType + \"-\" + nestedSort[i][1]]\n                        });\n                    }\n                }\n            }\n        }\n\n        return aSort;\n    }\n\n    /**\n     * Change the order of the table\n     *  @param {object} oSettings dataTables settings object\n     * @param col\n     * @param dir\n     *  @memberof DataTable#oApi\n     */\n    function _fnSort(oSettings, col, dir) {\n        var\n            i, ien, iLen,\n            aiOrig = [],\n            extSort = DataTable.ext.type.order,\n            aoData = oSettings.aoData,\n            sortCol,\n            displayMaster = oSettings.aiDisplayMaster,\n            aSort;\n\n        // Resolve any column types that are unknown due to addition or invalidation\n        // @todo Can this be moved into a 'data-ready' handler which is called when\n        //   data is going to be used in the table?\n        _fnColumnTypes(oSettings);\n\n        // Allow a specific column to be sorted, which will _not_ alter the display\n        // master\n        if (col !== undefined) {\n            var srcCol = oSettings.aoColumns[col];\n            aSort = [{\n                src: col,\n                col: col,\n                dir: dir,\n                index: 0,\n                type: srcCol.sType,\n                formatter: extSort[srcCol.sType + \"-pre\"],\n                sorter: extSort[srcCol.sType + \"-\" + dir]\n            }];\n            displayMaster = displayMaster.slice();\n        } else {\n            aSort = _fnSortFlatten(oSettings);\n        }\n\n        for (i = 0, ien = aSort.length; i < ien; i++) {\n            sortCol = aSort[i];\n\n            // Load the data needed for the sort, for each cell\n            _fnSortData(oSettings, sortCol.col);\n        }\n\n        /* No sorting required if server-side or no sorting array */\n        if (_fnDataSource(oSettings) != 'ssp' && aSort.length !== 0) {\n            // Reset the initial positions on each pass so we get a stable sort\n            for (i = 0, iLen = displayMaster.length; i < iLen; i++) {\n                aiOrig[i] = i;\n            }\n\n            // If the first sort is desc, then reverse the array to preserve original\n            // order, just in reverse\n            if (aSort.length && aSort[0].dir === 'desc') {\n                aiOrig.reverse();\n            }\n\n            /* Do the sort - here we want multi-column sorting based on a given data source (column)\n             * and sorting function (from oSort) in a certain direction. It's reasonably complex to\n             * follow on it's own, but this is what we want (example two column sorting):\n             *  fnLocalSorting = function(a,b){\n             *    var test;\n             *    test = oSort['string-asc']('data11', 'data12');\n             *      if (test !== 0)\n             *        return test;\n             *    test = oSort['numeric-desc']('data21', 'data22');\n             *    if (test !== 0)\n             *      return test;\n             *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );\n             *  }\n             * Basically we have a test for each sorting column, if the data in that column is equal,\n             * test the next column. If all columns match, then we use a numeric sort on the row\n             * positions in the original data array to provide a stable sort.\n             */\n            displayMaster.sort(function(a, b) {\n                var\n                    x, y, k, test, sort,\n                    len = aSort.length,\n                    dataA = aoData[a]._aSortData,\n                    dataB = aoData[b]._aSortData;\n\n                for (k = 0; k < len; k++) {\n                    sort = aSort[k];\n\n                    // Data, which may have already been through a `-pre` function\n                    x = dataA[sort.col];\n                    y = dataB[sort.col];\n\n                    if (sort.sorter) {\n                        // If there is a custom sorter (`-asc` or `-desc`) for this\n                        // data type, use it\n                        test = sort.sorter(x, y);\n\n                        if (test !== 0) {\n                            return test;\n                        }\n                    } else {\n                        // Otherwise, use generic sorting\n                        test = x < y ? -1 : x > y ? 1 : 0;\n\n                        if (test !== 0) {\n                            return sort.dir === 'asc' ? test : -test;\n                        }\n                    }\n                }\n\n                x = aiOrig[a];\n                y = aiOrig[b];\n\n                return x < y ? -1 : x > y ? 1 : 0;\n            });\n        } else if (aSort.length === 0) {\n            // Apply index order\n            displayMaster.sort(function(x, y) {\n                return x < y ? -1 : x > y ? 1 : 0;\n            });\n        }\n\n        if (col === undefined) {\n            // Tell the draw function that we have sorted the data\n            oSettings.bSorted = true;\n\n            _fnCallbackFire(oSettings, null, 'order', [oSettings, aSort]);\n        }\n\n        return displayMaster;\n    }\n\n\n    /**\n     * Function to run on user sort request\n     *  @param {object} settings dataTables settings object\n     *  @param {node} attachTo node to attach the handler to\n     *  @param {int} colIdx column sorting index\n     *  @param {int} addIndex Counter\n     *  @param {boolean} [shift=false] Shift click add\n     *  @param {function} [callback] callback function\n     *  @memberof DataTable#oApi\n     */\n    function _fnSortAdd(settings, colIdx, addIndex, shift) {\n        var col = settings.aoColumns[colIdx];\n        var sorting = settings.aaSorting;\n        var asSorting = col.asSorting;\n        var nextSortIdx;\n        var next = function(a, overflow) {\n            var idx = a._idx;\n            if (idx === undefined) {\n                idx = asSorting.indexOf(a[1]);\n            }\n\n            return idx + 1 < asSorting.length ?\n                idx + 1 :\n                overflow ?\n                    null :\n                    0;\n        };\n\n        if (!col.bSortable) {\n            return false;\n        }\n\n        // Convert to 2D array if needed\n        if (typeof sorting[0] === 'number') {\n            sorting = settings.aaSorting = [sorting];\n        }\n\n        // If appending the sort then we are multi-column sorting\n        if ((shift || addIndex) && settings.oFeatures.bSortMulti) {\n            // Are we already doing some kind of sort on this column?\n            var sortIdx = _pluck(sorting, '0').indexOf(colIdx);\n\n            if (sortIdx !== -1) {\n                // Yes, modify the sort\n                nextSortIdx = next(sorting[sortIdx], true);\n\n                if (nextSortIdx === null && sorting.length === 1) {\n                    nextSortIdx = 0; // Can't remove sorting completely\n                }\n\n                if (nextSortIdx === null) {\n                    sorting.splice(sortIdx, 1);\n                } else {\n                    sorting[sortIdx][1] = asSorting[nextSortIdx];\n                    sorting[sortIdx]._idx = nextSortIdx;\n                }\n            } else if (shift) {\n                // No sort on this column yet, being added by shift click\n                // add it as itself\n                sorting.push([colIdx, asSorting[0], 0]);\n                sorting[sorting.length - 1]._idx = 0;\n            } else {\n                // No sort on this column yet, being added from a colspan\n                // so add with same direction as first column\n                sorting.push([colIdx, sorting[0][1], 0]);\n                sorting[sorting.length - 1]._idx = 0;\n            }\n        } else if (sorting.length && sorting[0][0] == colIdx) {\n            // Single column - already sorting on this column, modify the sort\n            nextSortIdx = next(sorting[0]);\n\n            sorting.length = 1;\n            sorting[0][1] = asSorting[nextSortIdx];\n            sorting[0]._idx = nextSortIdx;\n        } else {\n            // Single column - sort only on this column\n            sorting.length = 0;\n            sorting.push([colIdx, asSorting[0]]);\n            sorting[0]._idx = 0;\n        }\n    }\n\n\n    /**\n     * Set the sorting classes on table's body, Note: it is safe to call this function\n     * when bSort and bSortClasses are false\n     *  @param {object} oSettings dataTables settings object\n     * @param settings\n     *  @memberof DataTable#oApi\n     */\n    function _fnSortingClasses(settings) {\n        var oldSort = settings.aLastSort;\n        var sortClass = settings.oClasses.order.position;\n        var sort = _fnSortFlatten(settings);\n        var features = settings.oFeatures;\n        var i, ien, colIdx;\n\n        if (features.bSort && features.bSortClasses) {\n            // Remove old sorting classes\n            for (i = 0, ien = oldSort.length; i < ien; i++) {\n                colIdx = oldSort[i].src;\n\n                // Remove column sorting\n                $(_pluck(settings.aoData, 'anCells', colIdx))\n                    .removeClass(sortClass + (i < 2 ? i + 1 : 3));\n            }\n\n            // Add new column sorting\n            for (i = 0, ien = sort.length; i < ien; i++) {\n                colIdx = sort[i].src;\n\n                $(_pluck(settings.aoData, 'anCells', colIdx))\n                    .addClass(sortClass + (i < 2 ? i + 1 : 3));\n            }\n        }\n\n        settings.aLastSort = sort;\n    }\n\n\n    // Get the data to sort a column, be it from cache, fresh (populating the\n    // cache), or from a sort formatter\n    /**\n     * @param settings\n     * @param colIdx\n     */\n    function _fnSortData(settings, colIdx) {\n        // Custom sorting function - provided by the sort data type\n        var column = settings.aoColumns[colIdx];\n        var customSort = DataTable.ext.order[column.sSortDataType];\n        var customData;\n\n        if (customSort) {\n            customData = customSort.call(settings.oInstance, settings, colIdx,\n                _fnColumnIndexToVisible(settings, colIdx)\n            );\n        }\n\n        // Use / populate cache\n        var row, cellData;\n        var formatter = DataTable.ext.type.order[column.sType + \"-pre\"];\n        var data = settings.aoData;\n\n        for (var rowIdx = 0; rowIdx < data.length; rowIdx++) {\n            // Sparse array\n            if (!data[rowIdx]) {\n                continue;\n            }\n\n            row = data[rowIdx];\n\n            if (!row._aSortData) {\n                row._aSortData = [];\n            }\n\n            if (!row._aSortData[colIdx] || customSort) {\n                cellData = customSort ?\n                    customData[rowIdx] : // If there was a custom sort function, use data from there\n                    _fnGetCellData(settings, rowIdx, colIdx, 'sort');\n\n                row._aSortData[colIdx] = formatter ?\n                    formatter(cellData, settings) :\n                    cellData;\n            }\n        }\n    }\n\n\n    /**\n     * State information for a table\n     *\n     * @param {*} settings\n     * @returns State object\n     */\n    function _fnSaveState(settings) {\n        if (settings._bLoadingState) {\n            return;\n        }\n\n        /* Store the interesting variables */\n        var state = {\n            time: +new Date(),\n            start: settings._iDisplayStart,\n            length: settings._iDisplayLength,\n            order: $.extend(true, [], settings.aaSorting),\n            search: $.extend({}, settings.oPreviousSearch),\n            columns: settings.aoColumns.map(function(col, i) {\n                return {\n                    visible: col.bVisible,\n                    search: $.extend({}, settings.aoPreSearchCols[i])\n                };\n            })\n        };\n\n        settings.oSavedState = state;\n        _fnCallbackFire(settings, \"aoStateSaveParams\", 'stateSaveParams', [settings, state]);\n\n        if (settings.oFeatures.bStateSave && !settings.bDestroying) {\n            settings.fnStateSaveCallback.call(settings.oInstance, settings, state);\n        }\n    }\n\n\n    /**\n     * Attempt to load a saved table state\n     *  @param {object} oSettings dataTables settings object\n     *  @param {object} oInit DataTables init object so we can override settings\n     * @param settings\n     * @param init\n     *  @param {function} callback Callback to execute when the state has been loaded\n     *  @memberof DataTable#oApi\n     */\n    function _fnLoadState(settings, init, callback) {\n        if (!settings.oFeatures.bStateSave) {\n            callback();\n            return;\n        }\n\n        var loaded = function(state) {\n            _fnImplementState(settings, state, callback);\n        };\n\n        var state = settings.fnStateLoadCallback.call(settings.oInstance, settings, loaded);\n\n        if (state !== undefined) {\n            _fnImplementState(settings, state, callback);\n        }\n        // Otherwise, wait for the loaded callback to be executed\n\n        return true;\n    }\n\n    /**\n     * @param settings\n     * @param s\n     * @param callback\n     */\n    function _fnImplementState(settings, s, callback) {\n        var i, ien;\n        var columns = settings.aoColumns;\n        settings._bLoadingState = true;\n\n        // When StateRestore was introduced the state could now be implemented at any time\n        // Not just initialisation. To do this an api instance is required in some places\n        var api = settings._bInitComplete ? new DataTable.Api(settings) : null;\n\n        if (!s || !s.time) {\n            settings._bLoadingState = false;\n            callback();\n            return;\n        }\n\n        // Reject old data\n        var duration = settings.iStateDuration;\n        if (duration > 0 && s.time < +new Date() - (duration * 1000)) {\n            settings._bLoadingState = false;\n            callback();\n            return;\n        }\n\n        // Allow custom and plug-in manipulation functions to alter the saved data set and\n        // cancelling of loading by returning false\n        var abStateLoad = _fnCallbackFire(settings, 'aoStateLoadParams', 'stateLoadParams', [settings, s]);\n        if (abStateLoad.indexOf(false) !== -1) {\n            settings._bLoadingState = false;\n            callback();\n            return;\n        }\n\n        // Number of columns have changed - all bets are off, no restore of settings\n        if (s.columns && columns.length !== s.columns.length) {\n            settings._bLoadingState = false;\n            callback();\n            return;\n        }\n\n        // Store the saved state so it might be accessed at any time\n        settings.oLoadedState = $.extend(true, {}, s);\n\n        // This is needed for ColReorder, which has to happen first to allow all\n        // the stored indexes to be usable. It is not publicly documented.\n        _fnCallbackFire(settings, null, 'stateLoadInit', [settings, s], true);\n\n        // Page Length\n        if (s.length !== undefined) {\n            // If already initialised just set the value directly so that the select element is also updated\n            if (api) {\n                api.page.len(s.length);\n            } else {\n                settings._iDisplayLength = s.length;\n            }\n        }\n\n        // Restore key features - todo - for 1.11 this needs to be done by\n        // subscribed events\n        if (s.start !== undefined) {\n            if (api === null) {\n                settings._iDisplayStart = s.start;\n                settings.iInitDisplayStart = s.start;\n            } else {\n                _fnPageChange(settings, s.start / settings._iDisplayLength);\n            }\n        }\n\n        // Order\n        if (s.order !== undefined) {\n            settings.aaSorting = [];\n            $.each(s.order, function(i, col) {\n                settings.aaSorting.push(col[0] >= columns.length ?\n                    [0, col[1]] :\n                    col\n                );\n            });\n        }\n\n        // Search\n        if (s.search !== undefined) {\n            $.extend(settings.oPreviousSearch, s.search);\n        }\n\n        // Columns\n        if (s.columns) {\n            for (i = 0, ien = s.columns.length; i < ien; i++) {\n                var col = s.columns[i];\n\n                // Visibility\n                if (col.visible !== undefined) {\n                    // If the api is defined, the table has been initialised so we need to use it rather than internal settings\n                    if (api) {\n                        // Don't redraw the columns on every iteration of this loop, we will do this at the end instead\n                        api.column(i).visible(col.visible, false);\n                    } else {\n                        columns[i].bVisible = col.visible;\n                    }\n                }\n\n                // Search\n                if (col.search !== undefined) {\n                    $.extend(settings.aoPreSearchCols[i], col.search);\n                }\n            }\n\n            // If the api is defined then we need to adjust the columns once the visibility has been changed\n            if (api) {\n                api.columns.adjust();\n            }\n        }\n\n        settings._bLoadingState = false;\n        _fnCallbackFire(settings, 'aoStateLoaded', 'stateLoaded', [settings, s]);\n        callback();\n    }\n\n    /**\n     * Log an error message\n     *  @param {object} settings dataTables settings object\n     *  @param {int} level log error messages, or display them to the user\n     *  @param {string} msg error message\n     *  @param {int} tn Technical note id to get more information about the error.\n     *  @memberof DataTable#oApi\n     */\n    function _fnLog(settings, level, msg, tn) {\n        msg = 'DataTables warning: ' +\n            (settings ? 'table id=' + settings.sTableId + ' - ' : '') + msg;\n\n        if (tn) {\n            msg += '. For more information about this error, please see ' +\n                'https://datatables.net/tn/' + tn;\n        }\n\n        if (!level) {\n            // Backwards compatibility pre 1.10\n            var ext = DataTable.ext;\n            var type = ext.sErrMode || ext.errMode;\n\n            if (settings) {\n                _fnCallbackFire(settings, null, 'dt-error', [settings, tn, msg], true);\n            }\n\n            if (type == 'alert') {\n                alert(msg);\n            } else if (type == 'throw') {\n                throw new Error(msg);\n            } else if (typeof type == 'function') {\n                type(settings, tn, msg);\n            }\n        } else if (window.console && console.log) {\n            console.log(msg);\n        }\n    }\n\n\n    /**\n     * See if a property is defined on one object, if so assign it to the other object\n     *  @param {object} ret target object\n     *  @param {object} src source object\n     *  @param {string} name property\n     *  @param {string} [mappedName] name to map too - optional, name used if not given\n     *  @memberof DataTable#oApi\n     */\n    function _fnMap(ret, src, name, mappedName) {\n        if (Array.isArray(name)) {\n            $.each(name, function(i, val) {\n                if (Array.isArray(val)) {\n                    _fnMap(ret, src, val[0], val[1]);\n                } else {\n                    _fnMap(ret, src, val);\n                }\n            });\n\n            return;\n        }\n\n        if (mappedName === undefined) {\n            mappedName = name;\n        }\n\n        if (src[name] !== undefined) {\n            ret[mappedName] = src[name];\n        }\n    }\n\n\n    /**\n     * Extend objects - very similar to jQuery.extend, but deep copy objects, and\n     * shallow copy arrays. The reason we need to do this, is that we don't want to\n     * deep copy array init values (such as aaSorting) since the dev wouldn't be\n     * able to override them, but we do want to deep copy arrays.\n     *  @param {object} out Object to extend\n     *  @param {object} extender Object from which the properties will be applied to\n     *      out\n     *  @param {boolean} breakRefs If true, then arrays will be sliced to take an\n     *      independent copy with the exception of the `data` or `aaData` parameters\n     *      if they are present. This is so you can pass in a collection to\n     *      DataTables and have that used as your data source without breaking the\n     *      references\n     *  @returns {object} out Reference, just for convenience - out === the return.\n     *  @memberof DataTable#oApi\n     *  @todo This doesn't take account of arrays inside the deep copied objects.\n     */\n    function _fnExtend(out, extender, breakRefs) {\n        var val;\n\n        for (var prop in extender) {\n            if (Object.prototype.hasOwnProperty.call(extender, prop)) {\n                val = extender[prop];\n\n                if ($.isPlainObject(val)) {\n                    if (!$.isPlainObject(out[prop])) {\n                        out[prop] = {};\n                    }\n                    $.extend(true, out[prop], val);\n                } else if (breakRefs && prop !== 'data' && prop !== 'aaData' && Array.isArray(val)) {\n                    out[prop] = val.slice();\n                } else {\n                    out[prop] = val;\n                }\n            }\n        }\n\n        return out;\n    }\n\n\n    /**\n     * Bind an event handers to allow a click or return key to activate the callback.\n     * This is good for accessibility since a return on the keyboard will have the\n     * same effect as a click, if the element has focus.\n     *  @param {element} n Element to bind the action to\n     *  @param {object|string} selector Selector (for delegated events) or data object\n     *   to pass to the triggered function\n     *  @param {function} fn Callback function for when the event is triggered\n     *  @memberof DataTable#oApi\n     */\n    function _fnBindAction(n, selector, fn) {\n        $(n)\n            .on('click.DT', selector, function(e) {\n                fn(e);\n            })\n            .on('keypress.DT', selector, function(e) {\n                if (e.which === 13) {\n                    e.preventDefault();\n                    fn(e);\n                }\n            })\n            .on('selectstart.DT', selector, function() {\n                // Don't want a double click resulting in text selection\n                return false;\n            });\n    }\n\n\n    /**\n     * Register a callback function. Easily allows a callback function to be added to\n     * an array store of callback functions that can then all be called together.\n     *  @param {object} settings dataTables settings object\n     *  @param {string} store Name of the array storage for the callbacks in oSettings\n     *  @param {function} fn Function to be called back\n     *  @memberof DataTable#oApi\n     */\n    function _fnCallbackReg(settings, store, fn) {\n        if (fn) {\n            settings[store].push(fn);\n        }\n    }\n\n\n    /**\n     * Fire callback functions and trigger events. Note that the loop over the\n     * callback array store is done backwards! Further note that you do not want to\n     * fire off triggers in time sensitive applications (for example cell creation)\n     * as its slow.\n     *  @param {object} settings dataTables settings object\n     *  @param {string} callbackArr Name of the array storage for the callbacks in\n     *      oSettings\n     *  @param {string} eventName Name of the jQuery custom event to trigger. If\n     *      null no trigger is fired\n     *  @param {array} args Array of arguments to pass to the callback function /\n     *      trigger\n     *  @param {boolean} [bubbles] True if the event should bubble\n     *  @memberof DataTable#oApi\n     */\n    function _fnCallbackFire(settings, callbackArr, eventName, args, bubbles) {\n        var ret = [];\n\n        if (callbackArr) {\n            ret = settings[callbackArr].slice().reverse().map(function(val) {\n                return val.apply(settings.oInstance, args);\n            });\n        }\n\n        if (eventName !== null) {\n            var e = $.Event(eventName + '.dt');\n            var table = $(settings.nTable);\n\n            // Expose the DataTables API on the event object for easy access\n            e.dt = settings.api;\n\n            table[bubbles ? 'trigger' : 'triggerHandler'](e, args);\n\n            // If not yet attached to the document, trigger the event\n            // on the body directly to sort of simulate the bubble\n            if (bubbles && table.parents('body').length === 0) {\n                $('body').trigger(e, args);\n            }\n\n            ret.push(e.result);\n        }\n\n        return ret;\n    }\n\n\n    /**\n     * @param settings\n     */\n    function _fnLengthOverflow(settings) {\n        var\n            start = settings._iDisplayStart,\n            end = settings.fnDisplayEnd(),\n            len = settings._iDisplayLength;\n\n        /* If we have space to show extra rows (backing up from the end point - then do so */\n        if (start >= end) {\n            start = end - len;\n        }\n\n        // Keep the start record on the current page\n        start -= (start % len);\n\n        if (len === -1 || start < 0) {\n            start = 0;\n        }\n\n        settings._iDisplayStart = start;\n    }\n\n\n    /**\n     * @param settings\n     * @param type\n     */\n    function _fnRenderer(settings, type) {\n        var renderer = settings.renderer;\n        var host = DataTable.ext.renderer[type];\n\n        if ($.isPlainObject(renderer) && renderer[type]) {\n            // Specific renderer for this type. If available use it, otherwise use\n            // the default.\n            return host[renderer[type]] || host._;\n        } else if (typeof renderer === 'string') {\n            // Common renderer - if there is one available for this type use it,\n            // otherwise use the default\n            return host[renderer] || host._;\n        }\n\n        // Use the default\n        return host._;\n    }\n\n\n    /**\n     * Detect the data source being used for the table. Used to simplify the code\n     * a little (ajax) and to make it compress a little smaller.\n     *\n     *  @param {object} settings dataTables settings object\n     *  @returns {string} Data source\n     *  @memberof DataTable#oApi\n     */\n    function _fnDataSource(settings) {\n        if (settings.oFeatures.bServerSide) {\n            return 'ssp';\n        } else if (settings.ajax) {\n            return 'ajax';\n        }\n        return 'dom';\n    }\n\n    /**\n     * Common replacement for language strings\n     *\n     * @param {*} settings DT settings object\n     * @param {*} str String with values to replace\n     * @param {*} entries Plural number for _ENTRIES_ - can be undefined\n     * @returns String\n     */\n    function _fnMacros(settings, str, entries) {\n        // When infinite scrolling, we are always starting at 1. _iDisplayStart is\n        // used only internally\n        var\n            formatter = settings.fnFormatNumber,\n            start = settings._iDisplayStart + 1,\n            len = settings._iDisplayLength,\n            vis = settings.fnRecordsDisplay(),\n            max = settings.fnRecordsTotal(),\n            all = len === -1;\n\n        return str.\n            replace(/_START_/g, formatter.call(settings, start)).\n            replace(/_END_/g, formatter.call(settings, settings.fnDisplayEnd())).\n            replace(/_MAX_/g, formatter.call(settings, max)).\n            replace(/_TOTAL_/g, formatter.call(settings, vis)).\n            replace(/_PAGE_/g, formatter.call(settings, all ? 1 : Math.ceil(start / len))).\n            replace(/_PAGES_/g, formatter.call(settings, all ? 1 : Math.ceil(vis / len))).\n            replace(/_ENTRIES_/g, settings.api.i18n('entries', '', entries)).\n            replace(/_ENTRIES-MAX_/g, settings.api.i18n('entries', '', max)).\n            replace(/_ENTRIES-TOTAL_/g, settings.api.i18n('entries', '', vis));\n    }\n\n\n    /**\n     * Computed structure of the DataTables API, defined by the options passed to\n     * `DataTable.Api.register()` when building the API.\n     *\n     * The structure is built in order to speed creation and extension of the Api\n     * objects since the extensions are effectively pre-parsed.\n     *\n     * The array is an array of objects with the following structure, where this\n     * base array represents the Api prototype base:\n     *\n     *     [\n     *       {\n     *         name:      'data'                -- string   - Property name\n     *         val:       function () {},       -- function - Api method (or undefined if just an object\n     *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\n     *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\n     *       },\n     *       {\n     *         name:     'row'\n     *         val:       {},\n     *         methodExt: [ ... ],\n     *         propExt:   [\n     *           {\n     *             name:      'data'\n     *             val:       function () {},\n     *             methodExt: [ ... ],\n     *             propExt:   [ ... ]\n     *           },\n     *           ...\n     *         ]\n     *       }\n     *     ]\n     *\n     * @type {Array}\n     * @ignore\n     */\n    var __apiStruct = [];\n\n\n    /**\n     * `Array.prototype` reference.\n     *\n     * @type object\n     * @ignore\n     */\n    var __arrayProto = Array.prototype;\n\n\n    /**\n     * Abstraction for `context` parameter of the `Api` constructor to allow it to\n     * take several different forms for ease of use.\n     *\n     * Each of the input parameter types will be converted to a DataTables settings\n     * object where possible.\n     *\n     * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one\n     *   of:\n     *\n     *   * `string` - jQuery selector. Any DataTables' matching the given selector\n     *     with be found and used.\n     *   * `node` - `TABLE` node which has already been formed into a DataTable.\n     *   * `jQuery` - A jQuery object of `TABLE` nodes.\n     *   * `object` - DataTables settings object\n     *   * `DataTables.Api` - API instance\n     * @return {array|null} Matching DataTables settings objects. `null` or\n     *   `undefined` is returned if no matching DataTable is found.\n     * @ignore\n     */\n    var _toSettings = function(mixed) {\n        var idx, jq;\n        var settings = DataTable.settings;\n        var tables = _pluck(settings, 'nTable');\n\n        if (!mixed) {\n            return [];\n        } else if (mixed.nTable && mixed.oFeatures) {\n            // DataTables settings object\n            return [mixed];\n        } else if (mixed.nodeName && mixed.nodeName.toLowerCase() === 'table') {\n            // Table node\n            idx = tables.indexOf(mixed);\n            return idx !== -1 ? [settings[idx]] : null;\n        } else if (mixed && typeof mixed.settings === 'function') {\n            return mixed.settings().toArray();\n        } else if (typeof mixed === 'string') {\n            // JQuery selector\n            jq = $(mixed).get();\n        } else if (mixed instanceof $) {\n            // JQuery object (also DataTables instance)\n            jq = mixed.get();\n        }\n\n        if (jq) {\n            return settings.filter(function(v, idx) {\n                return jq.includes(tables[idx]);\n            });\n        }\n    };\n\n\n    /**\n     * DataTables API class - used to control and interface with  one or more\n     * DataTables enhanced tables.\n     *\n     * The API class is heavily based on jQuery, presenting a chainable interface\n     * that you can use to interact with tables. Each instance of the API class has\n     * a \"context\" - i.e. the tables that it will operate on. This could be a single\n     * table, all tables on a page or a sub-set thereof.\n     *\n     * Additionally the API is designed to allow you to easily work with the data in\n     * the tables, retrieving and manipulating it as required. This is done by\n     * presenting the API class as an array like interface. The contents of the\n     * array depend upon the actions requested by each method (for example\n     * `rows().nodes()` will return an array of nodes, while `rows().data()` will\n     * return an array of objects or arrays depending upon your table's\n     * configuration). The API object has a number of array like methods (`push`,\n     * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,\n     * `unique` etc) to assist your working with the data held in a table.\n     *\n     * Most methods (those which return an Api instance) are chainable, which means\n     * the return from a method call also has all of the methods available that the\n     * top level object had. For example, these two calls are equivalent:\n     *\n     *     // Not chained\n     *     api.row.add( {...} );\n     *     api.draw();\n     *\n     *     // Chained\n     *     api.row.add( {...} ).draw();\n     *\n     * @class DataTable.Api\n     * @param {array|object|string|jQuery} context DataTable identifier. This is\n     *   used to define which DataTables enhanced tables this API will operate on.\n     *   Can be one of:\n     *\n     *   * `string` - jQuery selector. Any DataTables' matching the given selector\n     *     with be found and used.\n     *   * `node` - `TABLE` node which has already been formed into a DataTable.\n     *   * `jQuery` - A jQuery object of `TABLE` nodes.\n     *   * `object` - DataTables settings object\n     * @param {array} [data] Data to initialise the Api instance with.\n     *\n     * @example\n     *   // Direct initialisation during DataTables construction\n     *   var api = $('#example').DataTable();\n     *\n     * @example\n     *   // Initialisation using a DataTables jQuery object\n     *   var api = $('#example').dataTable().api();\n     *\n     * @example\n     *   // Initialisation as a constructor\n     *   var api = new DataTable.Api( 'table.dataTable' );\n     */\n    _Api = function(context, data) {\n        if (!(this instanceof _Api)) {\n            return new _Api(context, data);\n        }\n\n        var settings = [];\n        var ctxSettings = function(o) {\n            var a = _toSettings(o);\n            if (a) {\n                settings.push.apply(settings, a);\n            }\n        };\n\n        if (Array.isArray(context)) {\n            for (var i = 0, ien = context.length; i < ien; i++) {\n                ctxSettings(context[i]);\n            }\n        } else {\n            ctxSettings(context);\n        }\n\n        // Remove duplicates\n        this.context = settings.length > 1\n            ? _unique(settings)\n            : settings;\n\n        // Initial data\n        if (data) {\n            this.push.apply(this, data);\n        }\n\n        // Selector\n        this.selector = {\n            rows: null,\n            cols: null,\n            opts: null\n        };\n\n        _Api.extend(this, this, __apiStruct);\n    };\n\n    DataTable.Api = _Api;\n\n    // Don't destroy the existing prototype, just extend it. Required for jQuery 2's\n    // isPlainObject.\n    $.extend(_Api.prototype, {\n        any: function() {\n            return this.count() !== 0;\n        },\n\n        context: [], // Array of table settings objects\n\n        count: function() {\n            return this.flatten().length;\n        },\n\n        each: function(fn) {\n            for (var i = 0, ien = this.length; i < ien; i++) {\n                fn.call(this, this[i], i, this);\n            }\n\n            return this;\n        },\n\n        eq: function(idx) {\n            var ctx = this.context;\n\n            return ctx.length > idx ?\n                new _Api(ctx[idx], this[idx]) :\n                null;\n        },\n\n        filter: function(fn) {\n            var a = __arrayProto.filter.call(this, fn, this);\n\n            return new _Api(this.context, a);\n        },\n\n        flatten: function() {\n            var a = [];\n\n            return new _Api(this.context, a.concat.apply(a, this.toArray()));\n        },\n\n        get: function(idx) {\n            return this[idx];\n        },\n\n        join: __arrayProto.join,\n\n        includes: function(find) {\n            return this.indexOf(find) === -1 ? false : true;\n        },\n\n        indexOf: __arrayProto.indexOf,\n\n        iterator: function(flatten, type, fn, alwaysNew) {\n            var\n                a = [],\nret,\n                i, ien, j, jen,\n                context = this.context,\n                rows, items, item,\n                selector = this.selector;\n\n            // Argument shifting\n            if (typeof flatten === 'string') {\n                alwaysNew = fn;\n                fn = type;\n                type = flatten;\n                flatten = false;\n            }\n\n            for (i = 0, ien = context.length; i < ien; i++) {\n                var apiInst = new _Api(context[i]);\n\n                if (type === 'table') {\n                    ret = fn.call(apiInst, context[i], i);\n\n                    if (ret !== undefined) {\n                        a.push(ret);\n                    }\n                } else if (type === 'columns' || type === 'rows') {\n                    // This has same length as context - one entry for each table\n                    ret = fn.call(apiInst, context[i], this[i], i);\n\n                    if (ret !== undefined) {\n                        a.push(ret);\n                    }\n                } else if (type === 'every' || type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell') {\n                    // Columns and rows share the same structure.\n                    // 'this' is an array of column indexes for each context\n                    items = this[i];\n\n                    if (type === 'column-rows') {\n                        rows = _selector_row_indexes(context[i], selector.opts);\n                    }\n\n                    for (j = 0, jen = items.length; j < jen; j++) {\n                        item = items[j];\n\n                        if (type === 'cell') {\n                            ret = fn.call(apiInst, context[i], item.row, item.column, i, j);\n                        } else {\n                            ret = fn.call(apiInst, context[i], item, i, j, rows);\n                        }\n\n                        if (ret !== undefined) {\n                            a.push(ret);\n                        }\n                    }\n                }\n            }\n\n            if (a.length || alwaysNew) {\n                var api = new _Api(context, flatten ? a.concat.apply([], a) : a);\n                var apiSelector = api.selector;\n                apiSelector.rows = selector.rows;\n                apiSelector.cols = selector.cols;\n                apiSelector.opts = selector.opts;\n                return api;\n            }\n            return this;\n        },\n\n        lastIndexOf: __arrayProto.lastIndexOf,\n\n        length: 0,\n\n        map: function(fn) {\n            var a = __arrayProto.map.call(this, fn, this);\n\n            return new _Api(this.context, a);\n        },\n\n        pluck: function(prop) {\n            var fn = DataTable.util.get(prop);\n\n            return this.map(function(el) {\n                return fn(el);\n            });\n        },\n\n        pop: __arrayProto.pop,\n\n        push: __arrayProto.push,\n\n        reduce: __arrayProto.reduce,\n\n        reduceRight: __arrayProto.reduceRight,\n\n        reverse: __arrayProto.reverse,\n\n        // Object with rows, columns and opts\n        selector: null,\n\n        shift: __arrayProto.shift,\n\n        slice: function() {\n            return new _Api(this.context, this);\n        },\n\n        sort: __arrayProto.sort,\n\n        splice: __arrayProto.splice,\n\n        toArray: function() {\n            return __arrayProto.slice.call(this);\n        },\n\n        to$: function() {\n            return $(this);\n        },\n\n        toJQuery: function() {\n            return $(this);\n        },\n\n        unique: function() {\n            return new _Api(this.context, _unique(this.toArray()));\n        },\n\n        unshift: __arrayProto.unshift\n    });\n\n\n    /**\n     * @param scope\n     * @param fn\n     * @param struc\n     */\n    function _api_scope(scope, fn, struc) {\n        return function() {\n            var ret = fn.apply(scope || this, arguments);\n\n            // Method extension\n            _Api.extend(ret, ret, struc.methodExt);\n            return ret;\n        };\n    }\n\n    /**\n     * @param src\n     * @param name\n     */\n    function _api_find(src, name) {\n        for (var i = 0, ien = src.length; i < ien; i++) {\n            if (src[i].name === name) {\n                return src[i];\n            }\n        }\n        return null;\n    }\n\n    window.__apiStruct = __apiStruct;\n\n    _Api.extend = function(scope, obj, ext) {\n        // Only extend API instances and static properties of the API\n        if (!ext.length || !obj || (!(obj instanceof _Api) && !obj.__dt_wrapper)) {\n            return;\n        }\n\n        var\n            i, ien,\n            struct;\n\n        for (i = 0, ien = ext.length; i < ien; i++) {\n            struct = ext[i];\n\n            // Value\n            obj[struct.name] = struct.type === 'function' ?\n                _api_scope(scope, struct.val, struct) :\n                struct.type === 'object' ?\n                    {} :\n                    struct.val;\n\n            obj[struct.name].__dt_wrapper = true;\n\n            // Property extension\n            _Api.extend(scope, obj[struct.name], struct.propExt);\n        }\n    };\n\n    //     [\n    //       {\n    //         name:      'data'                -- string   - Property name\n    //         val:       function () {},       -- function - Api method (or undefined if just an object\n    //         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\n    //         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\n    //       },\n    //       {\n    //         name:     'row'\n    //         val:       {},\n    //         methodExt: [ ... ],\n    //         propExt:   [\n    //           {\n    //             name:      'data'\n    //             val:       function () {},\n    //             methodExt: [ ... ],\n    //             propExt:   [ ... ]\n    //           },\n    //           ...\n    //         ]\n    //       }\n    //     ]\n\n\n    _Api.register = _api_register = function(name, val) {\n        if (Array.isArray(name)) {\n            for (var j = 0, jen = name.length; j < jen; j++) {\n                _Api.register(name[j], val);\n            }\n            return;\n        }\n\n        var\n            i, ien,\n            heir = name.split('.'),\n            struct = __apiStruct,\n            key, method;\n\n        for (i = 0, ien = heir.length; i < ien; i++) {\n            method = heir[i].indexOf('()') !== -1;\n            key = method ?\n                heir[i].replace('()', '') :\n                heir[i];\n\n            var src = _api_find(struct, key);\n            if (!src) {\n                src = {\n                    name: key,\n                    val: {},\n                    methodExt: [],\n                    propExt: [],\n                    type: 'object'\n                };\n                struct.push(src);\n            }\n\n            if (i === ien - 1) {\n                src.val = val;\n                src.type = typeof val === 'function' ?\n                    'function' :\n                    $.isPlainObject(val) ?\n                        'object' :\n                        'other';\n            } else {\n                struct = method ?\n                    src.methodExt :\n                    src.propExt;\n            }\n        }\n    };\n\n    _Api.registerPlural = _api_registerPlural = function(pluralName, singularName, val) {\n        _Api.register(pluralName, val);\n\n        _Api.register(singularName, function() {\n            var ret = val.apply(this, arguments);\n\n            if (ret === this) {\n                // Returned item is the API instance that was passed in, return it\n                return this;\n            } else if (ret instanceof _Api) {\n                // New API instance returned, want the value from the first item\n                // in the returned array for the singular result.\n                return ret.length ?\n                    Array.isArray(ret[0]) ?\n                        new _Api(ret.context, ret[0]) : // Array results are 'enhanced'\n                        ret[0] :\n                    undefined;\n            }\n\n            // Non-API return - just fire it back\n            return ret;\n        });\n    };\n\n\n    /**\n     * Selector for HTML tables. Apply the given selector to the give array of\n     * DataTables settings objects.\n     *\n     * @param {string|integer} [selector] jQuery selector string or integer\n     * @param  {array} Array of DataTables settings objects to be filtered\n     * @return {array}\n     * @ignore\n     */\n    var __table_selector = function(selector, a) {\n        if (Array.isArray(selector)) {\n            var result = [];\n\n            selector.forEach(function(sel) {\n                var inner = __table_selector(sel, a);\n\n                result.push.apply(result, inner);\n            });\n\n            return result.filter(function(item) {\n                return item;\n            });\n        }\n\n        // Integer is used to pick out a table by index\n        if (typeof selector === 'number') {\n            return [a[selector]];\n        }\n\n        // Perform a jQuery selector on the table nodes\n        var nodes = a.map(function(el) {\n            return el.nTable;\n        });\n\n        return $(nodes)\n            .filter(selector)\n            .map(function() {\n                // Need to translate back from the table node to the settings\n                var idx = nodes.indexOf(this);\n                return a[idx];\n            })\n            .toArray();\n    };\n\n\n    /**\n     * Context selector for the API's context (i.e. the tables the API instance\n     * refers to.\n     *\n     * @name    DataTable.Api#tables\n     * @param {string|integer} [selector] Selector to pick which tables the iterator\n     *   should operate on. If not given, all tables in the current context are\n     *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to\n     *   select multiple tables or as an integer to select a single table.\n     * @returns {DataTable.Api} Returns a new API instance if a selector is given.\n     */\n    _api_register('tables()', function(selector) {\n        // A new instance is created if there was a selector specified\n        return selector !== undefined && selector !== null ?\n            new _Api(__table_selector(selector, this.context)) :\n            this;\n    });\n\n\n    _api_register('table()', function(selector) {\n        var tables = this.tables(selector);\n        var ctx = tables.context;\n\n        // Truncate to the first matched table\n        return ctx.length ?\n            new _Api(ctx[0]) :\n            tables;\n    });\n\n    // Common methods, combined to reduce size\n    [\n        ['nodes', 'node', 'nTable'],\n        ['body', 'body', 'nTBody'],\n        ['header', 'header', 'nTHead'],\n        ['footer', 'footer', 'nTFoot'],\n    ].forEach(function(item) {\n        _api_registerPlural(\n            'tables().' + item[0] + '()',\n            'table().' + item[1] + '()',\n            function() {\n                return this.iterator('table', function(ctx) {\n                    return ctx[item[2]];\n                }, 1);\n            }\n        );\n    });\n\n    // Structure methods\n    [\n        ['header', 'aoHeader'],\n        ['footer', 'aoFooter'],\n    ].forEach(function(item) {\n        _api_register('table().' + item[0] + '.structure()', function(selector) {\n            var indexes = this.columns(selector).indexes().flatten();\n            var ctx = this.context[0];\n\n            return _fnHeaderLayout(ctx, ctx[item[1]], indexes);\n        });\n    });\n\n\n    _api_registerPlural('tables().containers()', 'table().container()', function() {\n        return this.iterator('table', function(ctx) {\n            return ctx.nTableWrapper;\n        }, 1);\n    });\n\n    _api_register('tables().every()', function(fn) {\n        var that = this;\n\n        return this.iterator('table', function(s, i) {\n            fn.call(that.table(i), i);\n        });\n    });\n\n    _api_register('caption()', function(value, side) {\n        var context = this.context;\n\n        // Getter - return existing node's content\n        if (value === undefined) {\n            var caption = context[0].captionNode;\n\n            return caption && context.length ?\n                caption.innerHTML :\n                null;\n        }\n\n        return this.iterator('table', function(ctx) {\n            var table = $(ctx.nTable);\n            var caption = $(ctx.captionNode);\n            var container = $(ctx.nTableWrapper);\n\n            // Create the node if it doesn't exist yet\n            if (!caption.length) {\n                caption = $('<caption/>').html(value);\n                ctx.captionNode = caption[0];\n\n                // If side isn't set, we need to insert into the document to let the\n                // CSS decide so we can read it back, otherwise there is no way to\n                // know if the CSS would put it top or bottom for scrolling\n                if (!side) {\n                    table.prepend(caption);\n\n                    side = caption.css('caption-side');\n                }\n            }\n\n            caption.html(value);\n\n            if (side) {\n                caption.css('caption-side', side);\n                caption[0]._captionSide = side;\n            }\n\n            if (container.find('div.dataTables_scroll').length) {\n                var selector = (side === 'top' ? 'Head' : 'Foot');\n\n                container.find('div.dataTables_scroll' + selector + ' table').prepend(caption);\n            } else {\n                table.prepend(caption);\n            }\n        }, 1);\n    });\n\n    _api_register('caption.node()', function() {\n        var ctx = this.context;\n\n        return ctx.length ? ctx[0].captionNode : null;\n    });\n\n\n    /**\n     * Redraw the tables in the current context.\n     */\n    _api_register('draw()', function(paging) {\n        return this.iterator('table', function(settings) {\n            if (paging === 'page') {\n                _fnDraw(settings);\n            } else {\n                if (typeof paging === 'string') {\n                    paging = paging === 'full-hold' ?\n                        false :\n                        true;\n                }\n\n                _fnReDraw(settings, paging === false);\n            }\n        });\n    });\n\n\n    /**\n     * Get the current page index.\n     *\n     * @return {integer} Current page index (zero based)\n     *//**\n        * Set the current page.\n        *\n        * Note that if you attempt to show a page which does not exist, DataTables will\n        * not throw an error, but rather reset the paging.\n        *\n        * @param {integer|string} action The paging action to take. This can be one of:\n        *  * `integer` - The page index to jump to\n        *  * `string` - An action to take:\n        *    * `first` - Jump to first page.\n        *    * `next` - Jump to the next page\n        *    * `previous` - Jump to previous page\n        *    * `last` - Jump to the last page.\n        * @returns {DataTables.Api} this\n        */\n    _api_register('page()', function(action) {\n        if (action === undefined) {\n            return this.page.info().page; // Not an expensive call\n        }\n\n        // Else, have an action to take on all tables\n        return this.iterator('table', function(settings) {\n            _fnPageChange(settings, action);\n        });\n    });\n\n\n    /**\n     * Paging information for the first table in the current context.\n     *\n     * If you require paging information for another table, use the `table()` method\n     * with a suitable selector.\n     *\n     * @return {object} Object with the following properties set:\n     *  * `page` - Current page index (zero based - i.e. the first page is `0`)\n     *  * `pages` - Total number of pages\n     *  * `start` - Display index for the first record shown on the current page\n     *  * `end` - Display index for the last record shown on the current page\n     *  * `length` - Display length (number of records). Note that generally `start\n     *    + length = end`, but this is not always true, for example if there are\n     *    only 2 records to show on the final page, with a length of 10.\n     *  * `recordsTotal` - Full data set length\n     *  * `recordsDisplay` - Data set length once the current filtering criterion\n     *    are applied.\n     */\n    _api_register('page.info()', function() {\n        if (this.context.length === 0) {\n            return undefined;\n        }\n\n        var\n            settings = this.context[0],\n            start = settings._iDisplayStart,\n            len = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1,\n            visRecords = settings.fnRecordsDisplay(),\n            all = len === -1;\n\n        return {\n            \"page\": all ? 0 : Math.floor(start / len),\n            \"pages\": all ? 1 : Math.ceil(visRecords / len),\n            \"start\": start,\n            \"end\": settings.fnDisplayEnd(),\n            \"length\": len,\n            \"recordsTotal\": settings.fnRecordsTotal(),\n            \"recordsDisplay\": visRecords,\n            \"serverSide\": _fnDataSource(settings) === 'ssp'\n        };\n    });\n\n\n    /**\n     * Get the current page length.\n     *\n     * @return {integer} Current page length. Note `-1` indicates that all records\n     *   are to be shown.\n     *//**\n        * Set the current page length.\n        *\n        * @param {integer} Page length to set. Use `-1` to show all records.\n        * @returns {DataTables.Api} this\n        */\n    _api_register('page.len()', function(len) {\n        // Note that we can't call this function 'length()' because `length`\n        // is a Javascript property of functions which defines how many arguments\n        // the function expects.\n        if (len === undefined) {\n            return this.context.length !== 0 ?\n                this.context[0]._iDisplayLength :\n                undefined;\n        }\n\n        // Else, set the page length\n        return this.iterator('table', function(settings) {\n            _fnLengthChange(settings, len);\n        });\n    });\n\n\n    var __reload = function(settings, holdPosition, callback) {\n        // Use the draw event to trigger a callback\n        if (callback) {\n            var api = new _Api(settings);\n\n            api.one('draw', function() {\n                callback(api.ajax.json());\n            });\n        }\n\n        if (_fnDataSource(settings) == 'ssp') {\n            _fnReDraw(settings, holdPosition);\n        } else {\n            _fnProcessingDisplay(settings, true);\n\n            // Cancel an existing request\n            var xhr = settings.jqXHR;\n            if (xhr && xhr.readyState !== 4) {\n                xhr.abort();\n            }\n\n            // Trigger xhr\n            _fnBuildAjax(settings, {}, function(json) {\n                _fnClearTable(settings);\n\n                var data = _fnAjaxDataSrc(settings, json);\n                for (var i = 0, ien = data.length; i < ien; i++) {\n                    _fnAddData(settings, data[i]);\n                }\n\n                _fnReDraw(settings, holdPosition);\n                _fnInitComplete(settings);\n                _fnProcessingDisplay(settings, false);\n            });\n        }\n    };\n\n\n    /**\n     * Get the JSON response from the last Ajax request that DataTables made to the\n     * server. Note that this returns the JSON from the first table in the current\n     * context.\n     *\n     * @return {object} JSON received from the server.\n     */\n    _api_register('ajax.json()', function() {\n        var ctx = this.context;\n\n        if (ctx.length > 0) {\n            return ctx[0].json;\n        }\n\n        // Else return undefined;\n    });\n\n\n    /**\n     * Get the data submitted in the last Ajax request\n     */\n    _api_register('ajax.params()', function() {\n        var ctx = this.context;\n\n        if (ctx.length > 0) {\n            return ctx[0].oAjaxData;\n        }\n\n        // Else return undefined;\n    });\n\n\n    /**\n     * Reload tables from the Ajax data source. Note that this function will\n     * automatically re-draw the table when the remote data has been loaded.\n     *\n     * @param {boolean} [reset=true] Reset (default) or hold the current paging\n     *   position. A full re-sort and re-filter is performed when this method is\n     *   called, which is why the pagination reset is the default action.\n     * @returns {DataTables.Api} this\n     */\n    _api_register('ajax.reload()', function(callback, resetPaging) {\n        return this.iterator('table', function(settings) {\n            __reload(settings, resetPaging === false, callback);\n        });\n    });\n\n\n    /**\n     * Get the current Ajax URL. Note that this returns the URL from the first\n     * table in the current context.\n     *\n     * @return {string} Current Ajax source URL\n     *//**\n        * Set the Ajax URL. Note that this will set the URL for all tables in the\n        * current context.\n        *\n        * @param {string} url URL to set.\n        * @returns {DataTables.Api} this\n        */\n    _api_register('ajax.url()', function(url) {\n        var ctx = this.context;\n\n        if (url === undefined) {\n            // Get\n            if (ctx.length === 0) {\n                return undefined;\n            }\n            ctx = ctx[0];\n\n            return $.isPlainObject(ctx.ajax) ?\n                ctx.ajax.url :\n                ctx.ajax;\n        }\n\n        // Set\n        return this.iterator('table', function(settings) {\n            if ($.isPlainObject(settings.ajax)) {\n                settings.ajax.url = url;\n            } else {\n                settings.ajax = url;\n            }\n        });\n    });\n\n\n    /**\n     * Load data from the newly set Ajax URL. Note that this method is only\n     * available when `ajax.url()` is used to set a URL. Additionally, this method\n     * has the same effect as calling `ajax.reload()` but is provided for\n     * convenience when setting a new URL. Like `ajax.reload()` it will\n     * automatically redraw the table once the remote data has been loaded.\n     *\n     * @returns {DataTables.Api} this\n     */\n    _api_register('ajax.url().load()', function(callback, resetPaging) {\n        // Same as a reload, but makes sense to present it for easy access after a\n        // url change\n        return this.iterator('table', function(ctx) {\n            __reload(ctx, resetPaging === false, callback);\n        });\n    });\n\n\n    var _selector_run = function(type, selector, selectFn, settings, opts) {\n        var\n            out = [],\nres,\n            a, i, ien, j, jen,\n            selectorType = typeof selector;\n\n        // Can't just check for isArray here, as an API or jQuery instance might be\n        // given with their array like look\n        if (!selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined) {\n            selector = [selector];\n        }\n\n        for (i = 0, ien = selector.length; i < ien; i++) {\n            // Only split on simple strings - complex expressions will be jQuery selectors\n            a = selector[i] && selector[i].split && !selector[i].match(/[[(:]/) ?\n                selector[i].split(',') :\n                [selector[i]];\n\n            for (j = 0, jen = a.length; j < jen; j++) {\n                res = selectFn(typeof a[j] === 'string' ? (a[j]).trim() : a[j]);\n\n                // Remove empty items\n                res = res.filter(function(item) {\n                    return item !== null && item !== undefined;\n                });\n\n                if (res && res.length) {\n                    out = out.concat(res);\n                }\n            }\n        }\n\n        // Selector extensions\n        var ext = _ext.selector[type];\n        if (ext.length) {\n            for (i = 0, ien = ext.length; i < ien; i++) {\n                out = ext[i](settings, opts, out);\n            }\n        }\n\n        return _unique(out);\n    };\n\n\n    var _selector_opts = function(opts) {\n        if (!opts) {\n            opts = {};\n        }\n\n        // Backwards compatibility for 1.9- which used the terminology filter rather\n        // than search\n        if (opts.filter && opts.search === undefined) {\n            opts.search = opts.filter;\n        }\n\n        return $.extend({\n            search: 'none',\n            order: 'current',\n            page: 'all'\n        }, opts);\n    };\n\n\n    // Reduce the API instance to the first item found\n    var _selector_first = function(old) {\n        let inst = new _Api(old.context[0]);\n\n        // Use a push rather than passing to the constructor, since it will\n        // merge arrays down automatically, which isn't what is wanted here\n        if (old.length) {\n            inst.push(old[0]);\n        }\n\n        inst.selector = old.selector;\n\n        // Limit to a single row / column / cell\n        if (inst.length && inst[0].length > 1) {\n            inst[0].splice(1);\n        }\n\n        return inst;\n    };\n\n\n    var _selector_row_indexes = function(settings, opts) {\n        var\n            i, ien, tmp,\na = [],\n            displayFiltered = settings.aiDisplay,\n            displayMaster = settings.aiDisplayMaster;\n\n        var\n            search = opts.search, // None, applied, removed\n            order = opts.order, // Applied, current, index (original - compatibility with 1.9)\n            page = opts.page; // All, current\n\n        if (_fnDataSource(settings) == 'ssp') {\n            // In server-side processing mode, most options are irrelevant since\n            // rows not shown don't exist and the index order is the applied order\n            // Removed is a special case - for consistency just return an empty\n            // array\n            return search === 'removed' ?\n                [] :\n                _range(0, displayMaster.length);\n        } else if (page == 'current') {\n            // Current page implies that order=current and filter=applied, since it is\n            // fairly senseless otherwise, regardless of what order and search actually\n            // are\n            for (i = settings._iDisplayStart, ien = settings.fnDisplayEnd(); i < ien; i++) {\n                a.push(displayFiltered[i]);\n            }\n        } else if (order == 'current' || order == 'applied') {\n            if (search == 'none') {\n                a = displayMaster.slice();\n            } else if (search == 'applied') {\n                a = displayFiltered.slice();\n            } else if (search == 'removed') {\n                // O(n+m) solution by creating a hash map\n                var displayFilteredMap = {};\n\n                for (i = 0, ien = displayFiltered.length; i < ien; i++) {\n                    displayFilteredMap[displayFiltered[i]] = null;\n                }\n\n                displayMaster.forEach(function(item) {\n                    if (!Object.prototype.hasOwnProperty.call(displayFilteredMap, item)) {\n                        a.push(item);\n                    }\n                });\n            }\n        } else if (order == 'index' || order == 'original') {\n            for (i = 0, ien = settings.aoData.length; i < ien; i++) {\n                if (!settings.aoData[i]) {\n                    continue;\n                }\n\n                if (search == 'none') {\n                    a.push(i);\n                } else { // Applied | removed\n                    tmp = displayFiltered.indexOf(i);\n\n                    if ((tmp === -1 && search == 'removed') ||\n                        (tmp >= 0 && search == 'applied')) {\n                        a.push(i);\n                    }\n                }\n            }\n        } else if (typeof order === 'number') {\n            // Order the rows by the given column\n            var ordered = _fnSort(settings, order, 'asc');\n\n            if (search === 'none') {\n                a = ordered;\n            } else { // Applied | removed\n                for (i = 0; i < ordered.length; i++) {\n                    tmp = displayFiltered.indexOf(ordered[i]);\n\n                    if ((tmp === -1 && search == 'removed') ||\n                        (tmp >= 0 && search == 'applied')) {\n                        a.push(ordered[i]);\n                    }\n                }\n            }\n        }\n\n        return a;\n    };\n\n\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Rows\n     *\n     * {}          - no selector - use all available rows\n     * {integer}   - row aoData index\n     * {node}      - TR node\n     * {string}    - jQuery selector to apply to the TR elements\n     * {array}     - jQuery array of nodes, or simply an array of TR nodes\n     *\n     */\n    var __row_selector = function(settings, selector, opts) {\n        var rows;\n        var run = function(sel) {\n            var selInt = _intVal(sel);\n            var aoData = settings.aoData;\n\n            // Short cut - selector is a number and no options provided (default is\n            // all records, so no need to check if the index is in there, since it\n            // must be - dev error if the index doesn't exist).\n            if (selInt !== null && !opts) {\n                return [selInt];\n            }\n\n            if (!rows) {\n                rows = _selector_row_indexes(settings, opts);\n            }\n\n            if (selInt !== null && rows.indexOf(selInt) !== -1) {\n                // Selector - integer\n                return [selInt];\n            } else if (sel === null || sel === undefined || sel === '') {\n                // Selector - none\n                return rows;\n            }\n\n            // Selector - function\n            if (typeof sel === 'function') {\n                return rows.map(function(idx) {\n                    var row = aoData[idx];\n                    return sel(idx, row._aData, row.nTr) ? idx : null;\n                });\n            }\n\n            // Selector - node\n            if (sel.nodeName) {\n                var rowIdx = sel._DT_RowIndex; // Property added by DT for fast lookup\n                var cellIdx = sel._DT_CellIndex;\n\n                if (rowIdx !== undefined) {\n                    // Make sure that the row is actually still present in the table\n                    return aoData[rowIdx] && aoData[rowIdx].nTr === sel ?\n                        [rowIdx] :\n                        [];\n                } else if (cellIdx) {\n                    return aoData[cellIdx.row] && aoData[cellIdx.row].nTr === sel.parentNode ?\n                        [cellIdx.row] :\n                        [];\n                } else {\n                    var host = $(sel).closest('*[data-dt-row]');\n                    return host.length ?\n                        [host.data('dt-row')] :\n                        [];\n                }\n            }\n\n            // ID selector. Want to always be able to select rows by id, regardless\n            // of if the tr element has been created or not, so can't rely upon\n            // jQuery here - hence a custom implementation. This does not match\n            // Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,\n            // but to select it using a CSS selector engine (like Sizzle or\n            // querySelect) it would need to need to be escaped for some characters.\n            // DataTables simplifies this for row selectors since you can select\n            // only a row. A # indicates an id any anything that follows is the id -\n            // unescaped.\n            if (typeof sel === 'string' && sel.charAt(0) === '#') {\n                // Get row index from id\n                var rowObj = settings.aIds[sel.replace(/^#/, '')];\n                if (rowObj !== undefined) {\n                    return [rowObj.idx];\n                }\n\n                // Need to fall through to jQuery in case there is DOM id that\n                // matches\n            }\n\n            // Get nodes in the order from the `rows` array with null values removed\n            var nodes = _removeEmpty(\n                _pluck_order(settings.aoData, rows, 'nTr')\n            );\n\n            // Selector - jQuery selector string, array of nodes or jQuery object/\n            // As jQuery's .filter() allows jQuery objects to be passed in filter,\n            // it also allows arrays, so this will cope with all three options\n            return $(nodes)\n                .filter(sel)\n                .map(function() {\n                    return this._DT_RowIndex;\n                })\n                .toArray();\n        };\n\n        var matched = _selector_run('row', selector, run, settings, opts);\n\n        if (opts.order === 'current' || opts.order === 'applied') {\n            var master = settings.aiDisplayMaster;\n\n            matched.sort(function(a, b) {\n                return master.indexOf(a) - master.indexOf(b);\n            });\n        }\n\n        return matched;\n    };\n\n\n    _api_register('rows()', function(selector, opts) {\n        // Argument shifting\n        if (selector === undefined) {\n            selector = '';\n        } else if ($.isPlainObject(selector)) {\n            opts = selector;\n            selector = '';\n        }\n\n        opts = _selector_opts(opts);\n\n        var inst = this.iterator('table', function(settings) {\n            return __row_selector(settings, selector, opts);\n        }, 1);\n\n        // Want argument shifting here and in __row_selector?\n        inst.selector.rows = selector;\n        inst.selector.opts = opts;\n\n        return inst;\n    });\n\n    _api_register('rows().nodes()', function() {\n        return this.iterator('row', function(settings, row) {\n            return settings.aoData[row].nTr || undefined;\n        }, 1);\n    });\n\n    _api_register('rows().data()', function() {\n        return this.iterator(true, 'rows', function(settings, rows) {\n            return _pluck_order(settings.aoData, rows, '_aData');\n        }, 1);\n    });\n\n    _api_registerPlural('rows().cache()', 'row().cache()', function(type) {\n        return this.iterator('row', function(settings, row) {\n            var r = settings.aoData[row];\n            return type === 'search' ? r._aFilterData : r._aSortData;\n        }, 1);\n    });\n\n    _api_registerPlural('rows().invalidate()', 'row().invalidate()', function(src) {\n        return this.iterator('row', function(settings, row) {\n            _fnInvalidate(settings, row, src);\n        });\n    });\n\n    _api_registerPlural('rows().indexes()', 'row().index()', function() {\n        return this.iterator('row', function(settings, row) {\n            return row;\n        }, 1);\n    });\n\n    _api_registerPlural('rows().ids()', 'row().id()', function(hash) {\n        var a = [];\n        var context = this.context;\n\n        // `iterator` will drop undefined values, but in this case we want them\n        for (var i = 0, ien = context.length; i < ien; i++) {\n            for (var j = 0, jen = this[i].length; j < jen; j++) {\n                var id = context[i].rowIdFn(context[i].aoData[this[i][j]]._aData);\n                a.push((hash === true ? '#' : '') + id);\n            }\n        }\n\n        return new _Api(context, a);\n    });\n\n    _api_registerPlural('rows().remove()', 'row().remove()', function() {\n        this.iterator('row', function(settings, row) {\n            var data = settings.aoData;\n            var rowData = data[row];\n\n            // Delete from the display arrays\n            var idx = settings.aiDisplayMaster.indexOf(row);\n            if (idx !== -1) {\n                settings.aiDisplayMaster.splice(idx, 1);\n            }\n\n            idx = settings.aiDisplay.indexOf(row);\n            if (idx !== -1) {\n                settings.aiDisplay.splice(idx, 1);\n            }\n\n            // For server-side processing tables - subtract the deleted row from the count\n            if (settings._iRecordsDisplay > 0) {\n                settings._iRecordsDisplay--;\n            }\n\n            // Check for an 'overflow' they case for displaying the table\n            _fnLengthOverflow(settings);\n\n            // Remove the row's ID reference if there is one\n            var id = settings.rowIdFn(rowData._aData);\n            if (id !== undefined) {\n                delete settings.aIds[id];\n            }\n\n            data[row] = null;\n        });\n\n        return this;\n    });\n\n\n    _api_register('rows.add()', function(rows) {\n        var newRows = this.iterator('table', function(settings) {\n            var row, i, ien;\n            var out = [];\n\n            for (i = 0, ien = rows.length; i < ien; i++) {\n                row = rows[i];\n\n                if (row.nodeName && row.nodeName.toUpperCase() === 'TR') {\n                    out.push(_fnAddTr(settings, row)[0]);\n                } else {\n                    out.push(_fnAddData(settings, row));\n                }\n            }\n\n            return out;\n        }, 1);\n\n        // Return an Api.rows() extended instance, so rows().nodes() etc can be used\n        var modRows = this.rows(-1);\n        modRows.pop();\n        modRows.push.apply(modRows, newRows);\n\n        return modRows;\n    });\n\n\n    /**\n     *\n     */\n    _api_register('row()', function(selector, opts) {\n        return _selector_first(this.rows(selector, opts));\n    });\n\n\n    _api_register('row().data()', function(data) {\n        var ctx = this.context;\n\n        if (data === undefined) {\n            // Get\n            return ctx.length && this.length && this[0].length ?\n                ctx[0].aoData[this[0]]._aData :\n                undefined;\n        }\n\n        // Set\n        var row = ctx[0].aoData[this[0]];\n        row._aData = data;\n\n        // If the DOM has an id, and the data source is an array\n        if (Array.isArray(data) && row.nTr && row.nTr.id) {\n            _fnSetObjectDataFn(ctx[0].rowId)(data, row.nTr.id);\n        }\n\n        // Automatically invalidate\n        _fnInvalidate(ctx[0], this[0], 'data');\n\n        return this;\n    });\n\n\n    _api_register('row().node()', function() {\n        var ctx = this.context;\n\n        return ctx.length && this.length && this[0].length ?\n            ctx[0].aoData[this[0]].nTr || null :\n            null;\n    });\n\n\n    _api_register('row.add()', function(row) {\n        // Allow a jQuery object to be passed in - only a single row is added from\n        // it though - the first element in the set\n        if (row instanceof $ && row.length) {\n            row = row[0];\n        }\n\n        var rows = this.iterator('table', function(settings) {\n            if (row.nodeName && row.nodeName.toUpperCase() === 'TR') {\n                return _fnAddTr(settings, row)[0];\n            }\n            return _fnAddData(settings, row);\n        });\n\n        // Return an Api.rows() extended instance, with the newly added row selected\n        return this.row(rows[0]);\n    });\n\n\n    $(document).on('plugin-init.dt', function(e, context) {\n        var api = new _Api(context);\n\n        api.on('stateSaveParams.DT', function(e, settings, d) {\n            // This could be more compact with the API, but it is a lot faster as a simple\n            // internal loop\n            var idFn = settings.rowIdFn;\n            var rows = settings.aiDisplayMaster;\n            var ids = [];\n\n            for (var i = 0; i < rows.length; i++) {\n                var rowIdx = rows[i];\n                var data = settings.aoData[rowIdx];\n\n                if (data._detailsShow) {\n                    ids.push('#' + idFn(data._aData));\n                }\n            }\n\n            d.childRows = ids;\n        });\n\n        // For future state loads (e.g. with StateRestore)\n        api.on('stateLoaded.DT', function(e, settings, state) {\n            __details_state_load(api, state);\n        });\n\n        // And the initial load state\n        __details_state_load(api, api.state.loaded());\n    });\n\n    var __details_state_load = function(api, state) {\n        if (state && state.childRows) {\n            api\n                .rows(state.childRows.map(function(id) {\n                    return id.replace(/:/g, '\\\\:');\n                }))\n                .every(function() {\n                    _fnCallbackFire(api.settings()[0], null, 'requestChild', [this]);\n                });\n        }\n    };\n\n    var __details_add = function(ctx, row, data, klass) {\n        // Convert to array of TR elements\n        var rows = [];\n        var addRow = function(r, k) {\n            // Recursion to allow for arrays of jQuery objects\n            if (Array.isArray(r) || r instanceof $) {\n                for (var i = 0, ien = r.length; i < ien; i++) {\n                    addRow(r[i], k);\n                }\n                return;\n            }\n\n            // If we get a TR element, then just add it directly - up to the dev\n            // to add the correct number of columns etc\n            if (r.nodeName && r.nodeName.toLowerCase() === 'tr') {\n                r.setAttribute('data-dt-row', row.idx);\n                rows.push(r);\n            } else {\n                // Otherwise create a row with a wrapper\n                var created = $('<tr><td></td></tr>')\n                    .attr('data-dt-row', row.idx)\n                    .addClass(k);\n\n                $('td', created)\n                    .addClass(k)\n                    .html(r)[0].colSpan = _fnVisbleColumns(ctx);\n\n                rows.push(created[0]);\n            }\n        };\n\n        addRow(data, klass);\n\n        if (row._details) {\n            row._details.detach();\n        }\n\n        row._details = $(rows);\n\n        // If the children were already shown, that state should be retained\n        if (row._detailsShow) {\n            row._details.insertAfter(row.nTr);\n        }\n    };\n\n\n    // Make state saving of child row details async to allow them to be batch processed\n    var __details_state = DataTable.util.throttle(\n        function(ctx) {\n            _fnSaveState(ctx[0]);\n        },\n        500\n    );\n\n\n    var __details_remove = function(api, idx) {\n        var ctx = api.context;\n\n        if (ctx.length) {\n            var row = ctx[0].aoData[idx !== undefined ? idx : api[0]];\n\n            if (row && row._details) {\n                row._details.remove();\n\n                row._detailsShow = undefined;\n                row._details = undefined;\n                $(row.nTr).removeClass('dt-hasChild');\n                __details_state(ctx);\n            }\n        }\n    };\n\n\n    var __details_display = function(api, show) {\n        var ctx = api.context;\n\n        if (ctx.length && api.length) {\n            var row = ctx[0].aoData[api[0]];\n\n            if (row._details) {\n                row._detailsShow = show;\n\n                if (show) {\n                    row._details.insertAfter(row.nTr);\n                    $(row.nTr).addClass('dt-hasChild');\n                } else {\n                    row._details.detach();\n                    $(row.nTr).removeClass('dt-hasChild');\n                }\n\n                _fnCallbackFire(ctx[0], null, 'childRow', [show, api.row(api[0])]);\n\n                __details_events(ctx[0]);\n                __details_state(ctx);\n            }\n        }\n    };\n\n\n    var __details_events = function(settings) {\n        var api = new _Api(settings);\n        var namespace = '.dt.DT_details';\n        var drawEvent = 'draw' + namespace;\n        var colvisEvent = 'column-sizing' + namespace;\n        var destroyEvent = 'destroy' + namespace;\n        var data = settings.aoData;\n\n        api.off(drawEvent + ' ' + colvisEvent + ' ' + destroyEvent);\n\n        if (_pluck(data, '_details').length > 0) {\n            // On each draw, insert the required elements into the document\n            api.on(drawEvent, function(e, ctx) {\n                if (settings !== ctx) {\n                    return;\n                }\n\n                api.rows({page: 'current'}).eq(0).each(function(idx) {\n                    // Internal data grab\n                    var row = data[idx];\n\n                    if (row._detailsShow) {\n                        row._details.insertAfter(row.nTr);\n                    }\n                });\n            });\n\n            // Column visibility change - update the colspan\n            api.on(colvisEvent, function(e, ctx) {\n                if (settings !== ctx) {\n                    return;\n                }\n\n                // Update the colspan for the details rows (note, only if it already has\n                // a colspan)\n                var row,\nvisible = _fnVisbleColumns(ctx);\n\n                for (var i = 0, ien = data.length; i < ien; i++) {\n                    row = data[i];\n\n                    if (row && row._details) {\n                        row._details.each(function() {\n                            var el = $(this).children('td');\n\n                            if (el.length == 1) {\n                                el.attr('colspan', visible);\n                            }\n                        });\n                    }\n                }\n            });\n\n            // Table destroyed - nuke any child rows\n            api.on(destroyEvent, function(e, ctx) {\n                if (settings !== ctx) {\n                    return;\n                }\n\n                for (var i = 0, ien = data.length; i < ien; i++) {\n                    if (data[i] && data[i]._details) {\n                        __details_remove(api, i);\n                    }\n                }\n            });\n        }\n    };\n\n    // Strings for the method names to help minification\n    var _emp = '';\n    var _child_obj = _emp + 'row().child';\n    var _child_mth = _child_obj + '()';\n\n    // Data can be:\n    //  tr\n    //  string\n    //  jQuery or array of any of the above\n    _api_register(_child_mth, function(data, klass) {\n        var ctx = this.context;\n\n        if (data === undefined) {\n            // Get\n            return ctx.length && this.length && ctx[0].aoData[this[0]]\n                ? ctx[0].aoData[this[0]]._details\n                : undefined;\n        } else if (data === true) {\n            // Show\n            this.child.show();\n        } else if (data === false) {\n            // Remove\n            __details_remove(this);\n        } else if (ctx.length && this.length) {\n            // Set\n            __details_add(ctx[0], ctx[0].aoData[this[0]], data, klass);\n        }\n\n        return this;\n    });\n\n\n    _api_register([\n        _child_obj + '.show()',\n        _child_mth + '.show()' // Only when `child()` was called with parameters (without\n    ], function() { // It returns an object and this method is not executed)\n        __details_display(this, true);\n        return this;\n    });\n\n\n    _api_register([\n        _child_obj + '.hide()',\n        _child_mth + '.hide()' // Only when `child()` was called with parameters (without\n    ], function() { // It returns an object and this method is not executed)\n        __details_display(this, false);\n        return this;\n    });\n\n\n    _api_register([\n        _child_obj + '.remove()',\n        _child_mth + '.remove()' // Only when `child()` was called with parameters (without\n    ], function() { // It returns an object and this method is not executed)\n        __details_remove(this);\n        return this;\n    });\n\n\n    _api_register(_child_obj + '.isShown()', function() {\n        var ctx = this.context;\n\n        if (ctx.length && this.length) {\n            // _detailsShown as false or undefined will fall through to return false\n            return ctx[0].aoData[this[0]]._detailsShow || false;\n        }\n        return false;\n    });\n\n\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Columns\n     *\n     * {integer}           - column index (>=0 count from left, <0 count from right)\n     * \"{integer}:visIdx\"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)\n     * \"{integer}:visible\" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)\n     * \"{string}:name\"     - column name\n     * \"{string}\"          - jQuery selector on column header nodes\n     *\n     */\n\n    // can be an array of these items, comma separated list, or an array of comma\n    // separated lists\n\n    var __re_column_selector = /^([^:]+):(name|title|visIdx|visible)$/;\n\n\n    // R1 and r2 are redundant - but it means that the parameters match for the\n    // iterator callback in columns().data()\n    var __columnData = function(settings, column, r1, r2, rows, type) {\n        var a = [];\n        for (var row = 0, ien = rows.length; row < ien; row++) {\n            a.push(_fnGetCellData(settings, rows[row], column, type));\n        }\n        return a;\n    };\n\n\n    var __column_selector = function(settings, selector, opts) {\n        var\n            columns = settings.aoColumns,\n            names = _pluck(columns, 'sName'),\n            titles = _pluck(columns, 'sTitle'),\n            cells = DataTable.util.get('[].[].cell')(settings.aoHeader),\n            nodes = _unique(_flatten([], cells));\n\n        var run = function(s) {\n            var selInt = _intVal(s);\n\n            // Selector - all\n            if (s === '') {\n                return _range(columns.length);\n            }\n\n            // Selector - index\n            if (selInt !== null) {\n                return [selInt >= 0 ?\n                    selInt : // Count from left\n                    columns.length + selInt // Count from right (+ because its a negative value)\n                ];\n            }\n\n            // Selector = function\n            if (typeof s === 'function') {\n                var rows = _selector_row_indexes(settings, opts);\n\n                return columns.map(function(col, idx) {\n                    return s(\n                        idx,\n                        __columnData(settings, idx, 0, 0, rows)\n                    ) ? idx : null;\n                });\n            }\n\n            // JQuery or string selector\n            var match = typeof s === 'string' ?\n                s.match(__re_column_selector) :\n                '';\n\n            if (match) {\n                switch (match[2]) {\n                    case 'visIdx':\n                    case 'visible':\n                        var idx = parseInt(match[1], 10);\n                        // Visible index given, convert to column index\n                        if (idx < 0) {\n                            // Counting from the right\n                            var visColumns = columns.map(function(col, i) {\n                                return col.bVisible ? i : null;\n                            });\n                            return [visColumns[visColumns.length + idx]];\n                        }\n                        // Counting from the left\n                        return [_fnVisibleToColumnIndex(settings, idx)];\n\n                    case 'name':\n                        // Match by name. `names` is column index complete and in order\n                        return names.map(function(name, i) {\n                            return name === match[1] ? i : null;\n                        });\n\n                    case 'title':\n                        // Match by column title\n                        return titles.map(function(title, i) {\n                            return title === match[1] ? i : null;\n                        });\n\n                    default:\n                        return [];\n                }\n            }\n\n            // Cell in the table body\n            if (s.nodeName && s._DT_CellIndex) {\n                return [s._DT_CellIndex.column];\n            }\n\n            // JQuery selector on the TH elements for the columns\n            var jqResult = $(nodes)\n                .filter(s)\n                .map(function() {\n                    return _fnColumnsFromHeader(this); // `nodes` is column index complete and in order\n                })\n                .toArray();\n\n            if (jqResult.length || !s.nodeName) {\n                return jqResult;\n            }\n\n            // Otherwise a node which might have a `dt-column` data attribute, or be\n            // a child or such an element\n            var host = $(s).closest('*[data-dt-column]');\n            return host.length ?\n                [host.data('dt-column')] :\n                [];\n        };\n\n        return _selector_run('column', selector, run, settings, opts);\n    };\n\n\n    var __setColumnVis = function(settings, column, vis) {\n        var\n            cols = settings.aoColumns,\n            col = cols[column],\n            data = settings.aoData,\n            cells, i, ien, tr;\n\n        // Get\n        if (vis === undefined) {\n            return col.bVisible;\n        }\n\n        // Set\n        // No change\n        if (col.bVisible === vis) {\n            return false;\n        }\n\n        if (vis) {\n            // Insert column\n            // Need to decide if we should use appendChild or insertBefore\n            var insertBefore = _pluck(cols, 'bVisible').indexOf(true, column + 1);\n\n            for (i = 0, ien = data.length; i < ien; i++) {\n                if (data[i]) {\n                    tr = data[i].nTr;\n                    cells = data[i].anCells;\n\n                    if (tr) {\n                        // InsertBefore can act like appendChild if 2nd arg is null\n                        tr.insertBefore(cells[column], cells[insertBefore] || null);\n                    }\n                }\n            }\n        } else {\n            // Remove column\n            $(_pluck(settings.aoData, 'anCells', column)).detach();\n        }\n\n        // Common actions\n        col.bVisible = vis;\n\n        _colGroup(settings);\n\n        return true;\n    };\n\n\n    _api_register('columns()', function(selector, opts) {\n        // Argument shifting\n        if (selector === undefined) {\n            selector = '';\n        } else if ($.isPlainObject(selector)) {\n            opts = selector;\n            selector = '';\n        }\n\n        opts = _selector_opts(opts);\n\n        var inst = this.iterator('table', function(settings) {\n            return __column_selector(settings, selector, opts);\n        }, 1);\n\n        // Want argument shifting here and in _row_selector?\n        inst.selector.cols = selector;\n        inst.selector.opts = opts;\n\n        return inst;\n    });\n\n    _api_registerPlural('columns().header()', 'column().header()', function(row) {\n        return this.iterator('column', function(settings, column) {\n            var header = settings.aoHeader;\n            var target = row !== undefined\n                ? row\n                : settings.bSortCellsTop // Legacy support\n                    ? 0\n                    : header.length - 1;\n\n            return header[target][column].cell;\n        }, 1);\n    });\n\n    _api_registerPlural('columns().footer()', 'column().footer()', function(row) {\n        return this.iterator('column', function(settings, column) {\n            var footer = settings.aoFooter;\n\n            if (!footer.length) {\n                return null;\n            }\n\n            return settings.aoFooter[row !== undefined ? row : 0][column].cell;\n        }, 1);\n    });\n\n    _api_registerPlural('columns().data()', 'column().data()', function() {\n        return this.iterator('column-rows', __columnData, 1);\n    });\n\n    _api_registerPlural('columns().render()', 'column().render()', function(type) {\n        return this.iterator('column-rows', function(settings, column, i, j, rows) {\n            return __columnData(settings, column, i, j, rows, type);\n        }, 1);\n    });\n\n    _api_registerPlural('columns().dataSrc()', 'column().dataSrc()', function() {\n        return this.iterator('column', function(settings, column) {\n            return settings.aoColumns[column].mData;\n        }, 1);\n    });\n\n    _api_registerPlural('columns().cache()', 'column().cache()', function(type) {\n        return this.iterator('column-rows', function(settings, column, i, j, rows) {\n            return _pluck_order(settings.aoData, rows,\n                type === 'search' ? '_aFilterData' : '_aSortData', column\n            );\n        }, 1);\n    });\n\n    _api_registerPlural('columns().init()', 'column().init()', function() {\n        return this.iterator('column', function(settings, column) {\n            return settings.aoColumns[column];\n        }, 1);\n    });\n\n    _api_registerPlural('columns().nodes()', 'column().nodes()', function() {\n        return this.iterator('column-rows', function(settings, column, i, j, rows) {\n            return _pluck_order(settings.aoData, rows, 'anCells', column);\n        }, 1);\n    });\n\n    _api_registerPlural('columns().titles()', 'column().title()', function(title, row) {\n        return this.iterator('column', function(settings, column) {\n            // Argument shifting\n            if (typeof title === 'number') {\n                row = title;\n                title = undefined;\n            }\n\n            var span = $('span.dt-column-title', this.column(column).header(row));\n\n            if (title !== undefined) {\n                span.html(title);\n                return this;\n            }\n\n            return span.html();\n        }, 1);\n    });\n\n    _api_registerPlural('columns().types()', 'column().type()', function() {\n        return this.iterator('column', function(settings, column) {\n            var type = settings.aoColumns[column].sType;\n\n            // If the type was invalidated, then resolve it. This actually does\n            // all columns at the moment. Would only happen once if getting all\n            // column's data types.\n            if (!type) {\n                _fnColumnTypes(settings);\n            }\n\n            return type;\n        }, 1);\n    });\n\n    _api_registerPlural('columns().visible()', 'column().visible()', function(vis, calc) {\n        var that = this;\n        var changed = [];\n        var ret = this.iterator('column', function(settings, column) {\n            if (vis === undefined) {\n                return settings.aoColumns[column].bVisible;\n            } // Else\n\n            if (__setColumnVis(settings, column, vis)) {\n                changed.push(column);\n            }\n        });\n\n        // Group the column visibility changes\n        if (vis !== undefined) {\n            this.iterator('table', function(settings) {\n                // Redraw the header after changes\n                _fnDrawHead(settings, settings.aoHeader);\n                _fnDrawHead(settings, settings.aoFooter);\n\n                // Update colspan for no records display. Child rows and extensions will use their own\n                // listeners to do this - only need to update the empty table item here\n                if (!settings.aiDisplay.length) {\n                    $(settings.nTBody).find('td[colspan]').attr('colspan', _fnVisbleColumns(settings));\n                }\n\n                _fnSaveState(settings);\n\n                // Second loop once the first is done for events\n                that.iterator('column', function(settings, column) {\n                    if (changed.includes(column)) {\n                        _fnCallbackFire(settings, null, 'column-visibility', [settings, column, vis, calc]);\n                    }\n                });\n\n                if (changed.length && (calc === undefined || calc)) {\n                    that.columns.adjust();\n                }\n            });\n        }\n\n        return ret;\n    });\n\n    _api_registerPlural('columns().widths()', 'column().width()', function() {\n        // Injects a fake row into the table for just a moment so the widths can\n        // be read, regardless of colspan in the header and rows being present in\n        // the body\n        var columns = this.columns(':visible').count();\n        var row = $('<tr>').html('<td>' + Array(columns).join('</td><td>') + '</td>');\n\n        $(this.table().body()).append(row);\n\n        var widths = row.children().map(function() {\n            return $(this).outerWidth();\n        });\n\n        row.remove();\n\n        return this.iterator('column', function(settings, column) {\n            var visIdx = _fnColumnIndexToVisible(settings, column);\n\n            return visIdx !== null ? widths[visIdx] : 0;\n        }, 1);\n    });\n\n    _api_registerPlural('columns().indexes()', 'column().index()', function(type) {\n        return this.iterator('column', function(settings, column) {\n            return type === 'visible' ?\n                _fnColumnIndexToVisible(settings, column) :\n                column;\n        }, 1);\n    });\n\n    _api_register('columns.adjust()', function() {\n        return this.iterator('table', function(settings) {\n            _fnAdjustColumnSizing(settings);\n        }, 1);\n    });\n\n    _api_register('column.index()', function(type, idx) {\n        if (this.context.length !== 0) {\n            var ctx = this.context[0];\n\n            if (type === 'fromVisible' || type === 'toData') {\n                return _fnVisibleToColumnIndex(ctx, idx);\n            } else if (type === 'fromData' || type === 'toVisible') {\n                return _fnColumnIndexToVisible(ctx, idx);\n            }\n        }\n    });\n\n    _api_register('column()', function(selector, opts) {\n        return _selector_first(this.columns(selector, opts));\n    });\n\n    var __cell_selector = function(settings, selector, opts) {\n        var data = settings.aoData;\n        var rows = _selector_row_indexes(settings, opts);\n        var cells = _removeEmpty(_pluck_order(data, rows, 'anCells'));\n        var allCells = $(_flatten([], cells));\n        var row;\n        var columns = settings.aoColumns.length;\n        var a, i, ien, j, o, host;\n\n        var run = function(s) {\n            var fnSelector = typeof s === 'function';\n\n            if (s === null || s === undefined || fnSelector) {\n                // All cells and function selectors\n                a = [];\n\n                for (i = 0, ien = rows.length; i < ien; i++) {\n                    row = rows[i];\n\n                    for (j = 0; j < columns; j++) {\n                        o = {\n                            row: row,\n                            column: j\n                        };\n\n                        if (fnSelector) {\n                            // Selector - function\n                            host = data[row];\n\n                            if (s(o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null)) {\n                                a.push(o);\n                            }\n                        } else {\n                            // Selector - all\n                            a.push(o);\n                        }\n                    }\n                }\n\n                return a;\n            }\n\n            // Selector - index\n            if ($.isPlainObject(s)) {\n                // Valid cell index and its in the array of selectable rows\n                return s.column !== undefined && s.row !== undefined && rows.indexOf(s.row) !== -1 ?\n                    [s] :\n                    [];\n            }\n\n            // Selector - jQuery filtered cells\n            var jqResult = allCells\n                .filter(s)\n                .map(function(i, el) {\n                    return { // Use a new object, in case someone changes the values\n                        row: el._DT_CellIndex.row,\n                        column: el._DT_CellIndex.column\n                    };\n                })\n                .toArray();\n\n            if (jqResult.length || !s.nodeName) {\n                return jqResult;\n            }\n\n            // Otherwise the selector is a node, and there is one last option - the\n            // element might be a child of an element which has dt-row and dt-column\n            // data attributes\n            host = $(s).closest('*[data-dt-row]');\n            return host.length ?\n                [{\n                    row: host.data('dt-row'),\n                    column: host.data('dt-column')\n                }] :\n                [];\n        };\n\n        return _selector_run('cell', selector, run, settings, opts);\n    };\n\n\n    _api_register('cells()', function(rowSelector, columnSelector, opts) {\n        // Argument shifting\n        if ($.isPlainObject(rowSelector)) {\n            // Indexes\n            if (rowSelector.row === undefined) {\n                // Selector options in first parameter\n                opts = rowSelector;\n                rowSelector = null;\n            } else {\n                // Cell index objects in first parameter\n                opts = columnSelector;\n                columnSelector = null;\n            }\n        }\n        if ($.isPlainObject(columnSelector)) {\n            opts = columnSelector;\n            columnSelector = null;\n        }\n\n        // Cell selector\n        if (columnSelector === null || columnSelector === undefined) {\n            return this.iterator('table', function(settings) {\n                return __cell_selector(settings, rowSelector, _selector_opts(opts));\n            });\n        }\n\n        // The default built in options need to apply to row and columns\n        var internalOpts = opts ? {\n            page: opts.page,\n            order: opts.order,\n            search: opts.search\n        } : {};\n\n        // Row + column selector\n        var columns = this.columns(columnSelector, internalOpts);\n        var rows = this.rows(rowSelector, internalOpts);\n        var i, ien, j, jen;\n\n        var cellsNoOpts = this.iterator('table', function(settings, idx) {\n            var a = [];\n\n            for (i = 0, ien = rows[idx].length; i < ien; i++) {\n                for (j = 0, jen = columns[idx].length; j < jen; j++) {\n                    a.push({\n                        row: rows[idx][i],\n                        column: columns[idx][j]\n                    });\n                }\n            }\n\n            return a;\n        }, 1);\n\n        // There is currently only one extension which uses a cell selector extension\n        // It is a _major_ performance drag to run this if it isn't needed, so this is\n        // an extension specific check at the moment\n        var cells = opts && opts.selected ?\n            this.cells(cellsNoOpts, opts) :\n            cellsNoOpts;\n\n        $.extend(cells.selector, {\n            cols: columnSelector,\n            rows: rowSelector,\n            opts: opts\n        });\n\n        return cells;\n    });\n\n\n    _api_registerPlural('cells().nodes()', 'cell().node()', function() {\n        return this.iterator('cell', function(settings, row, column) {\n            var data = settings.aoData[row];\n\n            return data && data.anCells ?\n                data.anCells[column] :\n                undefined;\n        }, 1);\n    });\n\n\n    _api_register('cells().data()', function() {\n        return this.iterator('cell', function(settings, row, column) {\n            return _fnGetCellData(settings, row, column);\n        }, 1);\n    });\n\n\n    _api_registerPlural('cells().cache()', 'cell().cache()', function(type) {\n        type = type === 'search' ? '_aFilterData' : '_aSortData';\n\n        return this.iterator('cell', function(settings, row, column) {\n            return settings.aoData[row][type][column];\n        }, 1);\n    });\n\n\n    _api_registerPlural('cells().render()', 'cell().render()', function(type) {\n        return this.iterator('cell', function(settings, row, column) {\n            return _fnGetCellData(settings, row, column, type);\n        }, 1);\n    });\n\n\n    _api_registerPlural('cells().indexes()', 'cell().index()', function() {\n        return this.iterator('cell', function(settings, row, column) {\n            return {\n                row: row,\n                column: column,\n                columnVisible: _fnColumnIndexToVisible(settings, column)\n            };\n        }, 1);\n    });\n\n\n    _api_registerPlural('cells().invalidate()', 'cell().invalidate()', function(src) {\n        return this.iterator('cell', function(settings, row, column) {\n            _fnInvalidate(settings, row, src, column);\n        });\n    });\n\n\n    _api_register('cell()', function(rowSelector, columnSelector, opts) {\n        return _selector_first(this.cells(rowSelector, columnSelector, opts));\n    });\n\n\n    _api_register('cell().data()', function(data) {\n        var ctx = this.context;\n        var cell = this[0];\n\n        if (data === undefined) {\n            // Get\n            return ctx.length && cell.length ?\n                _fnGetCellData(ctx[0], cell[0].row, cell[0].column) :\n                undefined;\n        }\n\n        // Set\n        _fnSetCellData(ctx[0], cell[0].row, cell[0].column, data);\n        _fnInvalidate(ctx[0], cell[0].row, 'data', cell[0].column);\n\n        return this;\n    });\n\n\n    /**\n     * Get current ordering (sorting) that has been applied to the table.\n     *\n     * @returns {array} 2D array containing the sorting information for the first\n     *   table in the current context. Each element in the parent array represents\n     *   a column being sorted upon (i.e. multi-sorting with two columns would have\n     *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is\n     *   the column index that the sorting condition applies to, the second is the\n     *   direction of the sort (`desc` or `asc`) and, optionally, the third is the\n     *   index of the sorting order from the `column.sorting` initialisation array.\n     *//**\n        * Set the ordering for the table.\n        *\n        * @param {integer} order Column index to sort upon.\n        * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)\n        * @returns {DataTables.Api} this\n        *//**\n           * Set the ordering for the table.\n           *\n           * @param {array} order 1D array of sorting information to be applied.\n           * @param {array} [...] Optional additional sorting conditions\n           * @returns {DataTables.Api} this\n           *//**\n              * Set the ordering for the table.\n              *\n              * @param {array} order 2D array of sorting information to be applied.\n              * @returns {DataTables.Api} this\n              */\n    _api_register('order()', function(order, dir) {\n        var ctx = this.context;\n        var args = Array.prototype.slice.call(arguments);\n\n        if (order === undefined) {\n            // Get\n            return ctx.length !== 0 ?\n                ctx[0].aaSorting :\n                undefined;\n        }\n\n        // Set\n        if (typeof order === 'number') {\n            // Simple column / direction passed in\n            order = [[order, dir]];\n        } else if (args.length > 1) {\n            // Arguments passed in (list of 1D arrays)\n            order = args;\n        }\n        // Otherwise a 2D array was passed in\n\n        return this.iterator('table', function(settings) {\n            settings.aaSorting = Array.isArray(order) ? order.slice() : order;\n        });\n    });\n\n\n    /**\n     * Attach a sort listener to an element for a given column\n     *\n     * @param {node|jQuery|string} node Identifier for the element(s) to attach the\n     *   listener to. This can take the form of a single DOM node, a jQuery\n     *   collection of nodes or a jQuery selector which will identify the node(s).\n     * @param {integer} column the column that a click on this node will sort on\n     * @param {function} [callback] callback function when sort is run\n     * @returns {DataTables.Api} this\n     */\n    _api_register('order.listener()', function(node, column, callback) {\n        return this.iterator('table', function(settings) {\n            _fnSortAttachListener(settings, node, {}, column, callback);\n        });\n    });\n\n\n    _api_register('order.fixed()', function(set) {\n        if (!set) {\n            var ctx = this.context;\n            var fixed = ctx.length ?\n                ctx[0].aaSortingFixed :\n                undefined;\n\n            return Array.isArray(fixed) ?\n                {pre: fixed} :\n                fixed;\n        }\n\n        return this.iterator('table', function(settings) {\n            settings.aaSortingFixed = $.extend(true, {}, set);\n        });\n    });\n\n\n    // Order by the selected column(s)\n    _api_register([\n        'columns().order()',\n        'column().order()'\n    ], function(dir) {\n        var that = this;\n\n        if (!dir) {\n            return this.iterator('column', function(settings, idx) {\n                var sort = _fnSortFlatten(settings);\n\n                for (var i = 0, ien = sort.length; i < ien; i++) {\n                    if (sort[i].col === idx) {\n                        return sort[i].dir;\n                    }\n                }\n\n                return null;\n            }, 1);\n        } else {\n            return this.iterator('table', function(settings, i) {\n                settings.aaSorting = that[i].map(function(col) {\n                    return [col, dir];\n                });\n            });\n        }\n    });\n\n    _api_registerPlural('columns().orderable()', 'column().orderable()', function(directions) {\n        return this.iterator('column', function(settings, idx) {\n            var col = settings.aoColumns[idx];\n\n            return directions ?\n                col.asSorting :\n                col.bSortable;\n        }, 1);\n    });\n\n\n    _api_register('processing()', function(show) {\n        return this.iterator('table', function(ctx) {\n            _fnProcessingDisplay(ctx, show);\n        });\n    });\n\n\n    _api_register('search()', function(input, regex, smart, caseInsen) {\n        var ctx = this.context;\n\n        if (input === undefined) {\n            // Get\n            return ctx.length !== 0 ?\n                ctx[0].oPreviousSearch.search :\n                undefined;\n        }\n\n        // Set\n        return this.iterator('table', function(settings) {\n            if (!settings.oFeatures.bFilter) {\n                return;\n            }\n\n            if (typeof regex === 'object') {\n                // New style options to pass to the search builder\n                _fnFilterComplete(settings, $.extend(settings.oPreviousSearch, regex, {\n                    search: input\n                }));\n            } else {\n                // Compat for the old options\n                _fnFilterComplete(settings, $.extend(settings.oPreviousSearch, {\n                    search: input,\n                    regex: regex === null ? false : regex,\n                    smart: smart === null ? true : smart,\n                    caseInsensitive: caseInsen === null ? true : caseInsen\n                }));\n            }\n        });\n    });\n\n    _api_register('search.fixed()', function(name, search) {\n        var ret = this.iterator(true, 'table', function(settings) {\n            var fixed = settings.searchFixed;\n\n            if (!name) {\n                return Object.keys(fixed);\n            } else if (search === undefined) {\n                return fixed[name];\n            } else if (search === null) {\n                delete fixed[name];\n            } else {\n                fixed[name] = search;\n            }\n\n            return this;\n        });\n\n        return name !== undefined && search === undefined\n            ? ret[0]\n            : ret;\n    });\n\n    _api_registerPlural(\n        'columns().search()',\n        'column().search()',\n        function(input, regex, smart, caseInsen) {\n            return this.iterator('column', function(settings, column) {\n                var preSearch = settings.aoPreSearchCols;\n\n                if (input === undefined) {\n                    // Get\n                    return preSearch[column].search;\n                }\n\n                // Set\n                if (!settings.oFeatures.bFilter) {\n                    return;\n                }\n\n                if (typeof regex === 'object') {\n                    // New style options to pass to the search builder\n                    $.extend(preSearch[column], regex, {\n                        search: input\n                    });\n                } else {\n                    // Old style (with not all options available)\n                    $.extend(preSearch[column], {\n                        search: input,\n                        regex: regex === null ? false : regex,\n                        smart: smart === null ? true : smart,\n                        caseInsensitive: caseInsen === null ? true : caseInsen\n                    });\n                }\n\n                _fnFilterComplete(settings, settings.oPreviousSearch);\n            });\n        }\n    );\n\n    _api_register([\n        'columns().search.fixed()',\n        'column().search.fixed()'\n    ],\n        function(name, search) {\n            var ret = this.iterator(true, 'column', function(settings, colIdx) {\n                var fixed = settings.aoColumns[colIdx].searchFixed;\n\n                if (!name) {\n                    return Object.keys(fixed);\n                } else if (search === undefined) {\n                    return fixed[name];\n                } else if (search === null) {\n                    delete fixed[name];\n                } else {\n                    fixed[name] = search;\n                }\n\n                return this;\n            });\n\n            return name !== undefined && search === undefined\n                ? ret[0]\n                : ret;\n        }\n    );\n    /*\n     * State API methods\n     */\n\n    _api_register('state()', function(set, ignoreTime) {\n        // Getter\n        if (!set) {\n            return this.context.length ?\n                this.context[0].oSavedState :\n                null;\n        }\n\n        var setMutate = $.extend(true, {}, set);\n\n        // Setter\n        return this.iterator('table', function(settings) {\n            if (ignoreTime !== false) {\n                setMutate.time = +new Date() + 100;\n            }\n\n            _fnImplementState(settings, setMutate, function() { });\n        });\n    });\n\n\n    _api_register('state.clear()', function() {\n        return this.iterator('table', function(settings) {\n            // Save an empty object\n            settings.fnStateSaveCallback.call(settings.oInstance, settings, {});\n        });\n    });\n\n\n    _api_register('state.loaded()', function() {\n        return this.context.length ?\n            this.context[0].oLoadedState :\n            null;\n    });\n\n\n    _api_register('state.save()', function() {\n        return this.iterator('table', function(settings) {\n            _fnSaveState(settings);\n        });\n    });\n\n    /**\n     * Set the jQuery or window object to be used by DataTables\n     *\n     * @param {*} module Library / container object\n     * @param {string} [type] Library or container type `lib`, `win` or `datetime`.\n     *   If not provided, automatic detection is attempted.\n     */\n    DataTable.use = function(module, type) {\n        if (type === 'lib' || module.fn) {\n            $ = module;\n        } else if (type == 'win' || module.document) {\n            window = module;\n            document = module.document;\n        } else if (type === 'datetime' || module.type === 'DateTime') {\n            DataTable.DateTime = module;\n        }\n    };\n\n    /**\n     * CommonJS factory function pass through. This will check if the arguments\n     * given are a window object or a jQuery object. If so they are set\n     * accordingly.\n     * @param {*} root Window\n     * @param {*} jq jQUery\n     * @returns {boolean} Indicator\n     */\n    DataTable.factory = function(root, jq) {\n        var is = false;\n\n        // Test if the first parameter is a window object\n        if (root && root.document) {\n            window = root;\n            document = root.document;\n        }\n\n        // Test if the second parameter is a jQuery object\n        if (jq && jq.fn && jq.fn.jquery) {\n            $ = jq;\n            is = true;\n        }\n\n        return is;\n    };\n\n    /**\n     * Provide a common method for plug-ins to check the version of DataTables being\n     * used, in order to ensure compatibility.\n     *\n     *  @param {string} version Version string to check for, in the format \"X.Y.Z\".\n     *    Note that the formats \"X\" and \"X.Y\" are also acceptable.\n     *  @param {string} [version2=current DataTables version] As above, but optional.\n     *   If not given the current DataTables version will be used.\n     *  @returns {boolean} true if this version of DataTables is greater or equal to\n     *    the required version, or false if this version of DataTales is not\n     *    suitable\n     *  @static\n     *  @dtopt API-Static\n     *\n     *  @example\n     *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );\n     */\n    DataTable.versionCheck = function(version, version2) {\n        var aThis = version2 ?\n            version2.split('.') :\n            DataTable.version.split('.');\n        var aThat = version.split('.');\n        var iThis, iThat;\n\n        for (var i = 0, iLen = aThat.length; i < iLen; i++) {\n            iThis = parseInt(aThis[i], 10) || 0;\n            iThat = parseInt(aThat[i], 10) || 0;\n\n            // Parts are the same, keep comparing\n            if (iThis === iThat) {\n                continue;\n            }\n\n            // Parts are different, return immediately\n            return iThis > iThat;\n        }\n\n        return true;\n    };\n\n\n    /**\n     * Check if a `<table>` node is a DataTable table already or not.\n     *\n     *  @param {node|jquery|string} table Table node, jQuery object or jQuery\n     *      selector for the table to test. Note that if more than more than one\n     *      table is passed on, only the first will be checked\n     *  @returns {boolean} true the table given is a DataTable, or false otherwise\n     *  @static\n     *  @dtopt API-Static\n     *\n     *  @example\n     *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {\n     *      $('#example').dataTable();\n     *    }\n     */\n    DataTable.isDataTable = function(table) {\n        var t = $(table).get(0);\n        var is = false;\n\n        if (table instanceof DataTable.Api) {\n            return true;\n        }\n\n        $.each(DataTable.settings, function(i, o) {\n            var head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;\n            var foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;\n\n            if (o.nTable === t || head === t || foot === t) {\n                is = true;\n            }\n        });\n\n        return is;\n    };\n\n\n    /**\n     * Get all DataTable tables that have been initialised - optionally you can\n     * select to get only currently visible tables.\n     *\n     *  @param {boolean} [visible=false] Flag to indicate if you want all (default)\n     *    or visible tables only.\n     *  @returns {array} Array of `table` nodes (not DataTable instances) which are\n     *    DataTables\n     *  @static\n     *  @dtopt API-Static\n     *\n     *  @example\n     *    $.each( $.fn.dataTable.tables(true), function () {\n     *      $(table).DataTable().columns.adjust();\n     *    } );\n     */\n    DataTable.tables = function(visible) {\n        var api = false;\n\n        if ($.isPlainObject(visible)) {\n            api = visible.api;\n            visible = visible.visible;\n        }\n\n        var a = DataTable.settings\n            .filter(function(o) {\n                return !visible || (visible && $(o.nTable).is(':visible'))\n                    ? true\n                    : false;\n            })\n            .map(function(o) {\n                return o.nTable;\n            });\n\n        return api ?\n            new _Api(a) :\n            a;\n    };\n\n\n    /**\n     * Convert from camel case parameters to Hungarian notation. This is made public\n     * for the extensions to provide the same ability as DataTables core to accept\n     * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase\n     * parameters.\n     *\n     *  @param {object} src The model object which holds all parameters that can be\n     *    mapped.\n     *  @param {object} user The object to convert from camel case to Hungarian.\n     *  @param {boolean} force When set to `true`, properties which already have a\n     *    Hungarian value in the `user` object will be overwritten. Otherwise they\n     *    won't be.\n     */\n    DataTable.camelToHungarian = _fnCamelToHungarian;\n\n\n    /**\n     *\n     */\n    _api_register('$()', function(selector, opts) {\n        var\n            rows = this.rows(opts).nodes(), // Get all rows\n            jqRows = $(rows);\n\n        return $([].concat(\n            jqRows.filter(selector).toArray(),\n            jqRows.find(selector).toArray()\n        ));\n    });\n\n\n    // JQuery functions to operate on the tables\n    $.each(['on', 'one', 'off'], function(i, key) {\n        _api_register(key + '()', function(/* Event, handler */) {\n            var args = Array.prototype.slice.call(arguments);\n\n            // Add the `dt` namespace automatically if it isn't already present\n            args[0] = args[0].split(/\\s/).map(function(e) {\n                return !e.match(/\\.dt\\b/) ?\n                    e + '.dt' :\n                    e;\n            }).join(' ');\n\n            var inst = $(this.tables().nodes());\n            inst[key].apply(inst, args);\n            return this;\n        });\n    });\n\n\n    _api_register('clear()', function() {\n        return this.iterator('table', function(settings) {\n            _fnClearTable(settings);\n        });\n    });\n\n\n    _api_register('error()', function(msg) {\n        return this.iterator('table', function(settings) {\n            _fnLog(settings, 0, msg);\n        });\n    });\n\n\n    _api_register('settings()', function() {\n        return new _Api(this.context, this.context);\n    });\n\n\n    _api_register('init()', function() {\n        var ctx = this.context;\n        return ctx.length ? ctx[0].oInit : null;\n    });\n\n\n    _api_register('data()', function() {\n        return this.iterator('table', function(settings) {\n            return _pluck(settings.aoData, '_aData');\n        }).flatten();\n    });\n\n\n    _api_register('trigger()', function(name, args, bubbles) {\n        return this.iterator('table', function(settings) {\n            return _fnCallbackFire(settings, null, name, args, bubbles);\n        }).flatten();\n    });\n\n\n    _api_register('ready()', function(fn) {\n        var ctx = this.context;\n\n        // Get status of first table\n        if (!fn) {\n            return ctx.length\n                ? (ctx[0]._bInitComplete || false)\n                : null;\n        }\n\n        // Function to run either once the table becomes ready or\n        // immediately if it is already ready.\n        return this.tables().every(function() {\n            if (this.context[0]._bInitComplete) {\n                fn.call(this);\n            } else {\n                this.on('init', function() {\n                    fn.call(this);\n                });\n            }\n        });\n    });\n\n\n    _api_register('destroy()', function(remove) {\n        remove = remove || false;\n\n        return this.iterator('table', function(settings) {\n            var classes = settings.oClasses;\n            var table = settings.nTable;\n            var tbody = settings.nTBody;\n            var thead = settings.nTHead;\n            var tfoot = settings.nTFoot;\n            var jqTable = $(table);\n            var jqTbody = $(tbody);\n            var jqWrapper = $(settings.nTableWrapper);\n            var rows = settings.aoData.map(function(r) {\n return r ? r.nTr : null;\n});\n            var orderClasses = classes.order;\n\n            // Flag to note that the table is currently being destroyed - no action\n            // should be taken\n            settings.bDestroying = true;\n\n            // Fire off the destroy callbacks for plug-ins etc\n            _fnCallbackFire(settings, \"aoDestroyCallback\", \"destroy\", [settings], true);\n\n            // If not being removed from the document, make all columns visible\n            if (!remove) {\n                new _Api(settings).columns().visible(true);\n            }\n\n            // Blitz all `DT` namespaced events (these are internal events, the\n            // lowercase, `dt` events are user subscribed and they are responsible\n            // for removing them\n            jqWrapper.off('.DT').find(':not(tbody *)').off('.DT');\n            $(window).off('.DT-' + settings.sInstance);\n\n            // When scrolling we had to break the table up - restore it\n            if (table != thead.parentNode) {\n                jqTable.children('thead').detach();\n                jqTable.append(thead);\n            }\n\n            if (tfoot && table != tfoot.parentNode) {\n                jqTable.children('tfoot').detach();\n                jqTable.append(tfoot);\n            }\n\n            settings.colgroup.remove();\n\n            settings.aaSorting = [];\n            settings.aaSortingFixed = [];\n            _fnSortingClasses(settings);\n\n            $('th, td', thead)\n                .removeClass(\n                    orderClasses.canAsc + ' ' +\n                    orderClasses.canDesc + ' ' +\n                    orderClasses.isAsc + ' ' +\n                    orderClasses.isDesc\n                )\n                .css('width', '');\n\n            // Add the TR elements back into the table in their original order\n            jqTbody.children().detach();\n            jqTbody.append(rows);\n\n            var orig = settings.nTableWrapper.parentNode;\n            var insertBefore = settings.nTableWrapper.nextSibling;\n\n            // Remove the DataTables generated nodes, events and classes\n            var removedMethod = remove ? 'remove' : 'detach';\n            jqTable[removedMethod]();\n            jqWrapper[removedMethod]();\n\n            // If we need to reattach the table to the document\n            if (!remove && orig) {\n                // InsertBefore acts like appendChild if !arg[1]\n                orig.insertBefore(table, insertBefore);\n\n                // Restore the width of the original table - was read from the style property,\n                // so we can restore directly to that\n                jqTable\n                    .css('width', settings.sDestroyWidth)\n                    .removeClass(classes.table);\n            }\n\n            /* Remove the settings object from the settings array */\n            var idx = DataTable.settings.indexOf(settings);\n            if (idx !== -1) {\n                DataTable.settings.splice(idx, 1);\n            }\n        });\n    });\n\n\n    // Add the `every()` method for rows, columns and cells in a compact form\n    $.each(['column', 'row', 'cell'], function(i, type) {\n        _api_register(type + 's().every()', function(fn) {\n            var opts = this.selector.opts;\n            var api = this;\n            var inst;\n            var counter = 0;\n\n            return this.iterator('every', function(settings, selectedIdx, tableIdx) {\n                inst = api[type](selectedIdx, opts);\n\n                if (type === 'cell') {\n                    fn.call(inst, inst[0][0].row, inst[0][0].column, tableIdx, counter);\n                } else {\n                    fn.call(inst, selectedIdx, tableIdx, counter);\n                }\n\n                counter++;\n            });\n        });\n    });\n\n\n    // I18n method for extensions to be able to use the language object from the\n    // DataTable\n    _api_register('i18n()', function(token, def, plural) {\n        var ctx = this.context[0];\n        var resolved = _fnGetObjectDataFn(token)(ctx.oLanguage);\n\n        if (resolved === undefined) {\n            resolved = def;\n        }\n\n        if ($.isPlainObject(resolved)) {\n            resolved = plural !== undefined && resolved[plural] !== undefined ?\n                resolved[plural] :\n                resolved._;\n        }\n\n        return typeof resolved === 'string'\n            ? resolved.replace('%d', plural) // Nb: plural might be undefined,\n            : resolved;\n    });\n\n    /**\n     * Version string for plug-ins to check compatibility. Allowed format is\n     * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used\n     * only for non-release builds. See https://semver.org/ for more information.\n     *  @member\n     *  @type string\n     *  @default Version number\n     */\n    DataTable.version = \"2.0.2\";\n\n    /**\n     * Private data store, containing all of the settings objects that are\n     * created for the tables on a given page.\n     *\n     * Note that the `DataTable.settings` object is aliased to\n     * `jQuery.fn.dataTableExt` through which it may be accessed and\n     * manipulated, or `jQuery.fn.dataTable.settings`.\n     *  @member\n     *  @type array\n     *  @default []\n     *  @private\n     */\n    DataTable.settings = [];\n\n    /**\n     * Object models container, for the various models that DataTables has\n     * available to it. These models define the objects that are used to hold\n     * the active state and configuration of the table.\n     *  @namespace\n     */\n    DataTable.models = {};\n\n\n    /**\n     * Template object for the way in which DataTables holds information about\n     * search information for the global filter and individual column filters.\n     *  @namespace\n     */\n    DataTable.models.oSearch = {\n        /**\n         * Flag to indicate if the filtering should be case insensitive or not\n         */\n        \"caseInsensitive\": true,\n\n        /**\n         * Applied search term\n         */\n        \"search\": \"\",\n\n        /**\n         * Flag to indicate if the search term should be interpreted as a\n         * regular expression (true) or not (false) and therefore and special\n         * regex characters escaped.\n         */\n        \"regex\": false,\n\n        /**\n         * Flag to indicate if DataTables is to use its smart filtering or not.\n         */\n        \"smart\": true,\n\n        /**\n         * Flag to indicate if DataTables should only trigger a search when\n         * the return key is pressed.\n         */\n        \"return\": false\n    };\n\n\n    /**\n     * Template object for the way in which DataTables holds information about\n     * each individual row. This is the object format used for the settings\n     * aoData array.\n     *  @namespace\n     */\n    DataTable.models.oRow = {\n        /**\n         * TR element for the row\n         */\n        \"nTr\": null,\n\n        /**\n         * Array of TD elements for each row. This is null until the row has been\n         * created.\n         */\n        \"anCells\": null,\n\n        /**\n         * Data object from the original data source for the row. This is either\n         * an array if using the traditional form of DataTables, or an object if\n         * using mData options. The exact type will depend on the passed in\n         * data from the data source, or will be an array if using DOM a data\n         * source.\n         */\n        \"_aData\": [],\n\n        /**\n         * Sorting data cache - this array is ostensibly the same length as the\n         * number of columns (although each index is generated only as it is\n         * needed), and holds the data that is used for sorting each column in the\n         * row. We do this cache generation at the start of the sort in order that\n         * the formatting of the sort data need be done only once for each cell\n         * per sort. This array should not be read from or written to by anything\n         * other than the master sorting methods.\n         */\n        \"_aSortData\": null,\n\n        /**\n         * Per cell filtering data cache. As per the sort data cache, used to\n         * increase the performance of the filtering in DataTables\n         */\n        \"_aFilterData\": null,\n\n        /**\n         * Filtering data cache. This is the same as the cell filtering cache, but\n         * in this case a string rather than an array. This is easily computed with\n         * a join on `_aFilterData`, but is provided as a cache so the join isn't\n         * needed on every search (memory traded for performance)\n         */\n        \"_sFilterRow\": null,\n\n        /**\n         * Denote if the original data source was from the DOM, or the data source\n         * object. This is used for invalidating data, so DataTables can\n         * automatically read data from the original source, unless uninstructed\n         * otherwise.\n         */\n        \"src\": null,\n\n        /**\n         * Index in the aoData array. This saves an indexOf lookup when we have the\n         * object, but want to know the index\n         */\n        \"idx\": -1,\n\n        /**\n         * Cached display value\n         */\n        displayData: null\n    };\n\n\n    /**\n     * Template object for the column information object in DataTables. This object\n     * is held in the settings aoColumns array and contains all the information that\n     * DataTables needs about each individual column.\n     *\n     * Note that this object is related to {@link DataTable.defaults.column}\n     * but this one is the internal data store for DataTables's cache of columns.\n     * It should NOT be manipulated outside of DataTables. Any configuration should\n     * be done through the initialisation options.\n     *  @namespace\n     */\n    DataTable.models.oColumn = {\n        /**\n         * Column index.\n         */\n        \"idx\": null,\n\n        /**\n         * A list of the columns that sorting should occur on when this column\n         * is sorted. That this property is an array allows multi-column sorting\n         * to be defined for a column (for example first name / last name columns\n         * would benefit from this). The values are integers pointing to the\n         * columns to be sorted on (typically it will be a single integer pointing\n         * at itself, but that doesn't need to be the case).\n         */\n        \"aDataSort\": null,\n\n        /**\n         * Define the sorting directions that are applied to the column, in sequence\n         * as the column is repeatedly sorted upon - i.e. the first value is used\n         * as the sorting direction when the column if first sorted (clicked on).\n         * Sort it again (click again) and it will move on to the next index.\n         * Repeat until loop.\n         */\n        \"asSorting\": null,\n\n        /**\n         * Flag to indicate if the column is searchable, and thus should be included\n         * in the filtering or not.\n         */\n        \"bSearchable\": null,\n\n        /**\n         * Flag to indicate if the column is sortable or not.\n         */\n        \"bSortable\": null,\n\n        /**\n         * Flag to indicate if the column is currently visible in the table or not\n         */\n        \"bVisible\": null,\n\n        /**\n         * Store for manual type assignment using the `column.type` option. This\n         * is held in store so we can manipulate the column's `sType` property.\n         */\n        \"_sManualType\": null,\n\n        /**\n         * Flag to indicate if HTML5 data attributes should be used as the data\n         * source for filtering or sorting. True is either are.\n         */\n        \"_bAttrSrc\": false,\n\n        /**\n         * Developer definable function that is called whenever a cell is created (Ajax source,\n         * etc) or processed for input (DOM source). This can be used as a compliment to mRender\n         * allowing you to modify the DOM element (add background colour for example) when the\n         * element is available.\n         */\n        \"fnCreatedCell\": null,\n\n        /**\n         * Function to get data from a cell in a column. You should <b>never</b>\n         * access data directly through _aData internally in DataTables - always use\n         * the method attached to this property. It allows mData to function as\n         * required. This function is automatically assigned by the column\n         * initialisation method\n         */\n        \"fnGetData\": null,\n\n        /**\n         * Function to set data for a cell in the column. You should <b>never</b>\n         * set the data directly to _aData internally in DataTables - always use\n         * this method. It allows mData to function as required. This function\n         * is automatically assigned by the column initialisation method\n         */\n        \"fnSetData\": null,\n\n        /**\n         * Property to read the value for the cells in the column from the data\n         * source array / object. If null, then the default content is used, if a\n         * function is given then the return from the function is used.\n         */\n        \"mData\": null,\n\n        /**\n         * Partner property to mData which is used (only when defined) to get\n         * the data - i.e. it is basically the same as mData, but without the\n         * 'set' option, and also the data fed to it is the result from mData.\n         * This is the rendering method to match the data method of mData.\n         */\n        \"mRender\": null,\n\n        /**\n         * The class to apply to all TD elements in the table's TBODY for the column\n         */\n        \"sClass\": null,\n\n        /**\n         * When DataTables calculates the column widths to assign to each column,\n         * it finds the longest string in each column and then constructs a\n         * temporary table and reads the widths from that. The problem with this\n         * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\n         * string - thus the calculation can go wrong (doing it properly and putting\n         * it into an DOM object and measuring that is horribly(!) slow). Thus as\n         * a \"work around\" we provide this option. It will append its value to the\n         * text that is found to be the longest string for the column - i.e. padding.\n         */\n        \"sContentPadding\": null,\n\n        /**\n         * Allows a default value to be given for a column's data, and will be used\n         * whenever a null data source is encountered (this can be because mData\n         * is set to null, or because the data source itself is null).\n         */\n        \"sDefaultContent\": null,\n\n        /**\n         * Name for the column, allowing reference to the column by name as well as\n         * by index (needs a lookup to work by name).\n         */\n        \"sName\": null,\n\n        /**\n         * Custom sorting data type - defines which of the available plug-ins in\n         * afnSortData the custom sorting will use - if any is defined.\n         */\n        \"sSortDataType\": 'std',\n\n        /**\n         * Class to be applied to the header element when sorting on this column\n         */\n        \"sSortingClass\": null,\n\n        /**\n         * Title of the column - what is seen in the TH element (nTh).\n         */\n        \"sTitle\": null,\n\n        /**\n         * Column sorting and filtering type\n         */\n        \"sType\": null,\n\n        /**\n         * Width of the column\n         */\n        \"sWidth\": null,\n\n        /**\n         * Width of the column when it was first \"encountered\"\n         */\n        \"sWidthOrig\": null,\n\n        /** Cached string which is the longest in the column */\n        maxLenString: null,\n\n        /**\n         * Store for named searches\n         */\n        searchFixed: null\n    };\n\n\n    /*\n     * Developer note: The properties of the object below are given in Hungarian\n     * notation, that was used as the interface for DataTables prior to v1.10, however\n     * from v1.10 onwards the primary interface is camel case. In order to avoid\n     * breaking backwards compatibility utterly with this change, the Hungarian\n     * version is still, internally the primary interface, but is is not documented\n     * - hence the @name tags in each doc comment. This allows a Javascript function\n     * to create a map from Hungarian notation to camel case (going the other direction\n     * would require each property to be listed, which would add around 3K to the size\n     * of DataTables, while this method is about a 0.5K hit).\n     *\n     * Ultimately this does pave the way for Hungarian notation to be dropped\n     * completely, but that is a massive amount of work and will break current\n     * installs (therefore is on-hold until v2).\n     */\n\n    /**\n     * Initialisation options that can be given to DataTables at initialisation\n     * time.\n     *  @namespace\n     */\n    DataTable.defaults = {\n        /**\n         * An array of data to use for the table, passed in at initialisation which\n         * will be used in preference to any data which is already in the DOM. This is\n         * particularly useful for constructing tables purely in Javascript, for\n         * example with a custom Ajax call.\n         */\n        \"aaData\": null,\n\n\n        /**\n         * If ordering is enabled, then DataTables will perform a first pass sort on\n         * initialisation. You can define which column(s) the sort is performed\n         * upon, and the sorting direction, with this variable. The `sorting` array\n         * should contain an array for each column to be sorted initially containing\n         * the column's index and a direction string ('asc' or 'desc').\n         */\n        \"aaSorting\": [[0, 'asc']],\n\n\n        /**\n         * This parameter is basically identical to the `sorting` parameter, but\n         * cannot be overridden by user interaction with the table. What this means\n         * is that you could have a column (visible or hidden) which the sorting\n         * will always be forced on first - any sorting after that (from the user)\n         * will then be performed as required. This can be useful for grouping rows\n         * together.\n         */\n        \"aaSortingFixed\": [],\n\n\n        /**\n         * DataTables can be instructed to load data to display in the table from a\n         * Ajax source. This option defines how that Ajax call is made and where to.\n         *\n         * The `ajax` property has three different modes of operation, depending on\n         * how it is defined. These are:\n         *\n         * * `string` - Set the URL from where the data should be loaded from.\n         * * `object` - Define properties for `jQuery.ajax`.\n         * * `function` - Custom data get function\n         *\n         * `string`\n         * --------\n         *\n         * As a string, the `ajax` property simply defines the URL from which\n         * DataTables will load data.\n         *\n         * `object`\n         * --------\n         *\n         * As an object, the parameters in the object are passed to\n         * [jQuery.ajax](https://api.jquery.com/jQuery.ajax/) allowing fine control\n         * of the Ajax request. DataTables has a number of default parameters which\n         * you can override using this option. Please refer to the jQuery\n         * documentation for a full description of the options available, although\n         * the following parameters provide additional options in DataTables or\n         * require special consideration:\n         *\n         * * `data` - As with jQuery, `data` can be provided as an object, but it\n         *   can also be used as a function to manipulate the data DataTables sends\n         *   to the server. The function takes a single parameter, an object of\n         *   parameters with the values that DataTables has readied for sending. An\n         *   object may be returned which will be merged into the DataTables\n         *   defaults, or you can add the items to the object that was passed in and\n         *   not return anything from the function. This supersedes `fnServerParams`\n         *   from DataTables 1.9-.\n         *\n         * * `dataSrc` - By default DataTables will look for the property `data` (or\n         *   `aaData` for compatibility with DataTables 1.9-) when obtaining data\n         *   from an Ajax source or for server-side processing - this parameter\n         *   allows that property to be changed. You can use Javascript dotted\n         *   object notation to get a data source for multiple levels of nesting, or\n         *   it my be used as a function. As a function it takes a single parameter,\n         *   the JSON returned from the server, which can be manipulated as\n         *   required, with the returned value being that used by DataTables as the\n         *   data source for the table.\n         *\n         * * `success` - Should not be overridden it is used internally in\n         *   DataTables. To manipulate / transform the data returned by the server\n         *   use `ajax.dataSrc`, or use `ajax` as a function (see below).\n         *\n         * `function`\n         * ----------\n         *\n         * As a function, making the Ajax call is left up to yourself allowing\n         * complete control of the Ajax request. Indeed, if desired, a method other\n         * than Ajax could be used to obtain the required data, such as Web storage\n         * or an AIR database.\n         *\n         * The function is given four parameters and no return is required. The\n         * parameters are:\n         *\n         * 1. _object_ - Data to send to the server\n         * 2. _function_ - Callback function that must be executed when the required\n         *    data has been obtained. That data should be passed into the callback\n         *    as the only parameter\n         * 3. _object_ - DataTables settings object for the table\n         */\n        \"ajax\": null,\n\n\n        /**\n         * This parameter allows you to readily specify the entries in the length drop\n         * down menu that DataTables shows when pagination is enabled. It can be\n         * either a 1D array of options which will be used for both the displayed\n         * option and the value, or a 2D array which will use the array in the first\n         * position as the value, and the array in the second position as the\n         * displayed options (useful for language strings such as 'All').\n         *\n         * Note that the `pageLength` property will be automatically set to the\n         * first value given in this array, unless `pageLength` is also provided.\n         */\n        \"aLengthMenu\": [10, 25, 50, 100],\n\n\n        /**\n         * The `columns` option in the initialisation parameter allows you to define\n         * details about the way individual columns behave. For a full list of\n         * column options that can be set, please see\n         * {@link DataTable.defaults.column}. Note that if you use `columns` to\n         * define your columns, you must have an entry in the array for every single\n         * column that you have in your table (these can be null if you don't which\n         * to specify any options).\n         */\n        \"aoColumns\": null,\n\n        /**\n         * Very similar to `columns`, `columnDefs` allows you to target a specific\n         * column, multiple columns, or all columns, using the `targets` property of\n         * each object in the array. This allows great flexibility when creating\n         * tables, as the `columnDefs` arrays can be of any length, targeting the\n         * columns you specifically want. `columnDefs` may use any of the column\n         * options available: {@link DataTable.defaults.column}, but it _must_\n         * have `targets` defined in each object in the array. Values in the `targets`\n         * array may be:\n         *   <ul>\n         *     <li>a string - class name will be matched on the TH for the column</li>\n         *     <li>0 or a positive integer - column index counting from the left</li>\n         *     <li>a negative integer - column index counting from the right</li>\n         *     <li>the string \"_all\" - all columns (i.e. assign a default)</li>\n         *   </ul>\n         */\n        \"aoColumnDefs\": null,\n\n\n        /**\n         * Basically the same as `search`, this parameter defines the individual column\n         * filtering state at initialisation time. The array must be of the same size\n         * as the number of columns, and each element be an object with the parameters\n         * `search` and `escapeRegex` (the latter is optional). 'null' is also\n         * accepted and the default will be used.\n         */\n        \"aoSearchCols\": [],\n\n\n        /**\n         * Enable or disable automatic column width calculation. This can be disabled\n         * as an optimisation (it takes some time to calculate the widths) if the\n         * tables widths are passed in using `columns`.\n         */\n        \"bAutoWidth\": true,\n\n\n        /**\n         * Deferred rendering can provide DataTables with a huge speed boost when you\n         * are using an Ajax or JS data source for the table. This option, when set to\n         * true, will cause DataTables to defer the creation of the table elements for\n         * each row until they are needed for a draw - saving a significant amount of\n         * time.\n         */\n        \"bDeferRender\": true,\n\n\n        /**\n         * Replace a DataTable which matches the given selector and replace it with\n         * one which has the properties of the new initialisation object passed. If no\n         * table matches the selector, then the new DataTable will be constructed as\n         * per normal.\n         */\n        \"bDestroy\": false,\n\n\n        /**\n         * Enable or disable filtering of data. Filtering in DataTables is \"smart\" in\n         * that it allows the end user to input multiple words (space separated) and\n         * will match a row containing those words, even if not in the order that was\n         * specified (this allow matching across multiple columns). Note that if you\n         * wish to use filtering in DataTables this must remain 'true' - to remove the\n         * default filtering input box and retain filtering abilities, please use\n         * {@link DataTable.defaults.dom}.\n         */\n        \"bFilter\": true,\n\n        /**\n         * Used only for compatiblity with DT1\n         * @deprecated\n         */\n        \"bInfo\": true,\n\n        /**\n         * Used only for compatiblity with DT1\n         * @deprecated\n         */\n        \"bLengthChange\": true,\n\n        /**\n         * Enable or disable pagination.\n         */\n        \"bPaginate\": true,\n\n\n        /**\n         * Enable or disable the display of a 'processing' indicator when the table is\n         * being processed (e.g. a sort). This is particularly useful for tables with\n         * large amounts of data where it can take a noticeable amount of time to sort\n         * the entries.\n         */\n        \"bProcessing\": false,\n\n\n        /**\n         * Retrieve the DataTables object for the given selector. Note that if the\n         * table has already been initialised, this parameter will cause DataTables\n         * to simply return the object that has already been set up - it will not take\n         * account of any changes you might have made to the initialisation object\n         * passed to DataTables (setting this parameter to true is an acknowledgement\n         * that you understand this). `destroy` can be used to reinitialise a table if\n         * you need.\n         */\n        \"bRetrieve\": false,\n\n\n        /**\n         * When vertical (y) scrolling is enabled, DataTables will force the height of\n         * the table's viewport to the given height at all times (useful for layout).\n         * However, this can look odd when filtering data down to a small data set,\n         * and the footer is left \"floating\" further down. This parameter (when\n         * enabled) will cause DataTables to collapse the table's viewport down when\n         * the result set will fit within the given Y height.\n         */\n        \"bScrollCollapse\": false,\n\n\n        /**\n         * Configure DataTables to use server-side processing. Note that the\n         * `ajax` parameter must also be given in order to give DataTables a\n         * source to obtain the required data for each draw.\n         */\n        \"bServerSide\": false,\n\n\n        /**\n         * Enable or disable sorting of columns. Sorting of individual columns can be\n         * disabled by the `sortable` option for each column.\n         */\n        \"bSort\": true,\n\n\n        /**\n         * Enable or display DataTables' ability to sort multiple columns at the\n         * same time (activated by shift-click by the user).\n         */\n        \"bSortMulti\": true,\n\n\n        /**\n         * Allows control over whether DataTables should use the top (true) unique\n         * cell that is found for a single column, or the bottom (false - default).\n         * This is useful when using complex headers.\n         */\n        \"bSortCellsTop\": null,\n\n\n        /**\n         * Enable or disable the addition of the classes `sorting\\_1`, `sorting\\_2` and\n         * `sorting\\_3` to the columns which are currently being sorted on. This is\n         * presented as a feature switch as it can increase processing time (while\n         * classes are removed and added) so for large data sets you might want to\n         * turn this off.\n         */\n        \"bSortClasses\": true,\n\n\n        /**\n         * Enable or disable state saving. When enabled HTML5 `localStorage` will be\n         * used to save table display information such as pagination information,\n         * display length, filtering and sorting. As such when the end user reloads\n         * the page the display display will match what thy had previously set up.\n         */\n        \"bStateSave\": false,\n\n\n        /**\n         * This function is called when a TR element is created (and all TD child\n         * elements have been inserted), or registered if using a DOM source, allowing\n         * manipulation of the TR element (adding classes etc).\n         */\n        \"fnCreatedRow\": null,\n\n\n        /**\n         * This function is called on every 'draw' event, and allows you to\n         * dynamically modify any aspect you want about the created DOM.\n         */\n        \"fnDrawCallback\": null,\n\n\n        /**\n         * Identical to fnHeaderCallback() but for the table footer this function\n         * allows you to modify the table footer on every 'draw' event.\n         */\n        \"fnFooterCallback\": null,\n\n\n        /**\n         * When rendering large numbers in the information element for the table\n         * (i.e. \"Showing 1 to 10 of 57 entries\") DataTables will render large numbers\n         * to have a comma separator for the 'thousands' units (e.g. 1 million is\n         * rendered as \"1,000,000\") to help readability for the end user. This\n         * function will override the default method DataTables uses.\n         * @param toFormat\n         */\n        \"fnFormatNumber\": function(toFormat) {\n            return toFormat.toString().replace(\n                /\\B(?=(\\d{3})+(?!\\d))/g,\n                this.oLanguage.sThousands\n            );\n        },\n\n\n        /**\n         * This function is called on every 'draw' event, and allows you to\n         * dynamically modify the header row. This can be used to calculate and\n         * display useful information about the table.\n         */\n        \"fnHeaderCallback\": null,\n\n\n        /**\n         * The information element can be used to convey information about the current\n         * state of the table. Although the internationalisation options presented by\n         * DataTables are quite capable of dealing with most customisations, there may\n         * be times where you wish to customise the string further. This callback\n         * allows you to do exactly that.\n         */\n        \"fnInfoCallback\": null,\n\n\n        /**\n         * Called when the table has been initialised. Normally DataTables will\n         * initialise sequentially and there will be no need for this function,\n         * however, this does not hold true when using external language information\n         * since that is obtained using an async XHR call.\n         */\n        \"fnInitComplete\": null,\n\n\n        /**\n         * Called at the very start of each table draw and can be used to cancel the\n         * draw by returning false, any other return (including undefined) results in\n         * the full draw occurring).\n         */\n        \"fnPreDrawCallback\": null,\n\n\n        /**\n         * This function allows you to 'post process' each row after it have been\n         * generated for each table draw, but before it is rendered on screen. This\n         * function might be used for setting the row class name etc.\n         */\n        \"fnRowCallback\": null,\n\n\n        /**\n         * Load the table state. With this function you can define from where, and how, the\n         * state of a table is loaded. By default DataTables will load from `localStorage`\n         * but you might wish to use a server-side database or cookies.\n         * @param settings\n         */\n        \"fnStateLoadCallback\": function(settings) {\n            try {\n                return JSON.parse(\n                    (settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(\n                        'DataTables_' + settings.sInstance + '_' + location.pathname\n                    )\n                );\n            } catch (e) {\n                return {};\n            }\n        },\n\n\n        /**\n         * Callback which allows modification of the saved state prior to loading that state.\n         * This callback is called when the table is loading state from the stored data, but\n         * prior to the settings object being modified by the saved state. Note that for\n         * plug-in authors, you should use the `stateLoadParams` event to load parameters for\n         * a plug-in.\n         */\n        \"fnStateLoadParams\": null,\n\n\n        /**\n         * Callback that is called when the state has been loaded from the state saving method\n         * and the DataTables settings object has been modified as a result of the loaded state.\n         */\n        \"fnStateLoaded\": null,\n\n\n        /**\n         * Save the table state. This function allows you to define where and how the state\n         * information for the table is stored By default DataTables will use `localStorage`\n         * but you might wish to use a server-side database or cookies.\n         * @param settings\n         * @param data\n         */\n        \"fnStateSaveCallback\": function(settings, data) {\n            try {\n                (settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(\n                    'DataTables_' + settings.sInstance + '_' + location.pathname,\n                    JSON.stringify(data)\n                );\n            } catch (e) {\n                // Noop\n            }\n        },\n\n\n        /**\n         * Callback which allows modification of the state to be saved. Called when the table\n         * has changed state a new state save is required. This method allows modification of\n         * the state saving object prior to actually doing the save, including addition or\n         * other state properties or modification. Note that for plug-in authors, you should\n         * use the `stateSaveParams` event to save parameters for a plug-in.\n         */\n        \"fnStateSaveParams\": null,\n\n\n        /**\n         * Duration for which the saved state information is considered valid. After this period\n         * has elapsed the state will be returned to the default.\n         * Value is given in seconds.\n         */\n        \"iStateDuration\": 7200,\n\n\n        /**\n         * Number of rows to display on a single page when using pagination. If\n         * feature enabled (`lengthChange`) then the end user will be able to override\n         * this to a custom setting using a pop-up menu.\n         */\n        \"iDisplayLength\": 10,\n\n\n        /**\n         * Define the starting point for data display when using DataTables with\n         * pagination. Note that this parameter is the number of records, rather than\n         * the page number, so if you have 10 records per page and want to start on\n         * the third page, it should be \"20\".\n         */\n        \"iDisplayStart\": 0,\n\n\n        /**\n         * By default DataTables allows keyboard navigation of the table (sorting, paging,\n         * and filtering) by adding a `tabindex` attribute to the required elements. This\n         * allows you to tab through the controls and press the enter key to activate them.\n         * The tabindex is default 0, meaning that the tab follows the flow of the document.\n         * You can overrule this using this parameter if you wish. Use a value of -1 to\n         * disable built-in keyboard navigation.\n         */\n        \"iTabIndex\": 0,\n\n\n        /**\n         * Classes that DataTables assigns to the various components and features\n         * that it adds to the HTML table. This allows classes to be configured\n         * during initialisation in addition to through the static\n         * {@link DataTable.ext.oStdClasses} object).\n         */\n        \"oClasses\": {},\n\n\n        /**\n         * All strings that DataTables uses in the user interface that it creates\n         * are defined in this object, allowing you to modified them individually or\n         * completely replace them all as required.\n         */\n        \"oLanguage\": {\n            /**\n             * Strings that are used for WAI-ARIA labels and controls only (these are not\n             * actually visible on the page, but will be read by screenreaders, and thus\n             * must be internationalised as well).\n             */\n            \"oAria\": {\n                /**\n                 * ARIA label that is added to the table headers when the column may be sorted\n                 */\n                \"orderable\": \": Activate to sort\",\n\n                /**\n                 * ARIA label that is added to the table headers when the column is currently being sorted\n                 */\n                \"orderableReverse\": \": Activate to invert sorting\",\n\n                /**\n                 * ARIA label that is added to the table headers when the column is currently being\n                 * sorted and next step is to remove sorting\n                 */\n                \"orderableRemove\": \": Activate to remove sorting\",\n\n                paginate: {\n                    first: 'First',\n                    last: 'Last',\n                    next: 'Next',\n                    previous: 'Previous'\n                }\n            },\n\n            /**\n             * Pagination string used by DataTables for the built-in pagination\n             * control types.\n             */\n            \"oPaginate\": {\n                /**\n                 * Label and character for first page button\n                 */\n                \"sFirst\": \"Â«\",\n\n                /**\n                 * Last page button\n                 */\n                \"sLast\": \"Â»\",\n\n                /**\n                 * Next page button\n                 */\n                \"sNext\": \"âº\",\n\n                /**\n                 * Previous page button\n                 */\n                \"sPrevious\": \"â¹\",\n            },\n\n            /**\n             * Plural object for the data type the table is showing\n             */\n            entries: {\n                _: \"entries\",\n                \"1\": \"entry\"\n            },\n\n            /**\n             * This string is shown in preference to `zeroRecords` when the table is\n             * empty of data (regardless of filtering). Note that this is an optional\n             * parameter - if it is not given, the value of `zeroRecords` will be used\n             * instead (either the default or given value).\n             */\n            \"sEmptyTable\": \"No data available in table\",\n\n\n            /**\n             * This string gives information to the end user about the information\n             * that is current on display on the page. The following tokens can be\n             * used in the string and will be dynamically replaced as the table\n             * display updates. This tokens can be placed anywhere in the string, or\n             * removed as needed by the language requires:\n             *\n             * * `\\_START\\_` - Display index of the first record on the current page\n             * * `\\_END\\_` - Display index of the last record on the current page\n             * * `\\_TOTAL\\_` - Number of records in the table after filtering\n             * * `\\_MAX\\_` - Number of records in the table without filtering\n             * * `\\_PAGE\\_` - Current page number\n             * * `\\_PAGES\\_` - Total number of pages of data in the table\n             */\n            \"sInfo\": \"Showing _START_ to _END_ of _TOTAL_ _ENTRIES-TOTAL_\",\n\n\n            /**\n             * Display information string for when the table is empty. Typically the\n             * format of this string should match `info`.\n             */\n            \"sInfoEmpty\": \"Showing 0 to 0 of 0 _ENTRIES-TOTAL_\",\n\n\n            /**\n             * When a user filters the information in a table, this string is appended\n             * to the information (`info`) to give an idea of how strong the filtering\n             * is. The variable _MAX_ is dynamically updated.\n             */\n            \"sInfoFiltered\": \"(filtered from _MAX_ total _ENTRIES-MAX_)\",\n\n\n            /**\n             * If can be useful to append extra information to the info string at times,\n             * and this variable does exactly that. This information will be appended to\n             * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are\n             * being used) at all times.\n             */\n            \"sInfoPostFix\": \"\",\n\n\n            /**\n             * This decimal place operator is a little different from the other\n             * language options since DataTables doesn't output floating point\n             * numbers, so it won't ever use this for display of a number. Rather,\n             * what this parameter does is modify the sort methods of the table so\n             * that numbers which are in a format which has a character other than\n             * a period (`.`) as a decimal place will be sorted numerically.\n             *\n             * Note that numbers with different decimal places cannot be shown in\n             * the same table and still be sortable, the table must be consistent.\n             * However, multiple different tables on the page can use different\n             * decimal place characters.\n             */\n            \"sDecimal\": \"\",\n\n\n            /**\n             * DataTables has a build in number formatter (`formatNumber`) which is\n             * used to format large numbers that are used in the table information.\n             * By default a comma is used, but this can be trivially changed to any\n             * character you wish with this parameter.\n             */\n            \"sThousands\": \",\",\n\n\n            /**\n             * Detail the action that will be taken when the drop down menu for the\n             * pagination length option is changed. The '_MENU_' variable is replaced\n             * with a default select list of 10, 25, 50 and 100, and can be replaced\n             * with a custom select box if required.\n             */\n            \"sLengthMenu\": \"_MENU_ _ENTRIES_ per page\",\n\n\n            /**\n             * When using Ajax sourced data and during the first draw when DataTables is\n             * gathering the data, this message is shown in an empty row in the table to\n             * indicate to the end user the the data is being loaded. Note that this\n             * parameter is not used when loading data by server-side processing, just\n             * Ajax sourced data with client-side processing.\n             */\n            \"sLoadingRecords\": \"Loading...\",\n\n\n            /**\n             * Text which is displayed when the table is processing a user action\n             * (usually a sort command or similar).\n             */\n            \"sProcessing\": \"\",\n\n\n            /**\n             * Details the actions that will be taken when the user types into the\n             * filtering input text box. The variable \"_INPUT_\", if used in the string,\n             * is replaced with the HTML text box for the filtering input allowing\n             * control over where it appears in the string. If \"_INPUT_\" is not given\n             * then the input box is appended to the string automatically.\n             */\n            \"sSearch\": \"Search:\",\n\n\n            /**\n             * Assign a `placeholder` attribute to the search `input` element\n             *  @type string\n             *  @default\n             *\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.searchPlaceholder\n             */\n            \"sSearchPlaceholder\": \"\",\n\n\n            /**\n             * All of the language information can be stored in a file on the\n             * server-side, which DataTables will look up if this parameter is passed.\n             * It must store the URL of the language file, which is in a JSON format,\n             * and the object has the same properties as the oLanguage object in the\n             * initialiser object (i.e. the above parameters). Please refer to one of\n             * the example language files to see how this works in action.\n             */\n            \"sUrl\": \"\",\n\n\n            /**\n             * Text shown inside the table records when the is no information to be\n             * displayed after filtering. `emptyTable` is shown when there is simply no\n             * information in the table at all (regardless of filtering).\n             */\n            \"sZeroRecords\": \"No matching records found\"\n        },\n\n\n        /**\n         * This parameter allows you to have define the global filtering state at\n         * initialisation time. As an object the `search` parameter must be\n         * defined, but all other parameters are optional. When `regex` is true,\n         * the search string will be treated as a regular expression, when false\n         * (default) it will be treated as a straight string. When `smart`\n         * DataTables will use it's smart filtering methods (to word match at\n         * any point in the data), when false this will not be done.\n         */\n        \"oSearch\": $.extend({}, DataTable.models.oSearch),\n\n\n        /**\n         * Table and control layout. This replaces the legacy `dom` option.\n         */\n        layout: {\n            topStart: 'pageLength',\n            topEnd: 'search',\n            bottomStart: 'info',\n            bottomEnd: 'paging'\n        },\n\n\n        /**\n         * Legacy DOM layout option\n         */\n        \"sDom\": null,\n\n\n        /**\n         * Search delay option. This will throttle full table searches that use the\n         * DataTables provided search input element (it does not effect calls to\n         * `dt-api search()`, providing a delay before the search is made.\n         */\n        \"searchDelay\": null,\n\n\n        /**\n         * DataTables features six different built-in options for the buttons to\n         * display for pagination control:\n         *\n         * * `numbers` - Page number buttons only\n         * * `simple` - 'Previous' and 'Next' buttons only\n         * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers\n         * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons\n         * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus page numbers\n         * * `first_last_numbers` - 'First' and 'Last' buttons, plus page numbers\n         */\n        \"sPaginationType\": \"full_numbers\",\n\n\n        /**\n         * Enable horizontal scrolling. When a table is too wide to fit into a\n         * certain layout, or you have a large number of columns in the table, you\n         * can enable x-scrolling to show the table in a viewport, which can be\n         * scrolled. This property can be `true` which will allow the table to\n         * scroll horizontally when needed, or any CSS unit, or a number (in which\n         * case it will be treated as a pixel measurement). Setting as simply `true`\n         * is recommended.\n         */\n        \"sScrollX\": \"\",\n\n\n        /**\n         * This property can be used to force a DataTable to use more width than it\n         * might otherwise do when x-scrolling is enabled. For example if you have a\n         * table which requires to be well spaced, this parameter is useful for\n         * \"over-sizing\" the table, and thus forcing scrolling. This property can by\n         * any CSS unit, or a number (in which case it will be treated as a pixel\n         * measurement).\n         */\n        \"sScrollXInner\": \"\",\n\n\n        /**\n         * Enable vertical scrolling. Vertical scrolling will constrain the DataTable\n         * to the given height, and enable scrolling for any data which overflows the\n         * current viewport. This can be used as an alternative to paging to display\n         * a lot of data in a small area (although paging and scrolling can both be\n         * enabled at the same time). This property can be any CSS unit, or a number\n         * (in which case it will be treated as a pixel measurement).\n         */\n        \"sScrollY\": \"\",\n\n\n        /**\n         * __Deprecated__ The functionality provided by this parameter has now been\n         * superseded by that provided through `ajax`, which should be used instead.\n         *\n         * Set the HTTP method that is used to make the Ajax call for server-side\n         * processing or Ajax sourced data.\n         */\n        \"sServerMethod\": \"GET\",\n\n\n        /**\n         * DataTables makes use of renderers when displaying HTML elements for\n         * a table. These renderers can be added or modified by plug-ins to\n         * generate suitable mark-up for a site. For example the Bootstrap\n         * integration plug-in for DataTables uses a paging button renderer to\n         * display pagination buttons in the mark-up required by Bootstrap.\n         *\n         * For further information about the renderers available see\n         * DataTable.ext.renderer\n         */\n        \"renderer\": null,\n\n\n        /**\n         * Set the data property name that DataTables should use to get a row's id\n         * to set as the `id` property in the node.\n         */\n        \"rowId\": \"DT_RowId\",\n\n\n        /**\n         * Caption value\n         */\n        \"caption\": null\n    };\n\n    _fnHungarianMap(DataTable.defaults);\n\n\n    /*\n     * Developer note - See note in model.defaults.js about the use of Hungarian\n     * notation and camel case.\n     */\n\n    /**\n     * Column options that can be given to DataTables at initialisation time.\n     *  @namespace\n     */\n    DataTable.defaults.column = {\n        /**\n         * Define which column(s) an order will occur on for this column. This\n         * allows a column's ordering to take multiple columns into account when\n         * doing a sort or use the data from a different column. For example first\n         * name / last name columns make sense to do a multi-column sort over the\n         * two columns.\n         */\n        \"aDataSort\": null,\n        \"iDataSort\": -1,\n\n        ariaTitle: '',\n\n\n        /**\n         * You can control the default ordering direction, and even alter the\n         * behaviour of the sort handler (i.e. only allow ascending ordering etc)\n         * using this parameter.\n         */\n        \"asSorting\": ['asc', 'desc', ''],\n\n\n        /**\n         * Enable or disable filtering on the data in this column.\n         */\n        \"bSearchable\": true,\n\n\n        /**\n         * Enable or disable ordering on this column.\n         */\n        \"bSortable\": true,\n\n\n        /**\n         * Enable or disable the display of this column.\n         */\n        \"bVisible\": true,\n\n\n        /**\n         * Developer definable function that is called whenever a cell is created (Ajax source,\n         * etc) or processed for input (DOM source). This can be used as a compliment to mRender\n         * allowing you to modify the DOM element (add background colour for example) when the\n         * element is available.\n         */\n        \"fnCreatedCell\": null,\n\n\n        /**\n         * This property can be used to read data from any data source property,\n         * including deeply nested objects / properties. `data` can be given in a\n         * number of different ways which effect its behaviour:\n         *\n         * * `integer` - treated as an array index for the data source. This is the\n         *   default that DataTables uses (incrementally increased for each column).\n         * * `string` - read an object property from the data source. There are\n         *   three 'special' options that can be used in the string to alter how\n         *   DataTables reads the data from the source object:\n         *    * `.` - Dotted Javascript notation. Just as you use a `.` in\n         *      Javascript to read from nested objects, so to can the options\n         *      specified in `data`. For example: `browser.version` or\n         *      `browser.name`. If your object parameter name contains a period, use\n         *      `\\\\` to escape it - i.e. `first\\\\.name`.\n         *    * `[]` - Array notation. DataTables can automatically combine data\n         *      from and array source, joining the data with the characters provided\n         *      between the two brackets. For example: `name[, ]` would provide a\n         *      comma-space separated list from the source array. If no characters\n         *      are provided between the brackets, the original array source is\n         *      returned.\n         *    * `()` - Function notation. Adding `()` to the end of a parameter will\n         *      execute a function of the name given. For example: `browser()` for a\n         *      simple function on the data source, `browser.version()` for a\n         *      function in a nested property or even `browser().version` to get an\n         *      object property if the function called returns an object. Note that\n         *      function notation is recommended for use in `render` rather than\n         *      `data` as it is much simpler to use as a renderer.\n         * * `null` - use the original data source for the row rather than plucking\n         *   data directly from it. This action has effects on two other\n         *   initialisation options:\n         *    * `defaultContent` - When null is given as the `data` option and\n         *      `defaultContent` is specified for the column, the value defined by\n         *      `defaultContent` will be used for the cell.\n         *    * `render` - When null is used for the `data` option and the `render`\n         *      option is specified for the column, the whole data source for the\n         *      row is used for the renderer.\n         * * `function` - the function given will be executed whenever DataTables\n         *   needs to set or get the data for a cell in the column. The function\n         *   takes three parameters:\n         *    * Parameters:\n         *      * `{array|object}` The data source for the row\n         *      * `{string}` The type call data requested - this will be 'set' when\n         *        setting data or 'filter', 'display', 'type', 'sort' or undefined\n         *        when gathering data. Note that when `undefined` is given for the\n         *        type DataTables expects to get the raw data for the object back<\n         *      * `{*}` Data to set when the second parameter is 'set'.\n         *    * Return:\n         *      * The return value from the function is not required when 'set' is\n         *        the type of call, but otherwise the return is what will be used\n         *        for the data requested.\n         *\n         * Note that `data` is a getter and setter option. If you just require\n         * formatting of data for output, you will likely want to use `render` which\n         * is simply a getter and thus simpler to use.\n         *\n         * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The\n         * name change reflects the flexibility of this property and is consistent\n         * with the naming of mRender. If 'mDataProp' is given, then it will still\n         * be used by DataTables, as it automatically maps the old name to the new\n         * if required.\n         */\n        \"mData\": null,\n\n\n        /**\n         * This property is the rendering partner to `data` and it is suggested that\n         * when you want to manipulate data for display (including filtering,\n         * sorting etc) without altering the underlying data for the table, use this\n         * property. `render` can be considered to be the the read only companion to\n         * `data` which is read / write (then as such more complex). Like `data`\n         * this option can be given in a number of different ways to effect its\n         * behaviour:\n         *\n         * * `integer` - treated as an array index for the data source. This is the\n         *   default that DataTables uses (incrementally increased for each column).\n         * * `string` - read an object property from the data source. There are\n         *   three 'special' options that can be used in the string to alter how\n         *   DataTables reads the data from the source object:\n         *    * `.` - Dotted Javascript notation. Just as you use a `.` in\n         *      Javascript to read from nested objects, so to can the options\n         *      specified in `data`. For example: `browser.version` or\n         *      `browser.name`. If your object parameter name contains a period, use\n         *      `\\\\` to escape it - i.e. `first\\\\.name`.\n         *    * `[]` - Array notation. DataTables can automatically combine data\n         *      from and array source, joining the data with the characters provided\n         *      between the two brackets. For example: `name[, ]` would provide a\n         *      comma-space separated list from the source array. If no characters\n         *      are provided between the brackets, the original array source is\n         *      returned.\n         *    * `()` - Function notation. Adding `()` to the end of a parameter will\n         *      execute a function of the name given. For example: `browser()` for a\n         *      simple function on the data source, `browser.version()` for a\n         *      function in a nested property or even `browser().version` to get an\n         *      object property if the function called returns an object.\n         * * `object` - use different data for the different data types requested by\n         *   DataTables ('filter', 'display', 'type' or 'sort'). The property names\n         *   of the object is the data type the property refers to and the value can\n         *   defined using an integer, string or function using the same rules as\n         *   `render` normally does. Note that an `_` option _must_ be specified.\n         *   This is the default value to use if you haven't specified a value for\n         *   the data type requested by DataTables.\n         * * `function` - the function given will be executed whenever DataTables\n         *   needs to set or get the data for a cell in the column. The function\n         *   takes three parameters:\n         *    * Parameters:\n         *      * {array|object} The data source for the row (based on `data`)\n         *      * {string} The type call data requested - this will be 'filter',\n         *        'display', 'type' or 'sort'.\n         *      * {array|object} The full data source for the row (not based on\n         *        `data`)\n         *    * Return:\n         *      * The return value from the function is what will be used for the\n         *        data requested.\n         */\n        \"mRender\": null,\n\n\n        /**\n         * Change the cell type created for the column - either TD cells or TH cells. This\n         * can be useful as TH cells have semantic meaning in the table body, allowing them\n         * to act as a header for a row (you may wish to add scope='row' to the TH elements).\n         */\n        \"sCellType\": \"td\",\n\n\n        /**\n         * Class to give to each cell in this column.\n         */\n        \"sClass\": \"\",\n\n        /**\n         * When DataTables calculates the column widths to assign to each column,\n         * it finds the longest string in each column and then constructs a\n         * temporary table and reads the widths from that. The problem with this\n         * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\n         * string - thus the calculation can go wrong (doing it properly and putting\n         * it into an DOM object and measuring that is horribly(!) slow). Thus as\n         * a \"work around\" we provide this option. It will append its value to the\n         * text that is found to be the longest string for the column - i.e. padding.\n         * Generally you shouldn't need this!\n         */\n        \"sContentPadding\": \"\",\n\n\n        /**\n         * Allows a default value to be given for a column's data, and will be used\n         * whenever a null data source is encountered (this can be because `data`\n         * is set to null, or because the data source itself is null).\n         */\n        \"sDefaultContent\": null,\n\n\n        /**\n         * This parameter is only used in DataTables' server-side processing. It can\n         * be exceptionally useful to know what columns are being displayed on the\n         * client side, and to map these to database fields. When defined, the names\n         * also allow DataTables to reorder information from the server if it comes\n         * back in an unexpected order (i.e. if you switch your columns around on the\n         * client-side, your server-side code does not also need updating).\n         */\n        \"sName\": \"\",\n\n\n        /**\n         * Defines a data source type for the ordering which can be used to read\n         * real-time information from the table (updating the internally cached\n         * version) prior to ordering. This allows ordering to occur on user\n         * editable elements such as form inputs.\n         */\n        \"sSortDataType\": \"std\",\n\n\n        /**\n         * The title of this column.\n         */\n        \"sTitle\": null,\n\n\n        /**\n         * The type allows you to specify how the data for this column will be\n         * ordered. Four types (string, numeric, date and html (which will strip\n         * HTML tags before ordering)) are currently available. Note that only date\n         * formats understood by Javascript's Date() object will be accepted as type\n         * date. For example: \"Mar 26, 2008 5:03 PM\". May take the values: 'string',\n         * 'numeric', 'date' or 'html' (by default). Further types can be adding\n         * through plug-ins.\n         */\n        \"sType\": null,\n\n\n        /**\n         * Defining the width of the column, this parameter may take any CSS value\n         * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not\n         * been given a specific width through this interface ensuring that the table\n         * remains readable.\n         */\n        \"sWidth\": null\n    };\n\n    _fnHungarianMap(DataTable.defaults.column);\n\n\n    /**\n     * DataTables settings object - this holds all the information needed for a\n     * given table, including configuration, data and current application of the\n     * table options. DataTables does not have a single instance for each DataTable\n     * with the settings attached to that instance, but rather instances of the\n     * DataTable \"class\" are created on-the-fly as needed (typically by a\n     * $().dataTable() call) and the settings object is then applied to that\n     * instance.\n     *\n     * Note that this object is related to {@link DataTable.defaults} but this\n     * one is the internal data store for DataTables's cache of columns. It should\n     * NOT be manipulated outside of DataTables. Any configuration should be done\n     * through the initialisation options.\n     */\n    DataTable.models.oSettings = {\n        /**\n         * Primary features of DataTables and their enablement state.\n         */\n        \"oFeatures\": {\n\n            /**\n             * Flag to say if DataTables should automatically try to calculate the\n             * optimum table and columns widths (true) or not (false).\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             */\n            \"bAutoWidth\": null,\n\n            /**\n             * Delay the creation of TR and TD elements until they are actually\n             * needed by a driven page draw. This can give a significant speed\n             * increase for Ajax source and Javascript source data, but makes no\n             * difference at all for DOM and server-side processing tables.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             */\n            \"bDeferRender\": null,\n\n            /**\n             * Enable filtering on the table or not. Note that if this is disabled\n             * then there is no filtering at all on the table, including fnFilter.\n             * To just remove the filtering input use sDom and remove the 'f' option.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             */\n            \"bFilter\": null,\n\n            /**\n             * Used only for compatiblity with DT1\n             * @deprecated\n             */\n            \"bInfo\": true,\n\n            /**\n             * Used only for compatiblity with DT1\n             * @deprecated\n             */\n            \"bLengthChange\": true,\n\n            /**\n             * Pagination enabled or not. Note that if this is disabled then length\n             * changing must also be disabled.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             */\n            \"bPaginate\": null,\n\n            /**\n             * Processing indicator enable flag whenever DataTables is enacting a\n             * user request - typically an Ajax request for server-side processing.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             */\n            \"bProcessing\": null,\n\n            /**\n             * Server-side processing enabled flag - when enabled DataTables will\n             * get all data from the server for every draw - there is no filtering,\n             * sorting or paging done on the client-side.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             */\n            \"bServerSide\": null,\n\n            /**\n             * Sorting enablement flag.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             */\n            \"bSort\": null,\n\n            /**\n             * Multi-column sorting\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             */\n            \"bSortMulti\": null,\n\n            /**\n             * Apply a class to the columns which are being sorted to provide a\n             * visual highlight or not. This can slow things down when enabled since\n             * there is a lot of DOM interaction.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             */\n            \"bSortClasses\": null,\n\n            /**\n             * State saving enablement flag.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             */\n            \"bStateSave\": null\n        },\n\n\n        /**\n         * Scrolling settings for a table.\n         */\n        \"oScroll\": {\n            /**\n             * When the table is shorter in height than sScrollY, collapse the\n             * table container down to the height of the table (when true).\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             */\n            \"bCollapse\": null,\n\n            /**\n             * Width of the scrollbar for the web-browser's platform. Calculated\n             * during table initialisation.\n             */\n            \"iBarWidth\": 0,\n\n            /**\n             * Viewport width for horizontal scrolling. Horizontal scrolling is\n             * disabled if an empty string.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             */\n            \"sX\": null,\n\n            /**\n             * Width to expand the table to when using x-scrolling. Typically you\n             * should not need to use this.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @deprecated\n             */\n            \"sXInner\": null,\n\n            /**\n             * Viewport height for vertical scrolling. Vertical scrolling is disabled\n             * if an empty string.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             */\n            \"sY\": null\n        },\n\n        /**\n         * Language information for the table.\n         */\n        \"oLanguage\": {\n            /**\n             * Information callback function. See\n             * {@link DataTable.defaults.fnInfoCallback}\n             */\n            \"fnInfoCallback\": null\n        },\n\n        /**\n         * Browser support parameters\n         */\n        \"oBrowser\": {\n            /**\n             * Determine if the vertical scrollbar is on the right or left of the\n             * scrolling container - needed for rtl language layout, although not\n             * all browsers move the scrollbar (Safari).\n             */\n            \"bScrollbarLeft\": false,\n\n            /**\n             * Browser scrollbar width\n             */\n            \"barWidth\": 0\n        },\n\n\n        \"ajax\": null,\n\n\n        /**\n         * Array referencing the nodes which are used for the features. The\n         * parameters of this object match what is allowed by sDom - i.e.\n         *   <ul>\n         *     <li>'l' - Length changing</li>\n         *     <li>'f' - Filtering input</li>\n         *     <li>'t' - The table!</li>\n         *     <li>'i' - Information</li>\n         *     <li>'p' - Pagination</li>\n         *     <li>'r' - pRocessing</li>\n         *   </ul>\n         */\n        \"aanFeatures\": [],\n\n        /**\n         * Store data information - see {@link DataTable.models.oRow} for detailed\n         * information.\n         */\n        \"aoData\": [],\n\n        /**\n         * Array of indexes which are in the current display (after filtering etc)\n         */\n        \"aiDisplay\": [],\n\n        /**\n         * Array of indexes for display - no filtering\n         */\n        \"aiDisplayMaster\": [],\n\n        /**\n         * Map of row ids to data indexes\n         */\n        \"aIds\": {},\n\n        /**\n         * Store information about each column that is in use\n         */\n        \"aoColumns\": [],\n\n        /**\n         * Store information about the table's header\n         */\n        \"aoHeader\": [],\n\n        /**\n         * Store information about the table's footer\n         */\n        \"aoFooter\": [],\n\n        /**\n         * Store the applied global search information in case we want to force a\n         * research or compare the old search to a new one.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         */\n        \"oPreviousSearch\": {},\n\n        /**\n         * Store for named searches\n         */\n        searchFixed: {},\n\n        /**\n         * Store the applied search for each column - see\n         * {@link DataTable.models.oSearch} for the format that is used for the\n         * filtering information for each column.\n         */\n        \"aoPreSearchCols\": [],\n\n        /**\n         * Sorting that is applied to the table. Note that the inner arrays are\n         * used in the following manner:\n         * <ul>\n         *   <li>Index 0 - column number</li>\n         *   <li>Index 1 - current sorting direction</li>\n         * </ul>\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         */\n        \"aaSorting\": null,\n\n        /**\n         * Sorting that is always applied to the table (i.e. prefixed in front of\n         * aaSorting).\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         */\n        \"aaSortingFixed\": [],\n\n        /**\n         * If restoring a table - we should restore its width\n         */\n        \"sDestroyWidth\": 0,\n\n        /**\n         * Callback functions array for every time a row is inserted (i.e. on a draw).\n         */\n        \"aoRowCallback\": [],\n\n        /**\n         * Callback functions for the header on each draw.\n         */\n        \"aoHeaderCallback\": [],\n\n        /**\n         * Callback function for the footer on each draw.\n         */\n        \"aoFooterCallback\": [],\n\n        /**\n         * Array of callback functions for draw callback functions\n         */\n        \"aoDrawCallback\": [],\n\n        /**\n         * Array of callback functions for row created function\n         */\n        \"aoRowCreatedCallback\": [],\n\n        /**\n         * Callback functions for just before the table is redrawn. A return of\n         * false will be used to cancel the draw.\n         */\n        \"aoPreDrawCallback\": [],\n\n        /**\n         * Callback functions for when the table has been initialised.\n         */\n        \"aoInitComplete\": [],\n\n\n        /**\n         * Callbacks for modifying the settings to be stored for state saving, prior to\n         * saving state.\n         */\n        \"aoStateSaveParams\": [],\n\n        /**\n         * Callbacks for modifying the settings that have been stored for state saving\n         * prior to using the stored values to restore the state.\n         */\n        \"aoStateLoadParams\": [],\n\n        /**\n         * Callbacks for operating on the settings object once the saved state has been\n         * loaded\n         */\n        \"aoStateLoaded\": [],\n\n        /**\n         * Cache the table ID for quick access\n         */\n        \"sTableId\": \"\",\n\n        /**\n         * The TABLE node for the main table\n         */\n        \"nTable\": null,\n\n        /**\n         * Permanent ref to the thead element\n         */\n        \"nTHead\": null,\n\n        /**\n         * Permanent ref to the tfoot element - if it exists\n         */\n        \"nTFoot\": null,\n\n        /**\n         * Permanent ref to the tbody element\n         */\n        \"nTBody\": null,\n\n        /**\n         * Cache the wrapper node (contains all DataTables controlled elements)\n         */\n        \"nTableWrapper\": null,\n\n        /**\n         * Indicate if all required information has been read in\n         */\n        \"bInitialised\": false,\n\n        /**\n         * Information about open rows. Each object in the array has the parameters\n         * 'nTr' and 'nParent'\n         */\n        \"aoOpenRows\": [],\n\n        /**\n         * Dictate the positioning of DataTables' control elements - see\n         * {@link DataTable.model.oInit.sDom}.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         */\n        \"sDom\": null,\n\n        /**\n         * Search delay (in mS)\n         */\n        \"searchDelay\": null,\n\n        /**\n         * Which type of pagination should be used.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         */\n        \"sPaginationType\": \"two_button\",\n\n        /**\n         * Number of paging controls on the page. Only used for backwards compatibility\n         */\n        pagingControls: 0,\n\n        /**\n         * The state duration (for `stateSave`) in seconds.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         */\n        \"iStateDuration\": 0,\n\n        /**\n         * Array of callback functions for state saving. Each array element is an\n         * object with the following parameters:\n         *   <ul>\n         *     <li>function:fn - function to call. Takes two parameters, oSettings\n         *       and the JSON string to save that has been thus far created. Returns\n         *       a JSON string to be inserted into a json object\n         *       (i.e. '\"param\": [ 0, 1, 2]')</li>\n         *     <li>string:sName - name of callback</li>\n         *   </ul>\n         */\n        \"aoStateSave\": [],\n\n        /**\n         * Array of callback functions for state loading. Each array element is an\n         * object with the following parameters:\n         *   <ul>\n         *     <li>function:fn - function to call. Takes two parameters, oSettings\n         *       and the object stored. May return false to cancel state loading</li>\n         *     <li>string:sName - name of callback</li>\n         *   </ul>\n         */\n        \"aoStateLoad\": [],\n\n        /**\n         * State that was saved. Useful for back reference\n         */\n        \"oSavedState\": null,\n\n        /**\n         * State that was loaded. Useful for back reference\n         */\n        \"oLoadedState\": null,\n\n        /**\n         * Note if draw should be blocked while getting data\n         */\n        \"bAjaxDataGet\": true,\n\n        /**\n         * The last jQuery XHR object that was used for server-side data gathering.\n         * This can be used for working with the XHR information in one of the\n         * callbacks\n         */\n        \"jqXHR\": null,\n\n        /**\n         * JSON returned from the server in the last Ajax request\n         */\n        \"json\": undefined,\n\n        /**\n         * Data submitted as part of the last Ajax request\n         */\n        \"oAjaxData\": undefined,\n\n        /**\n         * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if\n         * required).\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         */\n        \"sServerMethod\": null,\n\n        /**\n         * Format numbers for display.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         */\n        \"fnFormatNumber\": null,\n\n        /**\n         * List of options that can be used for the user selectable length menu.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         */\n        \"aLengthMenu\": null,\n\n        /**\n         * Counter for the draws that the table does. Also used as a tracker for\n         * server-side processing\n         */\n        \"iDraw\": 0,\n\n        /**\n         * Indicate if a redraw is being done - useful for Ajax\n         */\n        \"bDrawing\": false,\n\n        /**\n         * Draw index (iDraw) of the last error when parsing the returned data\n         */\n        \"iDrawError\": -1,\n\n        /**\n         * Paging display length\n         */\n        \"_iDisplayLength\": 10,\n\n        /**\n         * Paging start point - aiDisplay index\n         */\n        \"_iDisplayStart\": 0,\n\n        /**\n         * Server-side processing - number of records in the result set\n         * (i.e. before filtering), Use fnRecordsTotal rather than\n         * this property to get the value of the number of records, regardless of\n         * the server-side processing setting.\n         */\n        \"_iRecordsTotal\": 0,\n\n        /**\n         * Server-side processing - number of records in the current display set\n         * (i.e. after filtering). Use fnRecordsDisplay rather than\n         * this property to get the value of the number of records, regardless of\n         * the server-side processing setting.\n         */\n        \"_iRecordsDisplay\": 0,\n\n        /**\n         * The classes to use for the table\n         */\n        \"oClasses\": {},\n\n        /**\n         * Flag attached to the settings object so you can check in the draw\n         * callback if filtering has been done in the draw. Deprecated in favour of\n         * events.\n         *  @deprecated\n         */\n        \"bFiltered\": false,\n\n        /**\n         * Flag attached to the settings object so you can check in the draw\n         * callback if sorting has been done in the draw. Deprecated in favour of\n         * events.\n         *  @deprecated\n         */\n        \"bSorted\": false,\n\n        /**\n         * Indicate that if multiple rows are in the header and there is more than\n         * one unique cell per column, if the top one (true) or bottom one (false)\n         * should be used for sorting / title by DataTables.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         */\n        \"bSortCellsTop\": null,\n\n        /**\n         * Initialisation object that is used for the table\n         */\n        \"oInit\": null,\n\n        /**\n         * Destroy callback functions - for plug-ins to attach themselves to the\n         * destroy so they can clean up markup and events.\n         */\n        \"aoDestroyCallback\": [],\n\n\n        /**\n         * Get the number of records in the current record set, before filtering\n         */\n        \"fnRecordsTotal\": function() {\n            return _fnDataSource(this) == 'ssp' ?\n                this._iRecordsTotal * 1 :\n                this.aiDisplayMaster.length;\n        },\n\n        /**\n         * Get the number of records in the current record set, after filtering\n         */\n        \"fnRecordsDisplay\": function() {\n            return _fnDataSource(this) == 'ssp' ?\n                this._iRecordsDisplay * 1 :\n                this.aiDisplay.length;\n        },\n\n        /**\n         * Get the display end point - aiDisplay index\n         */\n        \"fnDisplayEnd\": function() {\n            var\n                len = this._iDisplayLength,\n                start = this._iDisplayStart,\n                calc = start + len,\n                records = this.aiDisplay.length,\n                features = this.oFeatures,\n                paginate = features.bPaginate;\n\n            if (features.bServerSide) {\n                return paginate === false || len === -1 ?\n                    start + records :\n                    Math.min(start + len, this._iRecordsDisplay);\n            } else {\n                return !paginate || calc > records || len === -1 ?\n                    records :\n                    calc;\n            }\n        },\n\n        /**\n         * The DataTables object for this table\n         */\n        \"oInstance\": null,\n\n        /**\n         * Unique identifier for each instance of the DataTables object. If there\n         * is an ID on the table node, then it takes that value, otherwise an\n         * incrementing internal counter is used.\n         */\n        \"sInstance\": null,\n\n        /**\n         * Tabindex attribute value that is added to DataTables control elements, allowing\n         * keyboard navigation of the table and its controls.\n         */\n        \"iTabIndex\": 0,\n\n        /**\n         * DIV container for the footer scrolling table if scrolling\n         */\n        \"nScrollHead\": null,\n\n        /**\n         * DIV container for the footer scrolling table if scrolling\n         */\n        \"nScrollFoot\": null,\n\n        /**\n         * Last applied sort\n         */\n        \"aLastSort\": [],\n\n        /**\n         * Stored plug-in instances\n         */\n        \"oPlugins\": {},\n\n        /**\n         * Function used to get a row's id from the row's data\n         */\n        \"rowIdFn\": null,\n\n        /**\n         * Data location where to store a row's id\n         */\n        \"rowId\": null,\n\n        caption: '',\n\n        captionNode: null,\n\n        colgroup: null\n    };\n\n    /**\n     * Extension object for DataTables that is used to provide all extension\n     * options.\n     *\n     * Note that the `DataTable.ext` object is available through\n     * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is\n     * also aliased to `jQuery.fn.dataTableExt` for historic reasons.\n     *  @namespace\n     *  @extends DataTable.models.ext\n     */\n\n\n    /**\n     * DataTables extensions\n     *\n     * This namespace acts as a collection area for plug-ins that can be used to\n     * extend DataTables capabilities. Indeed many of the build in methods\n     * use this method to provide their own capabilities (sorting methods for\n     * example).\n     *\n     * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy\n     * reasons\n     *\n     *  @namespace\n     */\n    DataTable.ext = _ext = {\n        /**\n         * Buttons. For use with the Buttons extension for DataTables. This is\n         * defined here so other extensions can define buttons regardless of load\n         * order. It is _not_ used by DataTables core.\n         *\n         *  @type object\n         *  @default {}\n         */\n        buttons: {},\n\n\n        /**\n         * Element class names\n         *\n         *  @type object\n         *  @default {}\n         */\n        classes: {},\n\n\n        /**\n         * DataTables build type (expanded by the download builder)\n         *\n         *  @type string\n         */\n        builder: \"-source-\",\n\n\n        /**\n         * Error reporting.\n         *\n         * How should DataTables report an error. Can take the value 'alert',\n         * 'throw', 'none' or a function.\n         *\n         *  @type string|function\n         *  @default alert\n         */\n        errMode: \"alert\",\n\n\n        /**\n         * Legacy so v1 plug-ins don't throw js errors on load\n         */\n        feature: [],\n\n        /**\n         * Feature plug-ins.\n         *\n         * This is an object of callbacks which provide the features for DataTables\n         * to be initialised via the `layout` option.\n         */\n        features: {},\n\n\n        /**\n         * Row searching.\n         *\n         * This method of searching is complimentary to the default type based\n         * searching, and a lot more comprehensive as it allows you complete control\n         * over the searching logic. Each element in this array is a function\n         * (parameters described below) that is called for every row in the table,\n         * and your logic decides if it should be included in the searching data set\n         * or not.\n         *\n         * Searching functions have the following input parameters:\n         *\n         * 1. `{object}` DataTables settings object: see\n         *    {@link DataTable.models.oSettings}\n         * 2. `{array|object}` Data for the row to be processed (same as the\n         *    original format that was passed in as the data source, or an array\n         *    from a DOM data source\n         * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which\n         *    can be useful to retrieve the `TR` element if you need DOM interaction.\n         *\n         * And the following return is expected:\n         *\n         * * {boolean} Include the row in the searched result set (true) or not\n         *   (false)\n         *\n         * Note that as with the main search ability in DataTables, technically this\n         * is \"filtering\", since it is subtractive. However, for consistency in\n         * naming we call it searching here.\n         *\n         *  @type array\n         *  @default []\n         *\n         *  @example\n         *    // The following example shows custom search being applied to the\n         *    // fourth column (i.e. the data[3] index) based on two input values\n         *    // from the end-user, matching the data in a certain range.\n         *    $.fn.dataTable.ext.search.push(\n         *      function( settings, data, dataIndex ) {\n         *        var min = document.getElementById('min').value * 1;\n         *        var max = document.getElementById('max').value * 1;\n         *        var version = data[3] == \"-\" ? 0 : data[3]*1;\n         *\n         *        if ( min == \"\" && max == \"\" ) {\n         *          return true;\n         *        }\n         *        else if ( min == \"\" && version < max ) {\n         *          return true;\n         *        }\n         *        else if ( min < version && \"\" == max ) {\n         *          return true;\n         *        }\n         *        else if ( min < version && version < max ) {\n         *          return true;\n         *        }\n         *        return false;\n         *      }\n         *    );\n         */\n        search: [],\n\n\n        /**\n         * Selector extensions\n         *\n         * The `selector` option can be used to extend the options available for the\n         * selector modifier options (`selector-modifier` object data type) that\n         * each of the three built in selector types offer (row, column and cell +\n         * their plural counterparts). For example the Select extension uses this\n         * mechanism to provide an option to select only rows, columns and cells\n         * that have been marked as selected by the end user (`{selected: true}`),\n         * which can be used in conjunction with the existing built in selector\n         * options.\n         *\n         * Each property is an array to which functions can be pushed. The functions\n         * take three attributes:\n         *\n         * * Settings object for the host table\n         * * Options object (`selector-modifier` object type)\n         * * Array of selected item indexes\n         *\n         * The return is an array of the resulting item indexes after the custom\n         * selector has been applied.\n         *\n         *  @type object\n         */\n        selector: {\n            cell: [],\n            column: [],\n            row: []\n        },\n\n\n        /**\n         * Legacy configuration options. Enable and disable legacy options that\n         * are available in DataTables.\n         *\n         *  @type object\n         */\n        legacy: {\n            /**\n             * Enable / disable DataTables 1.9 compatible server-side processing\n             * requests\n             *\n             *  @type boolean\n             *  @default null\n             */\n            ajax: null\n        },\n\n\n        /**\n         * Pagination plug-in methods.\n         *\n         * Each entry in this object is a function and defines which buttons should\n         * be shown by the pagination rendering method that is used for the table:\n         * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the\n         * buttons are displayed in the document, while the functions here tell it\n         * what buttons to display. This is done by returning an array of button\n         * descriptions (what each button will do).\n         *\n         * Pagination types (the four built in options and any additional plug-in\n         * options defined here) can be used through the `paginationType`\n         * initialisation parameter.\n         *\n         * The functions defined take two parameters:\n         *\n         * 1. `{int} page` The current page index\n         * 2. `{int} pages` The number of pages in the table\n         *\n         * Each function is expected to return an array where each element of the\n         * array can be one of:\n         *\n         * * `first` - Jump to first page when activated\n         * * `last` - Jump to last page when activated\n         * * `previous` - Show previous page when activated\n         * * `next` - Show next page when activated\n         * * `{int}` - Show page of the index given\n         * * `{array}` - A nested array containing the above elements to add a\n         *   containing 'DIV' element (might be useful for styling).\n         *\n         * Note that DataTables v1.9- used this object slightly differently whereby\n         * an object with two functions would be defined for each plug-in. That\n         * ability is still supported by DataTables 1.10+ to provide backwards\n         * compatibility, but this option of use is now decremented and no longer\n         * documented in DataTables 1.10+.\n         *\n         *  @type object\n         *  @default {}\n         *\n         *  @example\n         *    // Show previous, next and current page buttons only\n         *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {\n         *      return [ 'previous', page, 'next' ];\n         *    };\n         */\n        pager: {},\n\n\n        renderer: {\n            pageButton: {},\n            header: {}\n        },\n\n\n        /**\n         * Ordering plug-ins - custom data source\n         *\n         * The extension options for ordering of data available here is complimentary\n         * to the default type based ordering that DataTables typically uses. It\n         * allows much greater control over the the data that is being used to\n         * order a column, but is necessarily therefore more complex.\n         *\n         * This type of ordering is useful if you want to do ordering based on data\n         * live from the DOM (for example the contents of an 'input' element) rather\n         * than just the static string that DataTables knows of.\n         *\n         * The way these plug-ins work is that you create an array of the values you\n         * wish to be ordering for the column in question and then return that\n         * array. The data in the array much be in the index order of the rows in\n         * the table (not the currently ordering order!). Which order data gathering\n         * function is run here depends on the `dt-init columns.orderDataType`\n         * parameter that is used for the column (if any).\n         *\n         * The functions defined take two parameters:\n         *\n         * 1. `{object}` DataTables settings object: see\n         *    {@link DataTable.models.oSettings}\n         * 2. `{int}` Target column index\n         *\n         * Each function is expected to return an array:\n         *\n         * * `{array}` Data for the column to be ordering upon\n         *\n         *  @type array\n         *\n         *  @example\n         *    // Ordering using `input` node values\n         *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )\n         *    {\n         *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {\n         *        return $('input', td).val();\n         *      } );\n         *    }\n         */\n        order: {},\n\n\n        /**\n         * Type based plug-ins.\n         *\n         * Each column in DataTables has a type assigned to it, either by automatic\n         * detection or by direct assignment using the `type` option for the column.\n         * The type of a column will effect how it is ordering and search (plug-ins\n         * can also make use of the column type if required).\n         *\n         * @namespace\n         */\n        type: {\n            /**\n             * Automatic column class assignment\n             */\n            className: {},\n\n            /**\n             * Type detection functions.\n             *\n             * The functions defined in this object are used to automatically detect\n             * a column's type, making initialisation of DataTables super easy, even\n             * when complex data is in the table.\n             *\n             * The functions defined take two parameters:\n             *\n             *  1. `{*}` Data from the column cell to be analysed\n             *  2. `{settings}` DataTables settings object. This can be used to\n             *     perform context specific type detection - for example detection\n             *     based on language settings such as using a comma for a decimal\n             *     place. Generally speaking the options from the settings will not\n             *     be required\n             *\n             * Each function is expected to return:\n             *\n             * * `{string|null}` Data type detected, or null if unknown (and thus\n             *   pass it on to the other type detection functions.\n             *\n             *  @type array\n             *\n             *  @example\n             *    // Currency type detection plug-in:\n             *    $.fn.dataTable.ext.type.detect.push(\n             *      function ( data, settings ) {\n             *        // Check the numeric part\n             *        if ( ! data.substring(1).match(/[0-9]/) ) {\n             *          return null;\n             *        }\n             *\n             *        // Check prefixed by currency\n             *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {\n             *          return 'currency';\n             *        }\n             *        return null;\n             *      }\n             *    );\n             */\n            detect: [],\n\n            /**\n             * Automatic renderer assignment\n             */\n            render: {},\n\n\n            /**\n             * Type based search formatting.\n             *\n             * The type based searching functions can be used to pre-format the\n             * data to be search on. For example, it can be used to strip HTML\n             * tags or to de-format telephone numbers for numeric only searching.\n             *\n             * Note that is a search is not defined for a column of a given type,\n             * no search formatting will be performed.\n             *\n             * Pre-processing of searching data plug-ins - When you assign the sType\n             * for a column (or have it automatically detected for you by DataTables\n             * or a type detection plug-in), you will typically be using this for\n             * custom sorting, but it can also be used to provide custom searching\n             * by allowing you to pre-processing the data and returning the data in\n             * the format that should be searched upon. This is done by adding\n             * functions this object with a parameter name which matches the sType\n             * for that target column. This is the corollary of <i>afnSortData</i>\n             * for searching data.\n             *\n             * The functions defined take a single parameter:\n             *\n             *  1. `{*}` Data from the column cell to be prepared for searching\n             *\n             * Each function is expected to return:\n             *\n             * * `{string|null}` Formatted string that will be used for the searching.\n             *\n             *  @type object\n             *  @default {}\n             *\n             *  @example\n             *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {\n             *      return d.replace(/\\n/g,\" \").replace( /<.*?>/g, \"\" );\n             *    }\n             */\n            search: {},\n\n\n            /**\n             * Type based ordering.\n             *\n             * The column type tells DataTables what ordering to apply to the table\n             * when a column is sorted upon. The order for each type that is defined,\n             * is defined by the functions available in this object.\n             *\n             * Each ordering option can be described by three properties added to\n             * this object:\n             *\n             * * `{type}-pre` - Pre-formatting function\n             * * `{type}-asc` - Ascending order function\n             * * `{type}-desc` - Descending order function\n             *\n             * All three can be used together, only `{type}-pre` or only\n             * `{type}-asc` and `{type}-desc` together. It is generally recommended\n             * that only `{type}-pre` is used, as this provides the optimal\n             * implementation in terms of speed, although the others are provided\n             * for compatibility with existing Javascript sort functions.\n             *\n             * `{type}-pre`: Functions defined take a single parameter:\n             *\n             *  1. `{*}` Data from the column cell to be prepared for ordering\n             *\n             * And return:\n             *\n             * * `{*}` Data to be sorted upon\n             *\n             * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort\n             * functions, taking two parameters:\n             *\n             *  1. `{*}` Data to compare to the second parameter\n             *  2. `{*}` Data to compare to the first parameter\n             *\n             * And returning:\n             *\n             * * `{*}` Ordering match: <0 if first parameter should be sorted lower\n             *   than the second parameter, ===0 if the two parameters are equal and\n             *   >0 if the first parameter should be sorted height than the second\n             *   parameter.\n             *\n             *  @type object\n             *  @default {}\n             *\n             *  @example\n             *    // Numeric ordering of formatted numbers with a pre-formatter\n             *    $.extend( $.fn.dataTable.ext.type.order, {\n             *      \"string-pre\": function(x) {\n             *        a = (a === \"-\" || a === \"\") ? 0 : a.replace( /[^\\d\\-\\.]/g, \"\" );\n             *        return parseFloat( a );\n             *      }\n             *    } );\n             *\n             *  @example\n             *    // Case-sensitive string ordering, with no pre-formatting method\n             *    $.extend( $.fn.dataTable.ext.order, {\n             *      \"string-case-asc\": function(x,y) {\n             *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n             *      },\n             *      \"string-case-desc\": function(x,y) {\n             *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));\n             *      }\n             *    } );\n             */\n            order: {}\n        },\n\n        /**\n         * Unique DataTables instance counter\n         *\n         * @type int\n         * @private\n         */\n        _unique: 0,\n\n\n        //\n        // Depreciated\n        // The following properties are retained for backwards compatibility only.\n        // The should not be used in new projects and will be removed in a future\n        // version\n        //\n\n        /**\n         * Version check function.\n         *  @type function\n         *  @depreciated Since 1.10\n         */\n        fnVersionCheck: DataTable.fnVersionCheck,\n\n\n        /**\n         * Index for what 'this' index API functions should use\n         *  @type int\n         *  @deprecated Since v1.10\n         */\n        iApiIndex: 0,\n\n\n        /**\n         * Software version\n         *  @type string\n         *  @deprecated Since v1.10\n         */\n        sVersion: DataTable.version\n    };\n\n\n    //\n    // Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts\n    //\n    $.extend(_ext, {\n        afnFiltering: _ext.search,\n        aTypes: _ext.type.detect,\n        ofnSearch: _ext.type.search,\n        oSort: _ext.type.order,\n        afnSortData: _ext.order,\n        aoFeatures: _ext.feature,\n        oStdClasses: _ext.classes,\n        oPagination: _ext.pager\n    });\n\n\n    $.extend(DataTable.ext.classes, {\n        container: 'dt-container',\n        empty: {\n            row: 'dt-empty'\n        },\n        info: {\n            container: 'dt-info'\n        },\n        length: {\n            container: 'dt-length',\n            select: 'dt-input'\n        },\n        order: {\n            canAsc: 'dt-orderable-asc',\n            canDesc: 'dt-orderable-desc',\n            isAsc: 'dt-ordering-asc',\n            isDesc: 'dt-ordering-desc',\n            none: 'dt-orderable-none',\n            position: 'sorting_'\n        },\n        processing: {\n            container: 'dt-processing'\n        },\n        scrolling: {\n            body: 'dt-scroll-body',\n            container: 'dt-scroll',\n            footer: {\n                self: 'dt-scroll-foot',\n                inner: 'dt-scroll-footInner'\n            },\n            header: {\n                self: 'dt-scroll-head',\n                inner: 'dt-scroll-headInner'\n            }\n        },\n        search: {\n            container: 'dt-search',\n            input: 'dt-input'\n        },\n        table: 'dataTable',\n        tbody: {\n            cell: '',\n            row: ''\n        },\n        thead: {\n            cell: '',\n            row: ''\n        },\n        tfoot: {\n            cell: '',\n            row: ''\n        },\n        paging: {\n            active: 'current',\n            button: 'dt-paging-button',\n            container: 'dt-paging',\n            disabled: 'disabled'\n        }\n    });\n\n\n    var extPagination = DataTable.ext.pager;\n\n    // Paging buttons configuration\n    $.extend(extPagination, {\n        simple: function() {\n            return ['previous', 'next'];\n        },\n\n        full: function() {\n            return ['first', 'previous', 'next', 'last'];\n        },\n\n        numbers: function() {\n            return ['numbers'];\n        },\n\n        simple_numbers: function() {\n            return ['previous', 'numbers', 'next'];\n        },\n\n        full_numbers: function() {\n            return ['first', 'previous', 'numbers', 'next', 'last'];\n        },\n\n        first_last: function() {\n            return ['first', 'last'];\n        },\n\n        first_last_numbers: function() {\n            return ['first', 'numbers', 'last'];\n        },\n\n        // For testing and plug-ins to use\n        _numbers: _pagingNumbers,\n\n        // Number of number buttons - legacy, use `numbers` option for paging feature\n        numbers_length: 7\n    });\n\n\n    $.extend(true, DataTable.ext.renderer, {\n        pagingButton: {\n            _: function(settings, buttonType, content, active, disabled) {\n                var classes = settings.oClasses.paging;\n                var btnClasses = [classes.button];\n                var btn;\n\n                if (active) {\n                    btnClasses.push(classes.active);\n                }\n\n                if (disabled) {\n                    btnClasses.push(classes.disabled);\n                }\n\n                if (buttonType === 'ellipsis') {\n                    btn = $('<span class=\"ellipsis\"></span>').html(content)[0];\n                } else {\n                    btn = $('<button>', {\n                        \"class\": btnClasses.join(' '),\n                        role: 'link',\n                        type: 'button'\n                    }).html(content);\n                }\n\n                return {\n                    display: btn,\n                    clicker: btn\n                };\n            }\n        },\n\n        pagingContainer: {\n            _: function(settings, buttons) {\n                // No wrapping element - just append directly to the host\n                return buttons;\n            }\n        }\n    });\n\n    // Common function to remove new lines, strip HTML and diacritic control\n    var _filterString = function(stripHtml, normalize) {\n        return function(str) {\n            if (_empty(str) || typeof str !== 'string') {\n                return str;\n            }\n\n            str = str.replace(_re_new_lines, \" \");\n\n            if (stripHtml) {\n                str = _stripHtml(str);\n            }\n\n            if (normalize) {\n                str = _normalize(str, false);\n            }\n\n            return str;\n        };\n    };\n\n    /*\n     * Public helper functions. These aren't used internally by DataTables, or\n     * called by any of the options passed into DataTables, but they can be used\n     * externally by developers working with DataTables. They are helper functions\n     * to make working with DataTables a little bit easier.\n     */\n\n    /**\n     * @param name\n     */\n    function __mldFnName(name) {\n        return name.replace(/[\\W]/g, '_');\n    }\n\n    // Common logic for moment, luxon or a date action\n    /**\n     * @param dt\n     * @param momentFn\n     * @param luxonFn\n     * @param dateFn\n     * @param arg1\n     */\n    function __mld(dt, momentFn, luxonFn, dateFn, arg1) {\n        if (window.moment) {\n            return dt[momentFn](arg1);\n        } else if (window.luxon) {\n            return dt[luxonFn](arg1);\n        }\n\n        return dateFn ? dt[dateFn](arg1) : dt;\n    }\n\n\n    var __mlWarning = false;\n    /**\n     * @param d\n     * @param format\n     * @param locale\n     */\n    function __mldObj(d, format, locale) {\n        var dt;\n\n        if (window.moment) {\n            dt = window.moment.utc(d, format, locale, true);\n\n            if (!dt.isValid()) {\n                return null;\n            }\n        } else if (window.luxon) {\n            dt = format && typeof d === 'string'\n                ? window.luxon.DateTime.fromFormat(d, format)\n                : window.luxon.DateTime.fromISO(d);\n\n            if (!dt.isValid) {\n                return null;\n            }\n\n            dt.setLocale(locale);\n        } else if (!format) {\n            // No format given, must be ISO\n            dt = new Date(d);\n        } else {\n            if (!__mlWarning) {\n                alert('DataTables warning: Formatted date without Moment.js or Luxon - https://datatables.net/tn/17');\n            }\n\n            __mlWarning = true;\n        }\n\n        return dt;\n    }\n\n    // Wrapper for date, datetime and time which all operate the same way with the exception of\n    // the output string for auto locale support\n    /**\n     * @param localeString\n     */\n    function __mlHelper(localeString) {\n        return function(from, to, locale, def) {\n            // Luxon and Moment support\n            // Argument shifting\n            if (arguments.length === 0) {\n                locale = 'en';\n                to = null; // Means toLocaleString\n                from = null; // Means iso8601\n            } else if (arguments.length === 1) {\n                locale = 'en';\n                to = from;\n                from = null;\n            } else if (arguments.length === 2) {\n                locale = to;\n                to = from;\n                from = null;\n            }\n\n            var typeName = 'datetime' + (to ? '-' + __mldFnName(to) : '');\n\n            // Add type detection and sorting specific to this date format - we need to be able to identify\n            // date type columns as such, rather than as numbers in extensions. Hence the need for this.\n            if (!DataTable.ext.type.order[typeName]) {\n                DataTable.type(typeName, {\n                    detect: function(d) {\n                        // The renderer will give the value to type detect as the type!\n                        return d === typeName ? typeName : false;\n                    },\n                    order: {\n                        pre: function(d) {\n                            // The renderer gives us Moment, Luxon or Date obects for the sorting, all of which have a\n                            // `valueOf` which gives milliseconds epoch\n                            return d.valueOf();\n                        }\n                    },\n                    className: 'dt-right'\n                });\n            }\n\n            return function(d, type) {\n                // Allow for a default value\n                if (d === null || d === undefined) {\n                    if (def === '--now') {\n                        // We treat everything as UTC further down, so no changes are\n                        // made, as such need to get the local date / time as if it were\n                        // UTC\n                        var local = new Date();\n                        d = new Date(Date.UTC(\n                            local.getFullYear(), local.getMonth(), local.getDate(),\n                            local.getHours(), local.getMinutes(), local.getSeconds()\n                        ));\n                    } else {\n                        d = '';\n                    }\n                }\n\n                if (type === 'type') {\n                    // Typing uses the type name for fast matching\n                    return typeName;\n                }\n\n                if (d === '') {\n                    return type !== 'sort'\n                        ? ''\n                        : __mldObj('0000-01-01 00:00:00', null, locale);\n                }\n\n                // Shortcut. If `from` and `to` are the same, we are using the renderer to\n                // format for ordering, not display - its already in the display format.\n                if (to !== null && from === to && type !== 'sort' && type !== 'type' && !(d instanceof Date)) {\n                    return d;\n                }\n\n                var dt = __mldObj(d, from, locale);\n\n                if (dt === null) {\n                    return d;\n                }\n\n                if (type === 'sort') {\n                    return dt;\n                }\n\n                var formatted = to === null\n                    ? __mld(dt, 'toDate', 'toJSDate', '')[localeString]()\n                    : __mld(dt, 'format', 'toFormat', 'toISOString', to);\n\n                // XSS protection\n                return type === 'display' ?\n                    _escapeHtml(formatted) :\n                    formatted;\n            };\n        };\n    }\n\n    // Based on locale, determine standard number formatting\n    // Fallback for legacy browsers is US English\n    var __thousands = ',';\n    var __decimal = '.';\n\n    if (window.Intl !== undefined) {\n        try {\n            var num = new Intl.NumberFormat().formatToParts(100000.1);\n\n            for (var i = 0; i < num.length; i++) {\n                if (num[i].type === 'group') {\n                    __thousands = num[i].value;\n                } else if (num[i].type === 'decimal') {\n                    __decimal = num[i].value;\n                }\n            }\n        } catch (e) {\n            // Noop\n        }\n    }\n\n    // Formatted date time detection - use by declaring the formats you are going to use\n    DataTable.datetime = function(format, locale) {\n        var typeName = 'datetime-detect-' + __mldFnName(format);\n\n        if (!locale) {\n            locale = 'en';\n        }\n\n        if (!DataTable.ext.type.order[typeName]) {\n            DataTable.type(typeName, {\n                detect: function(d) {\n                    var dt = __mldObj(d, format, locale);\n                    return d === '' || dt ? typeName : false;\n                },\n                order: {\n                    pre: function(d) {\n                        return __mldObj(d, format, locale) || 0;\n                    }\n                },\n                className: 'dt-right'\n            });\n        }\n    };\n\n    /**\n     * Helpers for `columns.render`.\n     *\n     * The options defined here can be used with the `columns.render` initialisation\n     * option to provide a display renderer. The following functions are defined:\n     *\n     * * `moment` - Uses the MomentJS library to convert from a given format into another.\n     * This renderer has three overloads:\n     *   * 1 parameter:\n     *     * `string` - Format to convert to (assumes input is ISO8601 and locale is `en`)\n     *   * 2 parameters:\n     *     * `string` - Format to convert from\n     *     * `string` - Format to convert to. Assumes `en` locale\n     *   * 3 parameters:\n     *     * `string` - Format to convert from\n     *     * `string` - Format to convert to\n     *     * `string` - Locale\n     * * `number` - Will format numeric data (defined by `columns.data`) for\n     *   display, retaining the original unformatted data for sorting and filtering.\n     *   It takes 5 parameters:\n     *   * `string` - Thousands grouping separator\n     *   * `string` - Decimal point indicator\n     *   * `integer` - Number of decimal points to show\n     *   * `string` (optional) - Prefix.\n     *   * `string` (optional) - Postfix (/suffix).\n     * * `text` - Escape HTML to help prevent XSS attacks. It has no optional\n     *   parameters.\n     *\n     * @example\n     *   // Column definition using the number renderer\n     *   {\n     *     data: \"salary\",\n     *     render: $.fn.dataTable.render.number( '\\'', '.', 0, '$' )\n     *   }\n     *\n     * @namespace\n     */\n    DataTable.render = {\n        date: __mlHelper('toLocaleDateString'),\n        datetime: __mlHelper('toLocaleString'),\n        time: __mlHelper('toLocaleTimeString'),\n        number: function(thousands, decimal, precision, prefix, postfix) {\n            // Auto locale detection\n            if (thousands === null || thousands === undefined) {\n                thousands = __thousands;\n            }\n\n            if (decimal === null || decimal === undefined) {\n                decimal = __decimal;\n            }\n\n            return {\n                display: function(d) {\n                    if (typeof d !== 'number' && typeof d !== 'string') {\n                        return d;\n                    }\n\n                    if (d === '' || d === null) {\n                        return d;\n                    }\n\n                    var negative = d < 0 ? '-' : '';\n                    var flo = parseFloat(d);\n                    var abs = Math.abs(flo);\n\n                    // Scientific notation for large and small numbers\n                    if (abs >= 100000000000 || (abs < 0.0001 && abs !== 0)) {\n                        var exp = flo.toExponential(precision).split(/e\\+?/);\n                        return exp[0] + ' x 10<sup>' + exp[1] + '</sup>';\n                    }\n\n                    // If NaN then there isn't much formatting that we can do - just\n                    // return immediately, escaping any HTML (this was supposed to\n                    // be a number after all)\n                    if (isNaN(flo)) {\n                        return _escapeHtml(d);\n                    }\n\n                    flo = flo.toFixed(precision);\n                    d = Math.abs(flo);\n\n                    var intPart = parseInt(d, 10);\n                    var floatPart = precision ?\n                        decimal + (d - intPart).toFixed(precision).substring(2) :\n                        '';\n\n                    // If zero, then can't have a negative prefix\n                    if (intPart === 0 && parseFloat(floatPart) === 0) {\n                        negative = '';\n                    }\n\n                    return negative + (prefix || '') +\n                        intPart.toString().replace(\n                            /\\B(?=(\\d{3})+(?!\\d))/g, thousands\n                        ) +\n                        floatPart +\n                        (postfix || '');\n                }\n            };\n        },\n\n        text: function() {\n            return {\n                display: _escapeHtml,\n                filter: _escapeHtml\n            };\n        }\n    };\n\n\n    var _extTypes = DataTable.ext.type;\n\n    // Get / set type\n    DataTable.type = function(name, prop, val) {\n        if (!prop) {\n            return {\n                className: _extTypes.className[name],\n                detect: _extTypes.detect.find(function(fn) {\n                    return fn.name === name;\n                }),\n                order: {\n                    pre: _extTypes.order[name + '-pre'],\n                    asc: _extTypes.order[name + '-asc'],\n                    desc: _extTypes.order[name + '-desc']\n                },\n                render: _extTypes.render[name],\n                search: _extTypes.search[name]\n            };\n        }\n\n        var setProp = function(prop, propVal) {\n            _extTypes[prop][name] = propVal;\n        };\n        var setDetect = function(fn) {\n            // Wrap to allow the function to return `true` rather than\n            // specifying the type name.\n            var cb = function(d, s) {\n                var ret = fn(d, s);\n\n                return ret === true\n                    ? name\n                    : ret;\n            };\n            Object.defineProperty(cb, \"name\", {value: name});\n\n            var idx = _extTypes.detect.findIndex(function(fn) {\n                return fn.name === name;\n            });\n\n            if (idx === -1) {\n                _extTypes.detect.unshift(cb);\n            } else {\n                _extTypes.detect.splice(idx, 1, cb);\n            }\n        };\n        var setOrder = function(obj) {\n            _extTypes.order[name + '-pre'] = obj.pre; // Can be undefined\n            _extTypes.order[name + '-asc'] = obj.asc; // Can be undefined\n            _extTypes.order[name + '-desc'] = obj.desc; // Can be undefined\n        };\n\n        // Prop is optional\n        if (val === undefined) {\n            val = prop;\n            prop = null;\n        }\n\n        if (prop === 'className') {\n            setProp('className', val);\n        } else if (prop === 'detect') {\n            setDetect(val);\n        } else if (prop === 'order') {\n            setOrder(val);\n        } else if (prop === 'render') {\n            setProp('render', val);\n        } else if (prop === 'search') {\n            setProp('search', val);\n        } else if (!prop) {\n            if (val.className) {\n                setProp('className', val.className);\n            }\n\n            if (val.detect !== undefined) {\n                setDetect(val.detect);\n            }\n\n            if (val.order) {\n                setOrder(val.order);\n            }\n\n            if (val.render !== undefined) {\n                setProp('render', val.render);\n            }\n\n            if (val.search !== undefined) {\n                setProp('search', val.search);\n            }\n        }\n    };\n\n    // Get a list of types\n    DataTable.types = function() {\n        return _extTypes.detect.map(function(fn) {\n            return fn.name;\n        });\n    };\n\n    //\n    // Built in data types\n    //\n\n    DataTable.type('string', {\n        detect: function() {\n            return 'string';\n        },\n        order: {\n            pre: function(a) {\n                // This is a little complex, but faster than always calling toString,\n                // http://jsperf.com/tostring-v-check\n                return _empty(a) ?\n                    '' :\n                    typeof a === 'string' ?\n                        a.toLowerCase() :\n                        !a.toString ?\n                            '' :\n                            a.toString();\n            }\n        },\n        search: _filterString(false, true)\n    });\n\n\n    DataTable.type('html', {\n        detect: function(d) {\n            return _empty(d) || (typeof d === 'string' && d.indexOf('<') !== -1) ?\n                'html' : null;\n        },\n        order: {\n            pre: function(a) {\n                return _empty(a) ?\n                    '' :\n                    a.replace ?\n                        _stripHtml(a).trim().toLowerCase() :\n                        a + '';\n            }\n        },\n        search: _filterString(true, true)\n    });\n\n\n    DataTable.type('date', {\n        className: 'dt-type-date',\n        detect: function(d) {\n            // V8 tries _very_ hard to make a string passed into `Date.parse()`\n            // valid, so we need to use a regex to restrict date formats. Use a\n            // plug-in for anything other than ISO8601 style strings\n            if (d && !(d instanceof Date) && !_re_date.test(d)) {\n                return null;\n            }\n            var parsed = Date.parse(d);\n            return (parsed !== null && !isNaN(parsed)) || _empty(d) ? 'date' : null;\n        },\n        order: {\n            pre: function(d) {\n                var ts = Date.parse(d);\n                return isNaN(ts) ? -Infinity : ts;\n            }\n        }\n    });\n\n\n    DataTable.type('html-num-fmt', {\n        className: 'dt-type-numeric',\n        detect: function(d, settings) {\n            var decimal = settings.oLanguage.sDecimal;\n            return _htmlNumeric(d, decimal, true) ? 'html-num-fmt' : null;\n        },\n        order: {\n            pre: function(d, s) {\n                var dp = s.oLanguage.sDecimal;\n                return __numericReplace(d, dp, _re_html, _re_formatted_numeric);\n            }\n        },\n        search: _filterString(true, true)\n    });\n\n\n    DataTable.type('html-num', {\n        className: 'dt-type-numeric',\n        detect: function(d, settings) {\n            var decimal = settings.oLanguage.sDecimal;\n            return _htmlNumeric(d, decimal) ? 'html-num' : null;\n        },\n        order: {\n            pre: function(d, s) {\n                var dp = s.oLanguage.sDecimal;\n                return __numericReplace(d, dp, _re_html);\n            }\n        },\n        search: _filterString(true, true)\n    });\n\n\n    DataTable.type('num-fmt', {\n        className: 'dt-type-numeric',\n        detect: function(d, settings) {\n            var decimal = settings.oLanguage.sDecimal;\n            return _isNumber(d, decimal, true) ? 'num-fmt' : null;\n        },\n        order: {\n            pre: function(d, s) {\n                var dp = s.oLanguage.sDecimal;\n                return __numericReplace(d, dp, _re_formatted_numeric);\n            }\n        }\n    });\n\n\n    DataTable.type('num', {\n        className: 'dt-type-numeric',\n        detect: function(d, settings) {\n            var decimal = settings.oLanguage.sDecimal;\n            return _isNumber(d, decimal) ? 'num' : null;\n        },\n        order: {\n            pre: function(d, s) {\n                var dp = s.oLanguage.sDecimal;\n                return __numericReplace(d, dp);\n            }\n        }\n    });\n\n\n    var __numericReplace = function(d, decimalPlace, re1, re2) {\n        if (d !== 0 && (!d || d === '-')) {\n            return -Infinity;\n        }\n\n        var type = typeof d;\n\n        if (type === 'number' || type === 'bigint') {\n            return d;\n        }\n\n        // If a decimal place other than `.` is used, it needs to be given to the\n        // function so we can detect it and replace with a `.` which is the only\n        // decimal place Javascript recognises - it is not locale aware.\n        if (decimalPlace) {\n            d = _numToDecimal(d, decimalPlace);\n        }\n\n        if (d.replace) {\n            if (re1) {\n                d = d.replace(re1, '');\n            }\n\n            if (re2) {\n                d = d.replace(re2, '');\n            }\n        }\n\n        return d * 1;\n    };\n\n\n    $.extend(true, DataTable.ext.renderer, {\n        footer: {\n            _: function(settings, cell, classes) {\n                cell.addClass(classes.tfoot.cell);\n            }\n        },\n\n        header: {\n            _: function(settings, cell, classes) {\n                cell.addClass(classes.thead.cell);\n\n                if (!settings.oFeatures.bSort) {\n                    cell.addClass(classes.order.none);\n                }\n\n                var legacyTop = settings.bSortCellsTop;\n                var headerRows = cell.closest('thead').find('tr');\n                var rowIdx = cell.parent().index();\n\n                // Conditions to not apply the ordering icons\n                if (\n                    // Cells and rows which have the attribute to disable the icons\n                    cell.attr('data-dt-order') === 'disable' ||\n                    cell.parent().attr('data-dt-order') === 'disable' ||\n\n                    // Legacy support for `orderCellsTop`. If it is set, then cells\n                    // which are not in the top or bottom row of the header (depending\n                    // on the value) do not get the sorting classes applied to them\n                    (legacyTop === true && rowIdx !== 0) ||\n                    (legacyTop === false && rowIdx !== headerRows.length - 1)\n                ) {\n                    return;\n                }\n\n                // No additional mark-up required\n                // Attach a sort listener to update on sort - note that using the\n                // `DT` namespace will allow the event to be removed automatically\n                // on destroy, while the `dt` namespaced event is the one we are\n                // listening for\n                $(settings.nTable).on('order.dt.DT', function(e, ctx, sorting) {\n                    if (settings !== ctx) { // Need to check this this is the host\n                        return; // Table, not a nested one\n                    }\n\n                    var orderClasses = classes.order;\n                    var columns = ctx.api.columns(cell);\n                    var col = settings.aoColumns[columns.flatten()[0]];\n                    var orderable = columns.orderable().includes(true);\n                    var ariaType = '';\n                    var indexes = columns.indexes();\n                    var sortDirs = columns.orderable(true).flatten();\n                    var orderedColumns = sorting.map(function(val) {\n                        return val.col;\n                    }).join(',');\n\n                    cell\n                        .removeClass(\n                            orderClasses.isAsc + ' ' +\n                            orderClasses.isDesc\n                        )\n                        .toggleClass(orderClasses.none, !orderable)\n                        .toggleClass(orderClasses.canAsc, orderable && sortDirs.includes('asc'))\n                        .toggleClass(orderClasses.canDesc, orderable && sortDirs.includes('desc'));\n\n                    var sortIdx = orderedColumns.indexOf(indexes.toArray().join(','));\n\n                    if (sortIdx !== -1) {\n                        // Get the ordering direction for the columns under this cell\n                        // Note that it is possible for a cell to be asc and desc sorting\n                        // (column spanning cells)\n                        var orderDirs = columns.order();\n\n                        cell.addClass(\n                            orderDirs.includes('asc') ? orderClasses.isAsc : '' +\n                                orderDirs.includes('desc') ? orderClasses.isDesc : ''\n                        );\n                    }\n\n                    // The ARIA spec says that only one column should be marked with aria-sort\n                    if (sortIdx === 0 && orderedColumns.length === indexes.count()) {\n                        var firstSort = sorting[0];\n                        var sortOrder = col.asSorting;\n\n                        cell.attr('aria-sort', firstSort.dir === 'asc' ? 'ascending' : 'descending');\n\n                        // Determine if the next click will remove sorting or change the sort\n                        ariaType = !sortOrder[firstSort.index + 1] ? 'Remove' : 'Reverse';\n                    } else {\n                        cell.removeAttr('aria-sort');\n                    }\n\n                    cell.attr('aria-label', orderable\n                        ? col.ariaTitle + ctx.api.i18n('oAria.orderable' + ariaType)\n                        : col.ariaTitle\n                    );\n\n                    if (orderable) {\n                        cell.find('.dt-column-title').attr('role', 'button');\n                        cell.attr('tabindex', 0);\n                    }\n                });\n            }\n        },\n\n        layout: {\n            _: function(settings, container, items) {\n                var row = $('<div/>')\n                    .addClass('dt-layout-row')\n                    .appendTo(container);\n\n                $.each(items, function(key, val) {\n                    var klass = !val.table ?\n                        'dt-' + key + ' ' :\n                        '';\n\n                    if (val.table) {\n                        row.addClass('dt-layout-table');\n                    }\n\n                    $('<div/>')\n                        .attr({\n                            id: val.id || null,\n                            \"class\": 'dt-layout-cell ' + klass + (val.className || '')\n                        })\n                        .append(val.contents)\n                        .appendTo(row);\n                });\n            }\n        }\n    });\n\n\n    DataTable.feature = {};\n\n    // Third parameter is internal only!\n    DataTable.feature.register = function(name, cb, legacy) {\n        DataTable.ext.features[name] = cb;\n\n        if (legacy) {\n            _ext.feature.push({\n                cFeature: legacy,\n                fnInit: cb\n            });\n        }\n    };\n\n    DataTable.feature.register('info', function(settings, opts) {\n        // For compatibility with the legacy `info` top level option\n        if (!settings.oFeatures.bInfo) {\n            return null;\n        }\n\n        var\n            lang = settings.oLanguage,\n            tid = settings.sTableId,\n            n = $('<div/>', {\n                'class': settings.oClasses.info.container,\n            });\n\n        opts = $.extend({\n            callback: lang.fnInfoCallback,\n            empty: lang.sInfoEmpty,\n            postfix: lang.sInfoPostFix,\n            search: lang.sInfoFiltered,\n            text: lang.sInfo,\n        }, opts);\n\n\n        // Update display on each draw\n        settings.aoDrawCallback.push(function(s) {\n            _fnUpdateInfo(s, opts, n);\n        });\n\n        // For the first info display in the table, we add a callback and aria information.\n        if (!$('#' + tid + '_info', settings.nWrapper).length) {\n            n.attr({\n                'aria-live': 'polite',\n                id: tid + '_info',\n                role: 'status'\n            });\n\n            // Table is described by our info div\n            $(settings.nTable).attr('aria-describedby', tid + '_info');\n        }\n\n        return n;\n    }, 'i');\n\n    /**\n     * Update the information elements in the display\n     *  @param {object} settings dataTables settings object\n     * @param opts\n     * @param node\n     *  @memberof DataTable#oApi\n     */\n    function _fnUpdateInfo(settings, opts, node) {\n        var\n            start = settings._iDisplayStart + 1,\n            end = settings.fnDisplayEnd(),\n            max = settings.fnRecordsTotal(),\n            total = settings.fnRecordsDisplay(),\n            out = total\n                ? opts.text\n                : opts.empty;\n\n        if (total !== max) {\n            // Record set after filtering\n            out += ' ' + opts.search;\n        }\n\n        // Convert the macros\n        out += opts.postfix;\n        out = _fnMacros(settings, out);\n\n        if (opts.callback) {\n            out = opts.callback.call(settings.oInstance,\n                settings, start, end, max, total, out\n            );\n        }\n\n        node.html(out);\n\n        _fnCallbackFire(settings, null, 'info', [settings, node[0], out]);\n    }\n\n    var __searchCounter = 0;\n\n    // Opts\n    // - text\n    // - placeholder\n    DataTable.feature.register('search', function(settings, opts) {\n        // Don't show the input if filtering isn't available on the table\n        if (!settings.oFeatures.bFilter) {\n            return null;\n        }\n\n        var classes = settings.oClasses.search;\n        var tableId = settings.sTableId;\n        var language = settings.oLanguage;\n        var previousSearch = settings.oPreviousSearch;\n        var input = '<input type=\"search\" class=\"' + classes.input + '\"/>';\n\n        opts = $.extend({\n            placeholder: language.sSearchPlaceholder,\n            text: language.sSearch\n        }, opts);\n\n        // The _INPUT_ is optional - is appended if not present\n        if (opts.text.indexOf('_INPUT_') === -1) {\n            opts.text += '_INPUT_';\n        }\n\n        opts.text = _fnMacros(settings, opts.text);\n\n        // We can put the <input> outside of the label if it is at the start or end\n        // which helps improve accessability (not all screen readers like implicit\n        // for elements).\n        var end = opts.text.match(/_INPUT_$/);\n        var start = opts.text.match(/^_INPUT_/);\n        var removed = opts.text.replace(/_INPUT_/, '');\n        var str = '<label>' + opts.text + '</label>';\n\n        if (start) {\n            str = '_INPUT_<label>' + removed + '</label>';\n        } else if (end) {\n            str = '<label>' + removed + '</label>_INPUT_';\n        }\n\n        var filter = $('<div>')\n            .addClass(classes.container)\n            .append(str.replace(/_INPUT_/, input));\n\n        // Add for and id to label and input\n        filter.find('label').attr('for', 'dt-search-' + __searchCounter);\n        filter.find('input').attr('id', 'dt-search-' + __searchCounter);\n        __searchCounter++;\n\n        var searchFn = function(event) {\n            var val = this.value;\n\n            if (previousSearch.return && event.key !== \"Enter\") {\n                return;\n            }\n\n            /* Now do the filter */\n            if (val != previousSearch.search) {\n                previousSearch.search = val;\n\n                _fnFilterComplete(settings, previousSearch);\n\n                // Need to redraw, without resorting\n                settings._iDisplayStart = 0;\n                _fnDraw(settings);\n            }\n        };\n\n        var searchDelay = settings.searchDelay !== null ?\n            settings.searchDelay :\n            0;\n\n        var jqFilter = $('input', filter)\n            .val(previousSearch.search)\n            .attr('placeholder', opts.placeholder)\n            .on(\n                'keyup.DT search.DT input.DT paste.DT cut.DT',\n                searchDelay ?\n                    DataTable.util.debounce(searchFn, searchDelay) :\n                    searchFn\n            )\n            .on('mouseup.DT', function(e) {\n                // Edge fix! Edge 17 does not trigger anything other than mouse events when clicking\n                // on the clear icon (Edge bug 17584515). This is safe in other browsers as `searchFn`\n                // checks the value to see if it has changed. In other browsers it won't have.\n                setTimeout(function() {\n                    searchFn.call(jqFilter[0], e);\n                }, 10);\n            })\n            .on('keypress.DT', function(e) {\n                /* Prevent form submission */\n                if (e.keyCode == 13) {\n                    return false;\n                }\n            })\n            .attr('aria-controls', tableId);\n\n        // Update the input elements whenever the table is filtered\n        $(settings.nTable).on('search.dt.DT', function(ev, s) {\n            if (settings === s && jqFilter[0] !== document.activeElement) {\n                jqFilter.val(typeof previousSearch.search !== 'function'\n                    ? previousSearch.search\n                    : ''\n                );\n            }\n        });\n\n        return filter;\n    }, 'f');\n\n    // Opts\n    // - type - button configuration\n    // - numbers - number of buttons to show - must be odd\n    DataTable.feature.register('paging', function(settings, opts) {\n        // Don't show the paging input if the table doesn't have paging enabled\n        if (!settings.oFeatures.bPaginate) {\n            return null;\n        }\n\n        opts = $.extend({\n            numbers: DataTable.ext.pager.numbers_length,\n            type: settings.sPaginationType\n        }, opts);\n\n        var host = $('<div/>').addClass(settings.oClasses.paging.container + ' paging_' + opts.type);\n        var draw = function() {\n            _pagingDraw(settings, host, opts);\n        };\n\n        settings.aoDrawCallback.push(draw);\n\n        // Responsive redraw of paging control\n        $(settings.nTable).on('column-sizing.dt.DT', draw);\n\n        return host;\n    }, 'p');\n\n    /**\n     * @param settings\n     * @param host\n     * @param opts\n     */\n    function _pagingDraw(settings, host, opts) {\n        if (!settings._bInitComplete) {\n            return;\n        }\n\n        var\n            plugin = DataTable.ext.pager[opts.type],\n            aria = settings.oLanguage.oAria.paginate || {},\n            start = settings._iDisplayStart,\n            len = settings._iDisplayLength,\n            visRecords = settings.fnRecordsDisplay(),\n            all = len === -1,\n            page = all ? 0 : Math.ceil(start / len),\n            pages = all ? 1 : Math.ceil(visRecords / len),\n            buttons = plugin()\n                .map(function(val) {\n                    return val === 'numbers'\n                        ? _pagingNumbers(page, pages, opts.numbers)\n                        : val;\n                })\n                .flat();\n\n        var buttonEls = [];\n\n        for (var i = 0; i < buttons.length; i++) {\n            var button = buttons[i];\n\n            var btnInfo = _pagingButtonInfo(settings, button, page, pages);\n            var btn = _fnRenderer(settings, 'pagingButton')(\n                settings,\n                button,\n                btnInfo.display,\n                btnInfo.active,\n                btnInfo.disabled\n            );\n\n            // Common attributes\n            $(btn.clicker).attr({\n                'aria-controls': settings.sTableId,\n                'aria-disabled': btnInfo.disabled ? 'true' : null,\n                'aria-current': btnInfo.active ? 'page' : null,\n                'aria-label': aria[button],\n                'data-dt-idx': button,\n                'tabIndex': btnInfo.disabled ? -1 : settings.iTabIndex,\n            });\n\n            if (typeof button !== 'number') {\n                $(btn.clicker).addClass(button);\n            }\n\n            _fnBindAction(\n                btn.clicker, {action: button}, function(e) {\n                    e.preventDefault();\n\n                    _fnPageChange(settings, e.data.action, true);\n                }\n            );\n\n            buttonEls.push(btn.display);\n        }\n\n        var wrapped = _fnRenderer(settings, 'pagingContainer')(\n            settings, buttonEls\n        );\n\n        var activeEl = host.find(document.activeElement).data('dt-idx');\n\n        host.empty().append(wrapped);\n\n        if (activeEl !== undefined) {\n            host.find('[data-dt-idx=' + activeEl + ']').trigger('focus');\n        }\n\n        // Responsive - check if the buttons are over two lines based on the\n        // height of the buttons and the container.\n        if (\n            buttonEls.length && // Any buttons\n            opts.numbers > 1 && // Prevent infinite\n            $(host).height() >= ($(buttonEls[0]).outerHeight() * 2) - 10\n        ) {\n            _pagingDraw(settings, host, $.extend({}, opts, {numbers: opts.numbers - 2}));\n        }\n    }\n\n    /**\n     * Get properties for a button based on the current paging state of the table\n     *\n     * @param {*} settings DT settings object\n     * @param {*} button The button type in question\n     * @param {*} page Table's current page\n     * @param {*} pages Number of pages\n     * @returns Info object\n     */\n    function _pagingButtonInfo(settings, button, page, pages) {\n        var lang = settings.oLanguage.oPaginate;\n        var o = {\n            display: '',\n            active: false,\n            disabled: false\n        };\n\n        switch (button) {\n            case 'ellipsis':\n                o.display = '&#x2026;';\n                o.disabled = true;\n                break;\n\n            case 'first':\n                o.display = lang.sFirst;\n\n                if (page === 0) {\n                    o.disabled = true;\n                }\n                break;\n\n            case 'previous':\n                o.display = lang.sPrevious;\n\n                if (page === 0) {\n                    o.disabled = true;\n                }\n                break;\n\n            case 'next':\n                o.display = lang.sNext;\n\n                if (pages === 0 || page === pages - 1) {\n                    o.disabled = true;\n                }\n                break;\n\n            case 'last':\n                o.display = lang.sLast;\n\n                if (pages === 0 || page === pages - 1) {\n                    o.disabled = true;\n                }\n                break;\n\n            default:\n                if (typeof button === 'number') {\n                    o.display = settings.fnFormatNumber(button + 1);\n\n                    if (page === button) {\n                        o.active = true;\n                    }\n                }\n                break;\n        }\n\n        return o;\n    }\n\n    /**\n     * Compute what number buttons to show in the paging control\n     *\n     * @param {*} page Current page\n     * @param {*} pages Total number of pages\n     * @param {*} buttons Target number of number buttons\n     * @returns Buttons to show\n     */\n    function _pagingNumbers(page, pages, buttons) {\n        var\n            numbers = [],\n            half = Math.floor(buttons / 2);\n\n        if (pages <= buttons) {\n            numbers = _range(0, pages);\n        } else if (buttons === 1) {\n            // Single button - current page only\n            numbers = [page];\n        } else if (buttons === 3) {\n            // Special logic for just three buttons\n            if (page <= 1) {\n                numbers = [0, 1, 'ellipsis'];\n            } else if (page >= pages - 2) {\n                numbers = _range(pages - 2, pages);\n                numbers.unshift('ellipsis');\n            } else {\n                numbers = ['ellipsis', page, 'ellipsis'];\n            }\n        } else if (page <= half) {\n            numbers = _range(0, buttons - 2);\n            numbers.push('ellipsis', pages - 1);\n        } else if (page >= pages - 1 - half) {\n            numbers = _range(pages - (buttons - 2), pages);\n            numbers.unshift(0, 'ellipsis');\n        } else {\n            numbers = _range(page - half + 2, page + half - 1);\n            numbers.push('ellipsis', pages - 1);\n            numbers.unshift(0, 'ellipsis');\n        }\n\n        return numbers;\n    }\n\n    var __lengthCounter = 0;\n\n    // Opts\n    // - menu\n    // - text\n    DataTable.feature.register('pageLength', function(settings, opts) {\n        var features = settings.oFeatures;\n\n        // For compatibility with the legacy `pageLength` top level option\n        if (!features.bPaginate || !features.bLengthChange) {\n            return null;\n        }\n\n        opts = $.extend({\n            menu: settings.aLengthMenu,\n            text: settings.oLanguage.sLengthMenu\n        }, opts);\n\n        var\n            classes = settings.oClasses.length,\n            tableId = settings.sTableId,\n            menu = opts.menu,\n            lengths = [],\n            language = [],\n            i;\n\n        // Options can be given in a number of ways\n        if (Array.isArray(menu[0])) {\n            // Old 1.x style - 2D array\n            lengths = menu[0];\n            language = menu[1];\n        } else {\n            for (i = 0; i < menu.length; i++) {\n                // An object with different label and value\n                if ($.isPlainObject(menu[i])) {\n                    lengths.push(menu[i].value);\n                    language.push(menu[i].label);\n                } else {\n                    // Or just a number to display and use\n                    lengths.push(menu[i]);\n                    language.push(menu[i]);\n                }\n            }\n        }\n\n        // We can put the <select> outside of the label if it is at the start or\n        // end which helps improve accessability (not all screen readers like\n        // implicit for elements).\n        var end = opts.text.match(/_MENU_$/);\n        var start = opts.text.match(/^_MENU_/);\n        var removed = opts.text.replace(/_MENU_/, '');\n        var str = '<label>' + opts.text + '</label>';\n\n        if (start) {\n            str = '_MENU_<label>' + removed + '</label>';\n        } else if (end) {\n            str = '<label>' + removed + '</label>_MENU_';\n        }\n\n        // Wrapper element - use a span as a holder for where the select will go\n        var div = $('<div/>')\n            .addClass(classes.container)\n            .append(\n                str.replace('_MENU_', '<span></span>')\n            );\n\n        // Save text node content for macro updating\n        var textNodes = [];\n        div.find('label')[0].childNodes.forEach(function(el) {\n            if (el.nodeType === Node.TEXT_NODE) {\n                textNodes.push({\n                    el: el,\n                    text: el.textContent\n                });\n            }\n        });\n\n        // Update the label text in case it has an entries value\n        var updateEntries = function(len) {\n            textNodes.forEach(function(node) {\n                node.el.textContent = _fnMacros(settings, node.text, len);\n            });\n        };\n\n        // Next, the select itself, along with the options\n        var select = $('<select/>', {\n            'name': tableId + '_length',\n            'aria-controls': tableId,\n            'class': classes.select\n        });\n\n        for (i = 0; i < lengths.length; i++) {\n            select[0][i] = new Option(\n                typeof language[i] === 'number' ?\n                    settings.fnFormatNumber(language[i]) :\n                    language[i],\n                lengths[i]\n            );\n        }\n\n        // Add for and id to label and input\n        div.find('label').attr('for', 'dt-length-' + __lengthCounter);\n        select.attr('id', 'dt-length-' + __lengthCounter);\n        __lengthCounter++;\n\n        // Swap in the select list\n        div.find('span').replaceWith(select);\n\n        // Can't use `select` variable as user might provide their own and the\n        // reference is broken by the use of outerHTML\n        $('select', div)\n            .val(settings._iDisplayLength)\n            .on('change.DT', function() {\n                _fnLengthChange(settings, $(this).val());\n                _fnDraw(settings);\n            });\n\n        // Update node value whenever anything changes the table's length\n        $(settings.nTable).on('length.dt.DT', function(e, s, len) {\n            if (settings === s) {\n                $('select', div).val(len);\n\n                // Resolve plurals in the text for the new length\n                updateEntries(len);\n            }\n        });\n\n        updateEntries(settings._iDisplayLength);\n\n        return div;\n    }, 'l');\n\n    // JQuery access\n    $.fn.dataTable = DataTable;\n\n    // Provide access to the host jQuery object (circular reference)\n    DataTable.$ = $;\n\n    // Legacy aliases\n    $.fn.dataTableSettings = DataTable.settings;\n    $.fn.dataTableExt = DataTable.ext;\n\n    // With a capital `D` we return a DataTables API instance rather than a\n    // jQuery object\n    $.fn.DataTable = function(opts) {\n        return $(this).dataTable(opts).api();\n    };\n\n    // All properties that are available to $.fn.dataTable should also be\n    // available on $.fn.DataTable\n    $.each(DataTable, function(prop, val) {\n        $.fn.DataTable[prop] = val;\n    });\n\n    return DataTable;\n}));"],"names":["factory","define","amd","$","window","document","exports","jq","require","module","root","DataTable","jQuery","_ext","_Api","_api_register","_api_registerPlural","selector","options","this","_that","emptyInit","undefined","len","length","api","each","iLen","oInit","_fnExtend","i","sId","getAttribute","bInitHandedOff","defaults","$this","nodeName","toLowerCase","trigger","_fnCompatOpts","_fnCompatCols","column","_fnCamelToHungarian","extend","data","allSettings","settings","s","nTable","nTHead","parentNode","nTFoot","bRetrieve","bDestroy","oInstance","Api","destroy","_fnLog","sTableId","id","splice","ext","_unique","oSettings","models","style","width","colgroup","prependTo","fastData","row","type","_fnGetCellData","push","dataTable","aLengthMenu","iDisplayLength","Array","isArray","isPlainObject","value","_fnMap","oFeatures","oScroll","oLanguage","_fnCallbackReg","fnDrawCallback","fnStateSaveParams","fnStateLoadParams","fnStateLoaded","fnRowCallback","fnCreatedRow","fnHeaderCallback","fnFooterCallback","fnInitComplete","fnPreDrawCallback","rowIdFn","_fnGetObjectDataFn","rowId","_fnBrowserDetect","oClasses","classes","addClass","table","bPaginate","iDisplayStart","iInitDisplayStart","_iDisplayStart","sUrl","ajax","dataType","url","success","json","_fnCallbackFire","_fnInitialise","error","columnsInit","thead","getElementsByTagName","initHeaderLayout","_fnDetectHeader","aoColumns","_fnAddColumn","aoColDefs","aoCols","headerLayout","fn","j","jLen","k","kLen","def","columns","name","sName","aTargets","target","targets","indexOf","replace","forEach","cell","match","is","_fnApplyColumnDefs","aoColumnDefs","iCol","oDef","_fnColumnOptions","rowOne","children","find","eq","a","col","mData","sort","filter","_","_isArrayHost","features","loadedInit","aaSorting","sorting","asSorting","_fnSortingClasses","bSorted","_fnDataSource","bDeferRender","caption","appendTo","html","_captionSide","css","captionNode","tbody","insertAfter","nTBody","tfoot","aaData","_fnAddData","_fnAddTr","aiDisplay","aiDisplayMaster","slice","bInitialised","_fnSaveState","bStateSave","init","callback","loaded","state","_fnImplementState","fnStateLoadCallback","call","_fnLoadState","buttons","builder","errMode","feature","search","legacy","pager","renderer","pageButton","header","order","className","detect","render","fnVersionCheck","iApiIndex","sVersion","version","afnFiltering","aTypes","ofnSearch","oSort","afnSortData","aoFeatures","oStdClasses","oPagination","container","empty","info","select","canAsc","canDesc","isAsc","isDesc","none","position","processing","scrolling","body","footer","self","inner","input","paging","active","button","disabled","_re_dic","_re_new_lines","_re_html","_re_date","_re_escape_regex","RegExp","join","_re_formatted_numeric","_empty","d","_intVal","integer","parseInt","isNaN","isFinite","_numToDecimal","num","decimalPoint","_fnEscapeRegex","_isNumber","formatted","strType","parseFloat","_htmlNumeric","_isHtml","_stripHtml","_pluck","prop","prop2","out","ien","_pluck_order","_range","start","end","_removeEmpty","_escapeHtml","_normalize","str","both","res","normalize","src","from","Set","sorted","last","_areAllUnique","val","again","_flatten","_addClass","el","split","n","classList","add","_fnHungarianMap","o","newKey","map","key","_hungarianMap","user","force","hungarianKey","charAt","util","diacritics","mixed","debounce","timeout","timer","that","args","arguments","clearTimeout","setTimeout","apply","throttle","freq","frequency","now","Date","escapeRegex","set","source","meta","setData","b","arrayNotation","funcNotation","innerSrc","_fnSplitObjNotation","aLast","Error","__reArray","__reFn","get","t","fetchData","substring","stripHtml","escapeHtml","unique","_fnCompatMap","knew","old","sScrollX","scrollX","searchCols","aoSearchCols","oSearch","serverSide","searchDelay","dataSort","aDataSort","__browser","browser","top","left","pageXOffset","height","overflow","append","outer","barWidth","offsetWidth","clientWidth","bScrollbarLeft","Math","round","offset","remove","oBrowser","iBarWidth","oDefaults","oCol","oColumn","idx","searchFixed","colEl","aoPreSearchCols","oOptions","mDataProp","sType","_sManualType","sClass","origClass","iDataSort","mDataSrc","mRender","copy","shift","_render","attrTest","_bAttrSrc","_setter","fnGetData","rowData","innerData","fnSetData","_fnSetObjectDataFn","_rowReadObject","bSort","bSortable","_fnAdjustColumnSizing","bAutoWidth","columnIdx","scroll","scrollY","sY","sX","scrollXInner","sXInner","visibleColumns","_fnGetColumns","tableWidthAttr","tableContainer","styleWidth","visible","tmpTable","cloneNode","removeAttr","tr","clone","_fnColumnsSumWidth","margin","padding","border","longest","_fnGetMaxLenString","autoClass","text","sContentPadding","insert","createTextNode","holder","right","total","bodyCells","bounding","getBoundingClientRect","sWidth","_fnStringToCss","_reszEvt","on","sInstance","bDestroying","bindResize","_fnCalculateColumnWidths","cols","_fnColumnSizes","_fnScrollDraw","_fnVisibleToColumnIndex","iMatch","aiVis","_fnColumnIndexToVisible","iPos","_fnVisbleColumns","layout","aoHeader","vis","bVisible","sParam","_fnColumnTypes","jen","ken","detectedType","cache","aoData","types","_columnAutoClass","aoFooter","_columnAutoRender","colIdx","nTr","display","displayData","_fnWriteCell","anCells","original","incVisible","_fnColumnsFromHeader","unit","sum","definedWidth","sWidthOrig","matched","attr","closest","dataIn","tds","rowIdx","rowModel","oRow","_aData","aIds","_fnCreateTr","trs","_fnGetRowElements","cells","draw","iDraw","defaultContent","sDefaultContent","cellData","_typeof","innerHTML","iDrawError","fomatters","td","_fnGetDataMaster","_fnClearTable","_fnInvalidate","_aSortData","_aFilterData","_fnGetRowDisplay","maxLenString","_fnRowAttributes","contents","firstChild","objectRead","setter","cellProcess","trim","toUpperCase","nextSibling","rowNode","rowModal","iRow","nTrIn","anTds","nTd","create","trClass","createElement","_DT_RowIndex","sCellType","_DT_CellIndex","appendChild","removeChild","fnCreatedCell","DT_RowClass","__rowc","concat","removeClass","DT_RowAttr","DT_RowData","_fnBuildHead","side","titleProp","detected","_fnRenderer","_fnHeaderLayout","incColumns","rowspan","colspan","local","structure","columnCount","includes","titleSpan","title","_fnDrawHead","point","_fnDraw","ajaxComplete","bServerSide","fnRecordsDisplay","_fnStart","anRows","iRowCount","iDisplayEnd","fnDisplayEnd","bDrawing","_emptyRow","_fnProcessingDisplay","_fnBuildAjax","preSearch","oPreviousSearch","preColSearch","colData","searchable","bSearchable","orderable","regex","fixed","Object","keys","term","toString","_fnSortFlatten","dir","_iDisplayLength","_fnAjaxParameters","_fnAjaxDataSrc","_fnAjaxDataSrcParam","recordsTotal","recordsFiltered","_iRecordsTotal","_iRecordsDisplay","_fnInitComplete","_fnAjaxUpdateDraw","iStart","iEnd","iDataIndex","nRow","detach","nTableWrapper","toggleClass","bFiltered","_fnReDraw","holdPosition","recompute","bFilter","_fnSort","_fnFilterComplete","_drawHold","oLang","zero","sZeroRecords","dataSrc","sLoadingRecords","sEmptyTable","fnRecordsTotal","_layoutArray","groups","pos","splitPos","align","group","groupRun","innerVal","opts","filtered","item","order1","reverse","rows","full","_layoutResolve","getFeature","line","node","inst","resolve","_fnAddOptionsHtml","insertBefore","bottom","sDom","dom","featureNode","option","newNode","next","parts","parent","_fnFeatureHtmlTable","cFeature","fnInit","_fnLayoutDom","bProcessing","sProcessing","e","show","_processingHtml","write","l","shifted","isHeader","columnDef","sTitle","autoTitle","ariaTitle","childNodes","setAttribute","ajaxData","instance","status","jqXHR","sError","newData","baseAjax","sServerMethod","xhr","readyState","oAjaxData","dataProp","param","columnsSearch","filterData","wasInvalidated","__filter_div","__filter_div_textContent","textContent","innerText","_sFilterRow","_fnFilterData","_fnFilter","filters","displayRows","_fnFilterCustom","searchRows","searchFunc","rpSearch","inOpts","not","boundary","caseInsensitive","exact","smart","word","m","negative","_fnFilterCreateSearch","test","iAjaxStart","headerRows","querySelectorAll","legacyTop","bSortCellsTop","notSelector","_fnSortAttachListener","_fnSortResolve","_fnSortInit","_colGroup","aData","_bInitComplete","_fnLengthChange","_fnLengthOverflow","_fnPageChange","action","redraw","records","floor","changed","captionSide","headerClone","footerClone","_div","size","scroller","scrollHead","scrollBody","scrollFoot","scrollLeft","bCollapse","nScrollHead","nScrollBody","nScrollFoot","aoDrawCallback","headerCopy","footerCopy","divHeaderInner","divHeaderTable","divBodyEl","divBody","divFooterInner","divFooterTable","scrollBarVis","scrollHeight","clientHeight","colSizes","outerWidth","wrapAll","isScrolling","paddingSide","scrollTop","max","maxLen","cellString","nodeType","_fnBindAction","run","_fnSortAdd","shiftKey","master","masterMap","_fnSortDisplay","nestedSort","z","srcCol","aSort","extSort","aaSortingFixed","fixedObj","pre","post","_idx","index","formatter","sorter","aiOrig","displayMaster","_fnSortData","x","y","dataA","dataB","addIndex","nextSortIdx","bSortMulti","sortIdx","oldSort","aLastSort","sortClass","bSortClasses","customData","customSort","sSortDataType","_bLoadingState","time","oSavedState","fnStateSaveCallback","duration","iStateDuration","oLoadedState","page","adjust","level","msg","tn","console","log","sErrMode","alert","ret","mappedName","extender","breakRefs","prototype","hasOwnProperty","which","preventDefault","store","callbackArr","eventName","bubbles","Event","dt","parents","result","host","_fnMacros","entries","fnFormatNumber","all","ceil","i18n","__apiStruct","__arrayProto","_api_scope","scope","struc","methodExt","_api_find","context","ctxSettings","tables","toArray","v","_toSettings","any","count","flatten","ctx","iterator","alwaysNew","items","apiInst","_selector_row_indexes","apiSelector","lastIndexOf","pluck","pop","reduce","reduceRight","to$","toJQuery","unshift","obj","struct","__dt_wrapper","propExt","register","method","heir","registerPlural","pluralName","singularName","__table_selector","sel","nodes","indexes","prepend","visRecords","__reload","one","abort","resetPaging","_selector_run","selectFn","selectorType","_selector_opts","_selector_first","tmp","displayFiltered","displayFilteredMap","ordered","selInt","cellIdx","rowObj","__row_selector","r","hash","newRows","modRows","idFn","ids","_detailsShow","childRows","__details_state_load","every","__details_state","__details_remove","_details","__details_display","__details_events","off","drawEvent","_child_obj","klass","child","addRow","created","colSpan","__details_add","_child_mth","__re_column_selector","__columnData","r1","r2","names","titles","visColumns","jqResult","__column_selector","span","calc","__setColumnVis","widths","visIdx","rowSelector","columnSelector","allCells","fnSelector","__cell_selector","internalOpts","cellsNoOpts","selected","columnVisible","directions","caseInsen","ignoreTime","setMutate","use","DateTime","jquery","versionCheck","version2","iThis","iThat","aThis","aThat","isDataTable","head","foot","camelToHungarian","jqRows","jqTable","jqTbody","jqWrapper","orderClasses","orig","removedMethod","sDestroyWidth","counter","selectedIdx","tableIdx","token","plural","resolved","toFormat","sThousands","JSON","parse","sessionStorage","localStorage","getItem","location","pathname","setItem","stringify","paginate","first","previous","topStart","topEnd","bottomStart","bottomEnd","pagingControls","min","extPagination","simple","numbers","simple_numbers","full_numbers","first_last","first_last_numbers","_numbers","_pagingNumbers","numbers_length","pagingButton","buttonType","content","btn","btnClasses","role","clicker","pagingContainer","_filterString","__mldFnName","__mld","momentFn","luxonFn","dateFn","arg1","moment","luxon","__mlWarning","__mldObj","format","locale","utc","isValid","fromFormat","fromISO","setLocale","__mlHelper","localeString","to","typeName","valueOf","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","__thousands","__decimal","Intl","NumberFormat","formatToParts","datetime","date","number","thousands","decimal","precision","prefix","postfix","flo","abs","exp","toExponential","toFixed","intPart","floatPart","_extTypes","asc","desc","setProp","propVal","setDetect","cb","defineProperty","findIndex","setOrder","parsed","ts","Infinity","sDecimal","dp","__numericReplace","decimalPlace","re1","re2","ariaType","sortDirs","orderedColumns","orderDirs","firstSort","sortOrder","bInfo","lang","tid","fnInfoCallback","sInfoEmpty","sInfoPostFix","sInfoFiltered","sInfo","_fnUpdateInfo","nWrapper","__searchCounter","_pagingDraw","plugin","aria","oAria","pages","flat","buttonEls","btnInfo","_pagingButtonInfo","iTabIndex","wrapped","activeEl","activeElement","outerHeight","oPaginate","sFirst","sPrevious","sNext","sLast","half","tableId","language","previousSearch","placeholder","sSearchPlaceholder","sSearch","removed","searchFn","event","return","jqFilter","keyCode","ev","sPaginationType","__lengthCounter","bLengthChange","menu","sLengthMenu","lengths","label","div","textNodes","Node","TEXT_NODE","updateEntries","Option","replaceWith","dataTableSettings","dataTableExt"],"mappings":"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"}