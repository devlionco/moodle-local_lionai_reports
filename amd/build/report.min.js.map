{"version":3,"file":"report.min.js","sources":["../src/report.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Connect lionai_reports functionality.\n *\n * @module      local_lionai_reports/report\n * @author      Anton P. <anton@devlion.co>\n * @copyright   2023 Devlion <info@devlion.co>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from \"core/ajax\";\nimport Notification from \"core/notification\";\nimport Templates from \"core/templates\";\nimport spinneroverlay from \"./spinneroverlay\";\nimport DataTable from \"./jquery.dataTables\";\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport {get_string as getString} from 'core/str';\nimport * as CodeMirror from \"./codemirror\";\n\nconst dataTemp = {\n    report: null,\n    table: null,\n    sqlChanged: false,\n    sqlOriginal: '',\n    editor: null,\n};\nconst Selectors = {\n    elements: {\n        mainelement: \"lionai_reports-area\",\n        report: \"lionai_reports-report\",\n        promptTextarea: \"id_userprompt\",\n        querysqlid: \"id_querysql\",\n        senduserpromptid: \"id_senduserprompt\",\n        getresultid: \"id_getresult\",\n        submitbutton: \"id_submitbutton\",\n        trytofixid: \"id_trytofix\",\n        errordivid: \"id_error_querysql\",\n        lionaiReportshistory: \"lionai_reportshistory\",\n        queryresultwrapperid: \"id_queryresultwrapper\",\n        queryresultid: \"id_queryresult\",\n        queryresultmessage: \"id_queryresultmessage\",\n        thmbup: \"thmbup\",\n        thmbdown: \"thmbdown\",\n        ratebtnswrapper: \"ratebtns-wrapper\",\n        previewwrapper: \"previewwrapper\"\n    },\n    targets: {}\n};\n\n/**\n * Retrieves a report by its ID using an AJAX call.\n *\n * @param {number} id - The unique identifier of the report to retrieve.\n * @returns {Promise<Object>} A Promise that resolves to the retrieved report object.\n * @throws {Error} If an error occurs during the AJAX call.\n */\nconst getReport = (id) =>\n    Ajax.call([\n        {\n            methodname: \"local_lionai_reports_getreport\",\n            args: {\n                id: id,\n            },\n        },\n    ])[0];\n\n/**\n * Updates a report by its ID using an AJAX call.\n *\n * @param {number} id - The unique identifier of the report to update.\n * @param {string} [action=\"update\"] - The action to perform on the report (default is \"update\").\n * @param {Object} data - The data to update the report with.\n * @returns {Promise<Object>} A Promise that resolves to the updated report object.\n * @throws {Error} If an error occurs during the AJAX call.\n */\nconst updateReport = (id, action = \"update\", data) => {\n    return Ajax.call([\n        {\n            methodname: \"local_lionai_reports_updatereport\",\n            args: {\n                id: id,\n                action: action,\n                data: JSON.stringify(data),\n            },\n        },\n    ])[0];\n};\n\nconst initTargets = () => {\n    Selectors.targets.promptElem = document.getElementById(Selectors.elements.promptTextarea);\n    Selectors.targets.querysqlElem = document.getElementById(Selectors.elements.querysqlid);\n    Selectors.targets.trytofixlElem = document.getElementById(Selectors.elements.trytofixid);\n    Selectors.targets.queryresultmessage = document.getElementById(Selectors.elements.queryresultmessage);\n    Selectors.targets.thmbup = document.getElementById(Selectors.elements.thmbup);\n    Selectors.targets.thmbdown = document.getElementById(Selectors.elements.thmbdown);\n    Selectors.targets.ratebtnswrapper = document.getElementById(Selectors.elements.ratebtnswrapper);\n\n    Selectors.targets.senduserpromptButton = document.getElementById(Selectors.elements.senduserpromptid);\n    Selectors.targets.getresultButton = document.getElementById(Selectors.elements.getresultid);\n    Selectors.targets.errorDiv = document.getElementById(Selectors.elements.errordivid);\n    Selectors.targets.lionaiReportshistory = document.getElementById(Selectors.elements.lionai_reportshistory);\n};\n\n/**\n * Renders a report by fetching its template, setting up event listeners, and updating the UI.\n *\n */\nconst renderReport = () => {\n    Templates.render(\"local_lionai_reports/report\", dataTemp.report)\n        .then(function(html, js) {\n            Templates.replaceNodeContents(\n                document.getElementById(Selectors.elements.mainelement),\n                html,\n                js\n            );\n\n            initTargets();\n\n            // Удаляем старый редактор, если он был\n            if (dataTemp.editor) {\n                dataTemp.editor.toTextArea();\n                dataTemp.editor = null;\n            }\n\n            // Создаём новый редактор\n            dataTemp.editor = CodeMirror.fromTextArea(Selectors.targets.querysqlElem, {\n                lineNumbers: true,\n                theme: \"darcula\",\n            });\n\n            Selectors.targets.thmbup.onclick = (e) =>\n                ratePrompt(e.currentTarget.dataset.promptid, e.currentTarget.dataset.rate, e.currentTarget);\n\n            Selectors.targets.thmbdown.onclick = (e) =>\n                ratePrompt(e.currentTarget.dataset.promptid, e.currentTarget.dataset.rate, e.currentTarget);\n\n            Selectors.targets.senduserpromptButton.addEventListener(\"click\", () => {\n                sendPrompt(Selectors.targets.promptElem.value);\n            });\n\n            Selectors.targets.getresultButton.addEventListener(\"click\", () => {\n                getResult(dataTemp.editor.getValue());\n            });\n\n            Selectors.targets.trytofixlElem.addEventListener(\"click\", () => {\n                let trytofixprompt = \"try to fix this sql:\\n\\n\";\n                let actualsql = dataTemp.editor.getValue();\n                let textContent = Selectors.targets.queryresultmessage.textContent;\n\n                sendPrompt(`${trytofixprompt}${actualsql}\\n\\n${textContent}`);\n            });\n\n            dataTemp.editor.on(\"change\", () => {\n                if (dataTemp.sqlOriginal !== dataTemp.editor.getValue()) {\n                    originalDataChanged();\n                }\n            });\n\n            Selectors.targets.promptElem.addEventListener(\"keydown\", function(event) {\n                if ((event.ctrlKey || event.metaKey) && event.key === \"Enter\") {\n                    sendPrompt(Selectors.targets.promptElem.value);\n                } else {\n                    hideElement(Selectors.targets.ratebtnswrapper);\n                }\n            });\n\n            const dropdownItems = document.querySelectorAll(\n                \".lionai_reports-examples-list .dropdown-item\"\n            );\n\n            dropdownItems.forEach((item) => {\n                item.addEventListener(\"click\", (event) => {\n                    event.preventDefault();\n                    let value = item.textContent.trim();\n                    setUserPrompt(value);\n                    sendPrompt(value);\n                });\n            });\n\n            spinneroverlay.hidespinneroverlay();\n            hideElement(Selectors.targets.queryresultmessage);\n            hideElement(Selectors.targets.trytofixlElem);\n            hideElement(Selectors.targets.ratebtnswrapper);\n\n            document\n                .getElementById(\"edit-name-button\")\n                .addEventListener(\"click\", function() {\n                    document.getElementById(\"edit-name-button\").classList.add(\"d-none\");\n\n                    var currentName = document.getElementById(\"edit-name\").textContent;\n\n                    var inputField = document.createElement(\"input\");\n                    inputField.type = \"text\";\n                    inputField.value = currentName;\n                    inputField.classList.add(\"w-100\");\n\n                    document.getElementById(\"edit-name\").textContent = \"\";\n                    document.getElementById(\"edit-name\").appendChild(inputField);\n\n                    inputField.addEventListener(\"keydown\", async function(event) {\n                        if (event.key === \"Enter\") {\n                            var newName = inputField.value;\n                            document.getElementById(\"edit-name\").textContent = newName;\n                            document\n                                .getElementById(\"edit-name-button\")\n                                .classList.remove(\"d-none\");\n\n                            const updateResult = await updateReport(dataTemp.report.id, \"update\", {\n                                name: newName,\n                            });\n\n                            if (updateResult) {\n                                const response = await getReport(dataTemp.report.id);\n                                dataTemp.report = JSON.parse(response.data).report;\n                                renderReport();\n                            }\n                        }\n                    });\n\n                    inputField.focus();\n                });\n\n            document.getElementById('lionai_reportshistory').onclick = () => {\n                showModal();\n            };\n        })\n        .catch((error) => Notification.displayException(error));\n};\n\n\n/**\n * Sets the query result data in a DataTable for display.\n *\n * @param {Object} data - The query result data.\n */\nlet setqueryresultid = (data) => {\n    const keys = Object.keys(data);\n\n    if (dataTemp.table || (dataTemp.table && keys.length == 0)) {\n        dataTemp.table = '';\n        document.getElementById(Selectors.elements.queryresultid).innerHTML = \"\";\n    }\n\n    document.getElementById(Selectors.elements.queryresultwrapperid).innerHTML = \"\";\n    const queryResultWrapper = document.getElementById(Selectors.elements.queryresultwrapperid);\n    const tableHtml = '<table class=\"display w-100\" id=\"id_queryresult\"></table>';\n    queryResultWrapper.innerHTML = tableHtml;\n\n    if (keys.length > 0) {\n        const firstItem = data[keys[0]];\n        const columns = Object.keys(firstItem).map((key) => ({\n            title: key,\n            data: key,\n        }));\n        const dataArray = keys.map((key) => data[key]);\n\n        dataTemp.table = new DataTable(`#${Selectors.elements.queryresultid}`, {\n            columns: columns,\n            data: dataArray,\n            scrollX: true,\n            autoWidth: true\n        });\n    } else {\n        // Handle the case where data is empty or has no keys.\n    }\n};\n\n/**\n * Sets the query result data amount into the preview message and display it.\n *\n * @param count - the number of results from the query.\n */\nlet setPreviewMessage = async function(count) {\n    document.getElementById(Selectors.elements.previewwrapper).innerHTML = \"\";\n\n    const previewWrapper = document.getElementById(Selectors.elements.previewwrapper);\n    const previewTitle = await getString('preview', 'local_lionai_reports');\n    const previewTotal = await getString('previewtotal', 'local_lionai_reports', count);\n    const previewNote1 = await getString('previewnote1', 'local_lionai_reports');\n    const previewNote2 = await getString('previewnote2', 'local_lionai_reports');\n    let previewMessageHtml = '<h2>' + previewTitle + '</h2><br>';\n    previewMessageHtml = previewMessageHtml +  '<span class=\"font-weight-bold\">' + previewTotal + '</span><br>';\n    previewMessageHtml = previewMessageHtml +  '<span>' + previewNote1 + '</span><br>';\n    previewMessageHtml = previewMessageHtml +  '<span class=\"text-muted\">' + previewNote2 + '</span>';\n    previewWrapper.innerHTML = previewMessageHtml;\n};\n\n/**\n * Sets the SQL value in the query SQL element and triggers a result retrieval.\n *\n * @param {string} sql - The SQL string to set in the query SQL element.\n */\nconst setSql = (sql) => {\n    Selectors.targets.querysqlElem.value = sql;\n\n    if (dataTemp.editor) {\n        dataTemp.editor.setValue(sql);\n    } else {\n        let sqlEditors = Selectors.targets.querysqlElem.parentElement.querySelectorAll('.cm-editor');\n        sqlEditors.forEach((el) => {\n            el.remove();\n        });\n\n        dataTemp.editor = CodeMirror.fromTextArea(Selectors.targets.querysqlElem, {\n            lineNumbers: true,\n            theme: \"darcula\",\n        });\n    }\n\n    getResult(sql);\n};\n\n/**\n * Shows the history modal by hiding it.\n */\nconst showModal = async() => {\n    const modal = await ModalFactory.create({\n        title: getString('pickfromhistory', 'local_lionai_reports'),\n        large: true,\n        body: Templates.render('local_lionai_reports/historymodal', dataTemp.report),\n        footer: 'An example footer content',\n    });\n    modal.show();\n    Selectors.targets.createdModal = modal;\n\n    modal.getRoot().on(ModalEvents.bodyRendered, () => {\n        let textarea = modal.getRoot()[0].querySelectorAll('textarea');\n        if (textarea.length > 0) {\n            textarea.forEach(el => {\n                if (el.textLength > 0) {\n                    CodeMirror.fromTextArea(el, {\n                        lineNumbers: true,\n                        theme: \"darcula\",\n                    });\n                }\n            });\n        }\n        renderHistory();\n    });\n\n};\n\n/**\n * Hides the history modal.\n */\nconst hideModal = () => {\n    Selectors.targets.createdModal.destroy();\n};\n\n\nconst hideElement = (target) => {\n    target.classList.add(\"d-none\");\n};\n\nconst showElement = (target) => {\n    target.classList.remove(\"d-none\");\n};\n\n/**\n * Retrieves query results using an AJAX call and updates the UI with the results.\n *\n * @param {string} query - The SQL query to execute and retrieve results for.\n */\nconst getResult = (query) => {\n    /**\n     * Hides the alert message element by adding the \"d-none\" class.\n     */\n    hideElement(Selectors.targets.queryresultmessage);\n    hideElement(Selectors.targets.trytofixlElem);\n    Ajax.call([\n        {\n            methodname: \"local_lionai_reports_getresult\",\n            args: {\n                query: query,\n                id: dataTemp.report.id,\n            },\n            done: function(data) {\n                let result = data.result;\n                let message = data.message;\n                let count = data.count;\n                data = JSON.parse(data.data);\n                setMessage(message, !result);\n                setPreviewMessage(count);\n                setqueryresultid(data);\n            },\n            fail: function(error) {\n                Notification.exception(error);\n            },\n        },\n    ]);\n};\n\n/**\n * Sets the target text, which includes SQL and query results, and optionally triggers auto-saving.\n *\n * @param {string} newText - The new text to set.\n */\nconst setTargetText = (newText/* , autoSave = false */) => {\n    setSql(newText);\n\n    spinneroverlay.hidespinneroverlay([\n        \"id_userprompt\",\n        \"id_querysql\",\n        \"id_senduserprompt\",\n    ]);\n};\n\n/**\n * Sets a message to be displayed and optionally shows a correction prompt.\n *\n * @param {string} value - The message to display.\n * @param {number} [correct=2] - A flag to indicate if a correction prompt should be shown (default is 2).\n */\nconst setMessage = (value, correct = 2) => {\n    if (value.length > 0) {\n        document.getElementById(Selectors.elements.queryresultmessage).innerHTML = value;\n        /**\n         * Shows the alert message element by removing the \"d-none\" class.\n         */\n        showElement(Selectors.targets.queryresultmessage);\n    }\n\n    if (correct == 1) {\n        /**\n         * Shows the \"Try to Fix It\" element by removing the \"d-none\" class.\n         */\n        showElement(Selectors.targets.trytofixlElem);\n    }\n};\n\n\nconst originalDataChanged = () => {\n    if (!dataTemp.sqlChanged) {\n        dataTemp.sqlChanged = true;\n        hideElement(Selectors.targets.ratebtnswrapper);\n    }\n};\n\n\n/**\n * Sends a user prompt via an AJAX call and updates the target text based on the response.\n *\n * @param {string} prompt - The user prompt to send.\n */\nconst sendPrompt = (prompt) => {\n    if (dataTemp.isSending) {\n        return;\n    }\n    dataTemp.isSending = true;\n\n    spinneroverlay.showspinneroverlay([\n        \"id_userprompt\",\n        \"id_querysql\",\n        \"id_senduserprompt\",\n    ]);\n\n    hideElement(Selectors.targets.queryresultmessage);\n    hideElement(Selectors.targets.trytofixlElem);\n    hideElement(Selectors.targets.ratebtnswrapper);\n\n    Ajax.call([\n        {\n            methodname: \"local_lionai_reports_send_prompt\",\n            args: {\n                reportid: dataTemp.report.id,\n                prompt: prompt,\n                engine: dataTemp.report.engine,\n                conversationid: dataTemp.report.conversationid,\n            },\n            done: function(data) {\n                const message = data.message;\n                const correct = data.correct;\n                const autoSave = true;\n\n                spinneroverlay.hidespinneroverlay([\n                    \"id_userprompt\",\n                    \"id_querysql\",\n                    \"id_senduserprompt\",\n                ]);\n\n                dataTemp.editor.setValue(message);\n\n                if (correct != 2) {\n                    setMessage(\"Does not look like correct code. Use carefully.\", correct);\n                    dataTemp.isSending = false;\n                    return;\n                }\n\n                dataTemp.sqlOriginal = message;\n                dataTemp.sqlChanged = false;\n\n                clearRateBtnsActiveClass();\n                showElement(Selectors.targets.ratebtnswrapper);\n\n                const actionbuttons = document.getElementsByClassName(\"action-btns\")[0];\n                actionbuttons.classList.remove(\"d-none\");\n                actionbuttons.classList.add(\"d-flex\");\n\n                setPromptidToBtns(data.promptid);\n                setTargetText(message, autoSave);\n\n                dataTemp.isSending = false;\n            },\n            fail: function(error) {\n                Notification.exception(error);\n                spinneroverlay.hidespinneroverlay([\n                    \"id_userprompt\",\n                    \"id_querysql\",\n                    \"id_senduserprompt\",\n                ]);\n                dataTemp.isSending = false;\n            },\n        },\n    ]);\n};\n\n/**\n * Sets the user prompt value in the prompt element.\n *\n * @param {string} value - The user prompt value to set.\n */\nconst setUserPrompt = (value) => {\n    Selectors.targets.promptElem.value = value;\n};\n\n/**\n * Renders history items and adds click event listeners to them.\n */\nconst renderHistory = () => {\n    const historyItems = document.querySelectorAll(\n        \".lionai_reports-history-list-item\"\n    );\n\n    historyItems.forEach((item) => {\n        item.addEventListener(\"click\", (event) => {\n            event.preventDefault();\n\n            const value = item.textContent.trim();\n            const role = item.getAttribute(\"data-role\");\n\n            hideModal();\n\n            if (role == \"user\") {\n                setUserPrompt(value);\n                sendPrompt(value);\n            } else {\n                setTargetText(value, true);\n            }\n        });\n    });\n};\n\n/**\n * Rate last sent prompt.\n *\n * @param {number} promptid - prompr id.\n * @param {number} rate - prompr rate.\n * @param {object} target - target element.\n */\nconst ratePrompt = (promptid, rate, target) => {\n    rate = target.classList.contains('active') ? 0 : rate;\n    Ajax.call([\n        {\n            methodname: \"local_lionai_reports_rate_prompt\",\n            args: {\n                promptid: +promptid,\n                rate: +rate,\n            },\n            done: function() {\n                clearRateBtnsActiveClass();\n                return (rate === 0) ? target.classList.remove(\"active\") : target.classList.add(\"active\");\n            },\n            fail: function(error) {\n                Notification.exception(error);\n            },\n        },\n    ]);\n};\n\nconst setPromptidToBtns = (promptid) => {\n    Selectors.targets.thmbup.dataset.promptid = promptid;\n    Selectors.targets.thmbdown.dataset.promptid = promptid;\n};\n\nconst clearRateBtnsActiveClass = () => {\n    Selectors.targets.thmbup.classList.remove(\"active\");\n    Selectors.targets.thmbdown.classList.remove(\"active\");\n};\n/**\n * Initializes and renders a report with the given report ID.\n *\n * @param {number} _reportid - The unique identifier of the report to initialize and render.\n * @throws {Error} If an error occurs during report retrieval, parsing, or rendering.\n */\nexport const init = async (_reportid) => {\n    const response = await getReport(_reportid);\n    dataTemp.report = JSON.parse(response.data).report;\n\n    renderReport();\n};"],"names":["dataTemp","report","table","sqlChanged","sqlOriginal","editor","Selectors","elements","mainelement","promptTextarea","querysqlid","senduserpromptid","getresultid","submitbutton","trytofixid","errordivid","lionaiReportshistory","queryresultwrapperid","queryresultid","queryresultmessage","thmbup","thmbdown","ratebtnswrapper","previewwrapper","targets","getReport","id","Ajax","call","methodname","args","updateReport","action","data","JSON","stringify","renderReport","render","then","html","js","replaceNodeContents","document","getElementById","promptElem","querysqlElem","trytofixlElem","senduserpromptButton","getresultButton","errorDiv","lionai_reportshistory","toTextArea","CodeMirror","fromTextArea","lineNumbers","theme","onclick","e","ratePrompt","currentTarget","dataset","promptid","rate","addEventListener","sendPrompt","value","getResult","getValue","actualsql","textContent","on","originalDataChanged","event","ctrlKey","metaKey","key","hideElement","querySelectorAll","forEach","item","preventDefault","trim","setUserPrompt","hidespinneroverlay","classList","add","currentName","inputField","createElement","type","appendChild","newName","remove","name","response","parse","focus","showModal","catch","error","Notification","displayException","setPreviewMessage","count","innerHTML","previewWrapper","previewTitle","previewTotal","previewNote1","previewNote2","previewMessageHtml","ModalFactory","create","title","large","body","Templates","footer","modal","show","createdModal","getRoot","ModalEvents","bodyRendered","textarea","length","el","textLength","renderHistory","target","showElement","query","done","result","message","setMessage","keys","Object","firstItem","columns","map","dataArray","DataTable","scrollX","autoWidth","setqueryresultid","fail","exception","setTargetText","newText","sql","setValue","parentElement","correct","prompt","isSending","showspinneroverlay","reportid","engine","conversationid","clearRateBtnsActiveClass","actionbuttons","getElementsByClassName","setPromptidToBtns","role","getAttribute","destroy","contains","init","_reportid"],"mappings":"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"}