{"version":3,"file":"report.min.js","sources":["../src/report.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Connect lionai_reports functionality.\n *\n * @module      local_lionai_reports/report\n * @author      Anton P. <anton@devlion.co>\n * @copyright   2023 Devlion <info@devlion.co>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from \"core/ajax\";\nimport Notification from \"core/notification\";\nimport Templates from \"core/templates\";\nimport spinneroverlay from \"./spinneroverlay\";\nimport DataTable from \"./jquery.dataTables\";\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport {get_string as getString} from 'core/str';\nimport * as CodeMirror from \"./codemirror\";\n\nconst dataTemp = {\n    report: null,\n    table: null,\n    sqlChanged: false,\n    sqlOriginal: '',\n    editor: null,\n};\nconst Selectors = {\n    elements: {\n        mainelement: \"lionai_reports-area\",\n        report: \"lionai_reports-report\",\n        promptTextarea: \"id_userprompt\",\n        querysqlid: \"id_querysql\",\n        senduserpromptid: \"id_senduserprompt\",\n        getresultid: \"id_getresult\",\n        submitbutton: \"id_submitbutton\",\n        trytofixid: \"id_trytofix\",\n        errordivid: \"id_error_querysql\",\n        lionaiReportshistory: \"lionai_reportshistory\",\n        queryresultwrapperid: \"id_queryresultwrapper\",\n        queryresultid: \"id_queryresult\",\n        queryresultmessage: \"id_queryresultmessage\",\n        thmbup: \"thmbup\",\n        thmbdown: \"thmbdown\",\n        ratebtnswrapper: \"ratebtns-wrapper\",\n        previewwrapper: \"previewwrapper\"\n    },\n    targets: {}\n};\n\n\n/**\n * Retrieves a report by its ID using an AJAX call.\n *\n * @param {number} id - The unique identifier of the report to retrieve.\n * @returns {Promise<Object>} A Promise that resolves to the retrieved report object.\n * @throws {Error} If an error occurs during the AJAX call.\n */\nconst getReport = (id) =>\n    Ajax.call([\n        {\n            methodname: \"local_lionai_reports_getreport\",\n            args: {\n                id: id,\n            },\n        },\n    ])[0];\n\n/**\n * Updates a report by its ID using an AJAX call.\n *\n * @param {number} id - The unique identifier of the report to update.\n * @param {string} [action=\"update\"] - The action to perform on the report (default is \"update\").\n * @param {Object} data - The data to update the report with.\n * @returns {Promise<Object>} A Promise that resolves to the updated report object.\n * @throws {Error} If an error occurs during the AJAX call.\n */\nconst updateReport = (id, action = \"update\", data) => {\n    return Ajax.call([\n        {\n            methodname: \"local_lionai_reports_updatereport\",\n            args: {\n                id: id,\n                action: action,\n                data: JSON.stringify(data),\n            },\n        },\n    ])[0];\n};\n\nconst initTargets = () => {\n    Selectors.targets.promptElem = document.getElementById(Selectors.elements.promptTextarea);\n    Selectors.targets.querysqlElem = document.getElementById(Selectors.elements.querysqlid);\n    Selectors.targets.trytofixlElem = document.getElementById(Selectors.elements.trytofixid);\n    Selectors.targets.queryresultmessage = document.getElementById(Selectors.elements.queryresultmessage);\n    Selectors.targets.thmbup = document.getElementById(Selectors.elements.thmbup);\n    Selectors.targets.thmbdown = document.getElementById(Selectors.elements.thmbdown);\n    Selectors.targets.ratebtnswrapper = document.getElementById(Selectors.elements.ratebtnswrapper);\n\n    Selectors.targets.senduserpromptButton = document.getElementById(Selectors.elements.senduserpromptid);\n    Selectors.targets.getresultButton = document.getElementById(Selectors.elements.getresultid);\n    Selectors.targets.errorDiv = document.getElementById(Selectors.elements.errordivid);\n    Selectors.targets.lionaiReportshistory = document.getElementById(Selectors.elements.lionai_reportshistory);\n};\n\n/**\n * Renders a report by fetching its template, setting up event listeners, and updating the UI.\n *\n */\nconst renderReport = () => {\n    Templates.render(\"local_lionai_reports/report\", dataTemp.report)\n        .then(function(html, js) {\n            Templates.replaceNodeContents(\n                document.getElementById(Selectors.elements.mainelement),\n                html,\n                js\n            );\n\n            initTargets();\n\n            dataTemp.editor = CodeMirror.fromTextArea(Selectors.targets.querysqlElem, {\n                lineNumbers: true,\n                theme: \"darcula\",\n            });\n\n            Selectors.targets.thmbup.onclick = (e) =>\n                ratePrompt(e.currentTarget.dataset.promptid, e.currentTarget.dataset.rate, e.currentTarget);\n\n            Selectors.targets.thmbdown.onclick = (e) =>\n                ratePrompt(e.currentTarget.dataset.promptid, e.currentTarget.dataset.rate, e.currentTarget);\n\n\n            Selectors.targets.senduserpromptButton.addEventListener(\"click\", () => {\n                sendPrompt(Selectors.targets.promptElem.value);\n            });\n\n            Selectors.targets.getresultButton.addEventListener(\"click\", () => {\n                getResult(Selectors.targets.querysqlElem.value);\n            });\n\n            Selectors.targets.trytofixlElem.addEventListener(\"click\", () => {\n                let value = \"\";\n                let trytofixprompt = \"try to fix this sql:\\n\\n\";\n                value += trytofixprompt;\n\n                let actualsql = Selectors.targets.querysqlElem.value;\n                actualsql += \"\\n\\n\";\n                value += actualsql;\n                const textContent = Selectors.targets.queryresultmessage.textContent;\n                value += textContent;\n\n                sendPrompt(value);\n            });\n\n\n            Selectors.targets.querysqlElem.addEventListener(\"change\", () => {\n                let actualsql = Selectors.targets.querysqlElem.value;\n                if (dataTemp.sqlOriginal != actualsql) {\n                    originalDataChanged();\n                }\n            });\n\n            Selectors.targets.promptElem.addEventListener(\"keydown\", function(event) {\n                if ((event.ctrlKey || event.metaKey) && event.key === \"Enter\") {\n                    sendPrompt(Selectors.targets.promptElem.value);\n                } else {\n                    hideElement(Selectors.targets.ratebtnswrapper);\n                }\n            });\n\n            const dropdownItems = document.querySelectorAll(\n                \".lionai_reports-examples-list .dropdown-item\"\n            );\n\n            dropdownItems.forEach((item) => {\n                item.addEventListener(\"click\", (event) => {\n                    event.preventDefault();\n\n                    let value = item.textContent.trim();\n                    setUserPrompt(value);\n                    sendPrompt(value);\n                });\n            });\n\n            spinneroverlay.hidespinneroverlay();\n            /**\n             * Hides the \"Try to Fix It\" element by adding the \"d-none\" class.\n             */\n\n            hideElement(Selectors.targets.queryresultmessage);\n            hideElement(Selectors.targets.trytofixlElem);\n            hideElement(Selectors.targets.ratebtnswrapper);\n\n            document\n                .getElementById(\"edit-name-button\")\n                .addEventListener(\"click\", function() {\n                    document.getElementById(\"edit-name-button\").classList.add(\"d-none\");\n\n                    var currentName = document.getElementById(\"edit-name\").textContent;\n\n                    var inputField = document.createElement(\"input\");\n                    inputField.type = \"text\";\n                    inputField.value = currentName;\n                    inputField.classList.add(\"w-100\"); // Add the 'w-100' class\n\n                    document.getElementById(\"edit-name\").textContent = \"\";\n                    document.getElementById(\"edit-name\").appendChild(inputField);\n\n                    inputField.addEventListener(\"keydown\", async function(event) {\n                        if (event.key === \"Enter\") {\n                            var newName = inputField.value;\n                            document.getElementById(\"edit-name\").textContent = newName;\n                            document\n                                .getElementById(\"edit-name-button\")\n                                .classList.remove(\"d-none\");\n                            const updateResult = await updateReport(dataTemp.report.id, \"update\", {\n                                name: newName,\n                            });\n                            if (updateResult) {\n                                const response = await getReport(dataTemp.report.id);\n                                dataTemp.report = JSON.parse(response.data).report;\n                                renderReport();\n                            }\n                        }\n                    });\n\n                    inputField.focus();\n                });\n            document.getElementById('lionai_reportshistory').onclick = () => {\n                showModal();\n            };\n            return;\n        })\n        .catch((error) => Notification.displayException(error));\n};\n\n\n/**\n * Sets the query result data in a DataTable for display.\n *\n * @param {Object} data - The query result data.\n */\nlet setqueryresultid = (data) => {\n    const keys = Object.keys(data);\n\n    if (dataTemp.table || (dataTemp.table && keys.length == 0)) {\n        dataTemp.table = '';\n        document.getElementById(Selectors.elements.queryresultid).innerHTML = \"\";\n    }\n\n    document.getElementById(Selectors.elements.queryresultwrapperid).innerHTML = \"\";\n    const queryResultWrapper = document.getElementById(Selectors.elements.queryresultwrapperid);\n    const tableHtml = '<table class=\"display w-100\" id=\"id_queryresult\"></table>';\n    queryResultWrapper.innerHTML = tableHtml;\n\n    if (keys.length > 0) {\n        const firstItem = data[keys[0]];\n        const columns = Object.keys(firstItem).map((key) => ({\n            title: key,\n            data: key,\n        }));\n        const dataArray = keys.map((key) => data[key]);\n\n        dataTemp.table = new DataTable(`#${Selectors.elements.queryresultid}`, {\n            columns: columns,\n            data: dataArray,\n            scrollX: true,\n            autoWidth: true\n        });\n    } else {\n        // Handle the case where data is empty or has no keys.\n    }\n};\n\n/**\n * Sets the query result data amount into the preview message and display it.\n *\n * @param count - the number of results from the query.\n */\nlet setPreviewMessage = async function(count) {\n    document.getElementById(Selectors.elements.previewwrapper).innerHTML = \"\";\n\n    const previewWrapper = document.getElementById(Selectors.elements.previewwrapper);\n    const previewTitle = await getString('preview', 'local_lionai_reports');\n    const previewTotal = await getString('previewtotal', 'local_lionai_reports', count);\n    const previewNote1 = await getString('previewnote1', 'local_lionai_reports');\n    const previewNote2 = await getString('previewnote2', 'local_lionai_reports');\n    let previewMessageHtml = '<h2>' + previewTitle + '</h2><br>';\n    previewMessageHtml = previewMessageHtml +  '<span class=\"font-weight-bold\">' + previewTotal + '</span><br>';\n    previewMessageHtml = previewMessageHtml +  '<span>' + previewNote1 + '</span><br>';\n    previewMessageHtml = previewMessageHtml +  '<span class=\"text-muted\">' + previewNote2 + '</span>';\n    previewWrapper.innerHTML = previewMessageHtml;\n};\n\n/**\n * Sets the SQL value in the query SQL element and triggers a result retrieval.\n *\n * @param {string} sql - The SQL string to set in the query SQL element.\n */\nconst setSql = (sql) => {\n\n    Selectors.targets.querysqlElem.value = sql;\n    let sqlEditors = Selectors.targets.querysqlElem.parentElement.querySelectorAll('.cm-editor');\n    if (sqlEditors.length > 0) {\n        sqlEditors.forEach((el) => {\n            el.remove();\n        });\n    }\n\n    dataTemp.editor = CodeMirror.fromTextArea(Selectors.targets.querysqlElem, {\n        lineNumbers: true,\n        theme: \"darcula\",\n    });\n    getResult(sql);\n};\n\n/**\n * Shows the history modal by hiding it.\n */\nconst showModal = async() => {\n    const modal = await ModalFactory.create({\n        title: getString('pickfromhistory', 'local_lionai_reports'),\n        large: true,\n        body: Templates.render('local_lionai_reports/historymodal', dataTemp.report),\n        footer: 'An example footer content',\n    });\n    modal.show();\n    Selectors.targets.createdModal = modal;\n\n    modal.getRoot().on(ModalEvents.bodyRendered, () => {\n        let textarea = modal.getRoot()[0].querySelectorAll('textarea');\n        if (textarea.length > 0) {\n            textarea.forEach(el => {\n                if (el.textLength > 0) {\n                    CodeMirror.fromTextArea(el, {\n                        lineNumbers: true,\n                        theme: \"darcula\",\n                    });\n                }\n            });\n        }\n        renderHistory();\n    });\n\n};\n\n/**\n * Hides the history modal.\n */\nconst hideModal = () => {\n    Selectors.targets.createdModal.destroy();\n};\n\n\nconst hideElement = (target) => {\n    target.classList.add(\"d-none\");\n};\n\nconst showElement = (target) => {\n    target.classList.remove(\"d-none\");\n};\n\n/**\n * Retrieves query results using an AJAX call and updates the UI with the results.\n *\n * @param {string} query - The SQL query to execute and retrieve results for.\n */\nconst getResult = (query) => {\n    /**\n     * Hides the alert message element by adding the \"d-none\" class.\n     */\n    hideElement(Selectors.targets.queryresultmessage);\n    hideElement(Selectors.targets.trytofixlElem);\n    Ajax.call([\n        {\n            methodname: \"local_lionai_reports_getresult\",\n            args: {\n                query: query,\n                id: dataTemp.report.id,\n            },\n            done: function(data) {\n                let result = data.result;\n                let message = data.message;\n                let count = data.count;\n                data = JSON.parse(data.data);\n                setMessage(message, !result);\n                setPreviewMessage(count);\n                setqueryresultid(data);\n            },\n            fail: function(error) {\n                Notification.exception(error);\n            },\n        },\n    ]);\n};\n\n/**\n * Sets the target text, which includes SQL and query results, and optionally triggers auto-saving.\n *\n * @param {string} newText - The new text to set.\n */\nconst setTargetText = (newText/* , autoSave = false */) => {\n    setSql(newText);\n\n    spinneroverlay.hidespinneroverlay([\n        \"id_userprompt\",\n        \"id_querysql\",\n        \"id_senduserprompt\",\n    ]);\n};\n\n/**\n * Sets a message to be displayed and optionally shows a correction prompt.\n *\n * @param {string} value - The message to display.\n * @param {number} [correct=2] - A flag to indicate if a correction prompt should be shown (default is 2).\n */\nconst setMessage = (value, correct = 2) => {\n    if (value.length > 0) {\n        document.getElementById(Selectors.elements.queryresultmessage).innerHTML = value;\n        /**\n         * Shows the alert message element by removing the \"d-none\" class.\n         */\n        showElement(Selectors.targets.queryresultmessage);\n    }\n\n    if (correct == 1) {\n        /**\n         * Shows the \"Try to Fix It\" element by removing the \"d-none\" class.\n         */\n        showElement(Selectors.targets.trytofixlElem);\n    }\n};\n\n\nconst originalDataChanged = () => {\n    if (!dataTemp.sqlChanged) {\n        dataTemp.sqlChanged = true;\n        hideElement(Selectors.targets.ratebtnswrapper);\n    }\n};\n\n\n/**\n * Sends a user prompt via an AJAX call and updates the target text based on the response.\n *\n * @param {string} prompt - The user prompt to send.\n */\nconst sendPrompt = (prompt) => {\n    spinneroverlay.showspinneroverlay([\n        \"id_userprompt\",\n        \"id_querysql\",\n        \"id_senduserprompt\",\n    ]);\n\n    hideElement(Selectors.targets.queryresultmessage);\n    hideElement(Selectors.targets.trytofixlElem);\n    hideElement(Selectors.targets.ratebtnswrapper);\n\n    Ajax.call([\n        {\n            methodname: \"local_lionai_reports_send_prompt\",\n            args: {\n                reportid: dataTemp.report.id,\n                prompt: prompt,\n                engine: dataTemp.report.engine,\n                conversationid: dataTemp.report.conversationid,\n            },\n            done: function(data) {\n                let message = data.message;\n                let correct = data.correct;\n                let autoSave = true;\n                if (correct != 2) {\n                    setMessage(\n                        \"Does not look like correct code. Use carefully.\",\n                        correct\n                    );\n                    spinneroverlay.hidespinneroverlay([\n                        \"id_userprompt\",\n                        \"id_querysql\",\n                        \"id_senduserprompt\",\n                    ]);\n                    Selectors.targets.querysqlElem.value = message;\n                    let sqlEditors = Selectors.targets.querysqlElem.parentElement.querySelectorAll('.cm-editor');\n                    if (sqlEditors.length > 0) {\n                        sqlEditors.forEach((el) => {\n                            el.remove();\n                        });\n                    }\n                    dataTemp.editor = CodeMirror.fromTextArea(Selectors.targets.querysqlElem, {\n                        lineNumbers: true,\n                        theme: \"darcula\",\n                    });\n                    return;\n                }\n                dataTemp.sqlOriginal = message;\n                dataTemp.sqlChanged = false;\n\n                // Show rate btns.\n                clearRateBtnsActiveClass();\n                showElement(Selectors.targets.ratebtnswrapper);\n\n                // Show action buttons.\n                var actionbuttons = document.getElementsByClassName(\"action-btns\")[0];\n                actionbuttons.classList.remove(\"d-none\");\n                actionbuttons.classList.add(\"d-flex\");\n\n                // Set promt id from responce to rate btns.\n                setPromptidToBtns(data.promptid);\n\n                setTargetText(message, autoSave);\n            },\n            fail: function(error) {\n                Notification.exception(error);\n                spinneroverlay.hidespinneroverlay([\n                    \"id_userprompt\",\n                    \"id_querysql\",\n                    \"id_senduserprompt\",\n                ]);\n            },\n        },\n    ]);\n};\n\n/**\n * Sets the user prompt value in the prompt element.\n *\n * @param {string} value - The user prompt value to set.\n */\nconst setUserPrompt = (value) => {\n    Selectors.targets.promptElem.value = value;\n};\n\n/**\n * Renders history items and adds click event listeners to them.\n */\nconst renderHistory = () => {\n    const historyItems = document.querySelectorAll(\n        \".lionai_reports-history-list-item\"\n    );\n\n    historyItems.forEach((item) => {\n        item.addEventListener(\"click\", (event) => {\n            event.preventDefault();\n\n            const value = item.textContent.trim();\n            const role = item.getAttribute(\"data-role\");\n\n            hideModal();\n\n            if (role == \"user\") {\n                setUserPrompt(value);\n                sendPrompt(value);\n            } else {\n                setTargetText(value, true);\n            }\n        });\n    });\n};\n\n/**\n * Rate last sent prompt.\n *\n * @param {number} promptid - prompr id.\n * @param {number} rate - prompr rate.\n * @param {object} target - target element.\n */\nconst ratePrompt = (promptid, rate, target) => {\n    rate = target.classList.contains('active') ? 0 : rate;\n    Ajax.call([\n        {\n            methodname: \"local_lionai_reports_rate_prompt\",\n            args: {\n                promptid: +promptid,\n                rate: +rate,\n            },\n            done: function() {\n                clearRateBtnsActiveClass();\n                return (rate === 0) ? target.classList.remove(\"active\") : target.classList.add(\"active\");\n            },\n            fail: function(error) {\n                Notification.exception(error);\n            },\n        },\n    ]);\n};\n\nconst setPromptidToBtns = (promptid) => {\n    Selectors.targets.thmbup.dataset.promptid = promptid;\n    Selectors.targets.thmbdown.dataset.promptid = promptid;\n};\n\nconst clearRateBtnsActiveClass = () => {\n    Selectors.targets.thmbup.classList.remove(\"active\");\n    Selectors.targets.thmbdown.classList.remove(\"active\");\n};\n/**\n * Initializes and renders a report with the given report ID.\n *\n * @param {number} _reportid - The unique identifier of the report to initialize and render.\n * @throws {Error} If an error occurs during report retrieval, parsing, or rendering.\n */\nexport const init = async(_reportid) => {\n\n    const response = await getReport(_reportid);\n    dataTemp.report = JSON.parse(response.data).report;\n\n    renderReport();\n};\n"],"names":["dataTemp","report","table","sqlChanged","sqlOriginal","editor","Selectors","elements","mainelement","promptTextarea","querysqlid","senduserpromptid","getresultid","submitbutton","trytofixid","errordivid","lionaiReportshistory","queryresultwrapperid","queryresultid","queryresultmessage","thmbup","thmbdown","ratebtnswrapper","previewwrapper","targets","getReport","id","Ajax","call","methodname","args","renderReport","render","then","html","js","replaceNodeContents","document","getElementById","promptElem","querysqlElem","trytofixlElem","senduserpromptButton","getresultButton","errorDiv","lionai_reportshistory","CodeMirror","fromTextArea","lineNumbers","theme","onclick","e","ratePrompt","currentTarget","dataset","promptid","rate","addEventListener","sendPrompt","value","getResult","actualsql","textContent","originalDataChanged","event","ctrlKey","metaKey","key","hideElement","querySelectorAll","forEach","item","preventDefault","trim","setUserPrompt","hidespinneroverlay","classList","add","currentName","inputField","createElement","type","appendChild","async","newName","remove","updateResult","action","data","JSON","stringify","updateReport","name","response","parse","focus","showModal","catch","error","Notification","displayException","modal","ModalFactory","create","title","large","body","Templates","footer","show","createdModal","getRoot","on","ModalEvents","bodyRendered","textarea","length","el","textLength","renderHistory","target","showElement","query","done","result","message","count","setMessage","innerHTML","previewWrapper","previewMessageHtml","setPreviewMessage","keys","Object","firstItem","columns","map","dataArray","DataTable","scrollX","autoWidth","setqueryresultid","fail","exception","setTargetText","newText","sql","sqlEditors","parentElement","setSql","correct","prompt","showspinneroverlay","reportid","engine","conversationid","clearRateBtnsActiveClass","actionbuttons","getElementsByClassName","setPromptidToBtns","role","getAttribute","destroy","contains","_reportid"],"mappings":"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"}