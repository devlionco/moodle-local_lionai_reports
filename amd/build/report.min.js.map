{"version":3,"file":"report.min.js","sources":["../src/report.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Connect lionai_reports functionality.\n *\n * @module      local_lionai_reports/report\n * @author      Anton P. <anton@devlion.co>\n * @copyright   2023 Devlion <info@devlion.co>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from \"core/ajax\";\nimport Notification from \"core/notification\";\nimport Templates from \"core/templates\";\nimport spinneroverlay from \"./spinneroverlay\";\nimport DataTable from \"./jquery.dataTables\";\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport {get_string as getString} from 'core/str';\nimport * as CodeMirror from \"./codemirror\";\n\n// eslint-disable-next-line no-unused-vars\n// import \"https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/sql/sql.min.js\";\n\nconst dataTemp = {\n    report: null,\n    table: null,\n    sqlChanged: false,\n    sqlOriginal: '',\n    editor: null,\n};\nconst Selectors = {\n    elements: {\n        mainelement: \"lionai_reports-area\",\n        report: \"lionai_reports-report\",\n        promptTextarea: \"id_userprompt\",\n        querysqlid: \"id_querysql\",\n        senduserpromptid: \"id_senduserprompt\",\n        getresultid: \"id_getresult\",\n        submitbutton: \"id_submitbutton\",\n        trytofixid: \"id_trytofix\",\n        errordivid: \"id_error_querysql\",\n        lionaiReportshistory: \"lionai_reportshistory\",\n        queryresultwrapperid: \"id_queryresultwrapper\",\n        queryresultid: \"id_queryresult\",\n        queryresultmessage: \"id_queryresultmessage\",\n        thmbup: \"thmbup\",\n        thmbdown: \"thmbdown\",\n        ratebtnswrapper: \"ratebtns-wrapper\"\n    },\n    targets: {}\n};\n\n\n/**\n * Retrieves a report by its ID using an AJAX call.\n *\n * @param {number} id - The unique identifier of the report to retrieve.\n * @returns {Promise<Object>} A Promise that resolves to the retrieved report object.\n * @throws {Error} If an error occurs during the AJAX call.\n */\nconst getReport = (id) =>\n    Ajax.call([\n        {\n            methodname: \"local_lionai_reports_getreport\",\n            args: {\n                id: id,\n            },\n        },\n    ])[0];\n\n/**\n * Updates a report by its ID using an AJAX call.\n *\n * @param {number} id - The unique identifier of the report to update.\n * @param {string} [action=\"update\"] - The action to perform on the report (default is \"update\").\n * @param {Object} data - The data to update the report with.\n * @returns {Promise<Object>} A Promise that resolves to the updated report object.\n * @throws {Error} If an error occurs during the AJAX call.\n */\nconst updateReport = (id, action = \"update\", data) => {\n    return Ajax.call([\n        {\n            methodname: \"local_lionai_reports_updatereport\",\n            args: {\n                id: id,\n                action: action,\n                data: JSON.stringify(data),\n            },\n        },\n    ])[0];\n};\n\nconst initTargets = () => {\n    Selectors.targets.promptElem = document.getElementById(Selectors.elements.promptTextarea);\n    Selectors.targets.querysqlElem = document.getElementById(Selectors.elements.querysqlid);\n    Selectors.targets.trytofixlElem = document.getElementById(Selectors.elements.trytofixid);\n    Selectors.targets.queryresultmessage = document.getElementById(Selectors.elements.queryresultmessage);\n    Selectors.targets.thmbup = document.getElementById(Selectors.elements.thmbup);\n    Selectors.targets.thmbdown = document.getElementById(Selectors.elements.thmbdown);\n    Selectors.targets.ratebtnswrapper = document.getElementById(Selectors.elements.ratebtnswrapper);\n\n    Selectors.targets.senduserpromptButton = document.getElementById(Selectors.elements.senduserpromptid);\n    Selectors.targets.getresultButton = document.getElementById(Selectors.elements.getresultid);\n    Selectors.targets.errorDiv = document.getElementById(Selectors.elements.errordivid);\n    Selectors.targets.lionaiReportshistory = document.getElementById(Selectors.elements.lionai_reportshistory);\n};\n\n/**\n * Renders a report by fetching its template, setting up event listeners, and updating the UI.\n *\n */\nconst renderReport = () => {\n    Templates.render(\"local_lionai_reports/report\", dataTemp.report)\n        .then(function(html, js) {\n            Templates.replaceNodeContents(\n                document.getElementById(Selectors.elements.mainelement),\n                html,\n                js\n            );\n\n            initTargets();\n            // TODO: Is it needed?\n            // const changeActualSql = () => {\n            //   dataTemp.actualsql = Selectors.targets.querysqlElem.value;\n            //   if (dataTemp.sqlOriginal != actualsql) {\n            //     originalDataChanged();\n            //   }\n            // }\n\n            dataTemp.editor = CodeMirror.editorFromTextArea(Selectors.targets.querysqlElem);\n            // TODO: Is it needed?\n            // let virtualButtonClick = () => {\n            //   const button = document.getElementById(\"id_submitbutton\");\n            //   button.click();\n            // };\n            Selectors.targets.thmbup.onclick = (e) =>\n                ratePrompt(e.currentTarget.dataset.promptid, e.currentTarget.dataset.rate, e.currentTarget);\n\n            Selectors.targets.thmbdown.onclick = (e) =>\n                ratePrompt(e.currentTarget.dataset.promptid, e.currentTarget.dataset.rate, e.currentTarget);\n\n\n            Selectors.targets.senduserpromptButton.addEventListener(\"click\", () => {\n                sendPrompt(Selectors.targets.promptElem.value);\n            });\n\n            Selectors.targets.getresultButton.addEventListener(\"click\", () => {\n                getResult(Selectors.targets.querysqlElem.value);\n            });\n\n            Selectors.targets.trytofixlElem.addEventListener(\"click\", () => {\n                let value = \"\";\n                let trytofixprompt = \"try to fix this sql:\\n\\n\";\n                value += trytofixprompt;\n\n                let actualsql = Selectors.targets.querysqlElem.value;\n                actualsql += \"\\n\\n\";\n                value += actualsql;\n                const textContent = Selectors.targets.queryresultmessage.textContent;\n                value += textContent;\n\n                sendPrompt(value);\n            });\n\n\n            Selectors.targets.querysqlElem.addEventListener(\"change\", () => {\n                let actualsql = Selectors.targets.querysqlElem.value;\n                if (dataTemp.sqlOriginal != actualsql) {\n                    originalDataChanged();\n                }\n            });\n\n            Selectors.targets.promptElem.addEventListener(\"keydown\", function(event) {\n                if ((event.ctrlKey || event.metaKey) && event.key === \"Enter\") {\n                    sendPrompt(Selectors.targets.promptElem.value);\n                } else {\n                    hideElement(Selectors.targets.ratebtnswrapper);\n                }\n            });\n\n            // TODO: Is it needed?\n            // let timeoutId;\n            // Variable to store the timeout ID for debouncing\n\n            // // TODO: Remove?\n            // const handleQueryInputChange = () => {\n            //   clearTimeout(timeoutId);\n            //   const inputValue = Selectors.targets.querysqlElem.value;\n            //   timeoutId = setTimeout(() => {\n            //     getResult(inputValue);\n            //   }, 500);\n            // };\n\n            const dropdownItems = document.querySelectorAll(\n                \".lionai_reports-examples-list .dropdown-item\"\n            );\n\n            dropdownItems.forEach((item) => {\n                item.addEventListener(\"click\", (event) => {\n                    event.preventDefault();\n\n                    let value = item.textContent.trim();\n                    setUserPrompt(value);\n                    sendPrompt(value);\n                });\n            });\n\n            spinneroverlay.hidespinneroverlay();\n            /**\n             * Hides the \"Try to Fix It\" element by adding the \"d-none\" class.\n             */\n\n            hideElement(Selectors.targets.queryresultmessage);\n            hideElement(Selectors.targets.trytofixlElem);\n            hideElement(Selectors.targets.ratebtnswrapper);\n\n            document\n                .getElementById(\"edit-name-button\")\n                .addEventListener(\"click\", function() {\n                    document.getElementById(\"edit-name-button\").classList.add(\"d-none\");\n\n                    var currentName = document.getElementById(\"edit-name\").textContent;\n\n                    var inputField = document.createElement(\"input\");\n                    inputField.type = \"text\";\n                    inputField.value = currentName;\n                    inputField.classList.add(\"w-100\"); // Add the 'w-100' class\n\n                    document.getElementById(\"edit-name\").textContent = \"\";\n                    document.getElementById(\"edit-name\").appendChild(inputField);\n\n                    // TODO: Discard by Focusout\n                    // inputField.addEventListener(\"blur\", async function (event) {\n                    //   return;\n                    // });\n\n                    inputField.addEventListener(\"keydown\", async function(event) {\n                        // TODO: Discard by Escape\n                        // if (event.key === \"Escape\") {\n                        //   return;\n                        // }\n                        if (event.key === \"Enter\") {\n                            var newName = inputField.value;\n                            document.getElementById(\"edit-name\").textContent = newName;\n                            document\n                                .getElementById(\"edit-name-button\")\n                                .classList.remove(\"d-none\");\n                            const updateResult = await updateReport(dataTemp.report.id, \"update\", {\n                                name: newName,\n                            });\n                            if (updateResult) {\n                                const response = await getReport(dataTemp.report.id);\n                                dataTemp.report = JSON.parse(response.data).report;\n                                renderReport();\n                            }\n                        }\n                    });\n\n                    inputField.focus();\n                });\n            document.getElementById('lionai_reportshistory').onclick = () => {\n                showModal();\n            };\n            return;\n        })\n        .catch();\n};\n\n\n/**\n * Sets the query result data in a DataTable for display.\n *\n * @param {Object} data - The query result data.\n */\nlet setqueryresultid = (data) => {\n    const keys = Object.keys(data);\n\n    if (dataTemp.table || (dataTemp.table && keys.length == 0)) {\n        dataTemp.table = '';\n        document.getElementById(Selectors.elements.queryresultid).innerHTML = \"\";\n    }\n\n    document.getElementById(Selectors.elements.queryresultwrapperid).innerHTML = \"\";\n    const queryResultWrapper = document.getElementById(Selectors.elements.queryresultwrapperid);\n    const tableHtml = '<table class=\"display\" id=\"id_queryresult\"></table>';\n    queryResultWrapper.innerHTML = tableHtml;\n\n    if (keys.length > 0) {\n        const firstItem = data[keys[0]];\n        const columns = Object.keys(firstItem).map((key) => ({\n            title: key,\n            data: key,\n        }));\n        const dataArray = keys.map((key) => data[key]);\n\n        dataTemp.table = new DataTable(`#${Selectors.elements.queryresultid}`, {\n            columns: columns,\n            data: dataArray,\n            scrollX: true,\n        });\n    } else {\n        // Handle the case where data is empty or has no keys.\n        // setMessage(\"Data set is empty or has no keys.\");\n    }\n};\n\n\n// TODO: Is it needed?\n// let cm;\n// let reportid;\n\n/**\n * Sets the SQL value in the query SQL element and triggers a result retrieval.\n *\n * @param {string} sql - The SQL string to set in the query SQL element.\n */\nconst setSql = (sql) => {\n\n    Selectors.targets.querysqlElem.value = sql;\n    let sqlEditors = Selectors.targets.querysqlElem.parentElement.querySelectorAll('.cm-editor');\n    if (sqlEditors.length > 0) {\n        sqlEditors.forEach((el) => {\n            el.remove();\n        });\n    }\n\n    dataTemp.editor = CodeMirror.editorFromTextArea(Selectors.targets.querysqlElem);\n    getResult(sql);\n};\n\n\n/**\n * Shows the history modal by hiding it.\n */\nconst showModal = async() => {\n    const modal = await ModalFactory.create({\n        title: getString('pickfromhistory', 'local_lionai_reports'),\n        body: Templates.render('local_lionai_reports/historymodal', dataTemp.report),\n        footer: 'An example footer content',\n    });\n    modal.show();\n    Selectors.targets.createdModal = modal;\n\n    modal.getRoot().on(ModalEvents.bodyRendered, () => {\n        renderHistory();\n    });\n\n};\n\n/**\n * Hides the history modal.\n */\nconst hideModal = () => {\n    Selectors.targets.createdModal.destroy();\n};\n\n\nconst hideElement = (target) => {\n    target.classList.add(\"d-none\");\n};\n\nconst showElement = (target) => {\n    target.classList.remove(\"d-none\");\n};\n\n/**\n * Retrieves query results using an AJAX call and updates the UI with the results.\n *\n * @param {string} query - The SQL query to execute and retrieve results for.\n */\nconst getResult = (query) => {\n    /**\n     * Hides the alert message element by adding the \"d-none\" class.\n     */\n    hideElement(Selectors.targets.queryresultmessage);\n    hideElement(Selectors.targets.trytofixlElem);\n    Ajax.call([\n        {\n            methodname: \"local_lionai_reports_getresult\",\n            args: {\n                query: query,\n                id: dataTemp.report.id,\n            },\n            done: function(data) {\n                let result = data.result;\n                let message = data.message;\n                data = JSON.parse(data.data);\n                setMessage(message, !result);\n                setqueryresultid(data);\n            },\n            fail: function(error) {\n                Notification.exception(error);\n            },\n        },\n    ]);\n};\n\n/**\n * Sets the target text, which includes SQL and query results, and optionally triggers auto-saving.\n *\n * @param {string} newText - The new text to set.\n */\nconst setTargetText = (newText/* , autoSave = false */) => {\n    setSql(newText);\n\n    spinneroverlay.hidespinneroverlay([\n        \"id_userprompt\",\n        \"id_querysql\",\n        \"id_senduserprompt\",\n    ]);\n\n    // Some delay to render sql with codemirror. Rework to callback.\n    // setTimeout(function () {\n    //   hidespinneroverlay();\n\n    //   // TODO: autosave\n    //   // if (autoSave) {\n    //   //   virtualButtonClick();\n    //   // }\n    // }, 500);\n};\n\n/**\n * Sets a message to be displayed and optionally shows a correction prompt.\n *\n * @param {string} value - The message to display.\n * @param {number} [correct=2] - A flag to indicate if a correction prompt should be shown (default is 2).\n */\nconst setMessage = (value, correct = 2) => {\n    if (value.length > 0) {\n        document.getElementById(Selectors.elements.queryresultmessage).innerHTML = value;\n        /**\n         * Shows the alert message element by removing the \"d-none\" class.\n         */\n        showElement(Selectors.targets.queryresultmessage);\n    }\n\n    if (correct == 1) {\n        /**\n         * Shows the \"Try to Fix It\" element by removing the \"d-none\" class.\n         */\n        showElement(Selectors.targets.trytofixlElem);\n    }\n};\n\n\nconst originalDataChanged = () => {\n    if (!dataTemp.sqlChanged) {\n        dataTemp.sqlChanged = true;\n        hideElement(Selectors.targets.ratebtnswrapper);\n    }\n};\n\n\n/**\n * Sends a user prompt via an AJAX call and updates the target text based on the response.\n *\n * @param {string} prompt - The user prompt to send.\n */\nconst sendPrompt = (prompt) => {\n    spinneroverlay.showspinneroverlay([\n        \"id_userprompt\",\n        \"id_querysql\",\n        \"id_senduserprompt\",\n    ]);\n\n    hideElement(Selectors.targets.queryresultmessage);\n    hideElement(Selectors.targets.trytofixlElem);\n    hideElement(Selectors.targets.ratebtnswrapper);\n\n    Ajax.call([\n        {\n            methodname: \"local_lionai_reports_send_prompt\",\n            args: {\n                reportid: dataTemp.report.id,\n                prompt: prompt,\n                engine: dataTemp.report.engine,\n                conversationid: dataTemp.report.conversationid,\n            },\n            done: function(data) {\n                let message = data.message;\n                let correct = data.correct;\n                let autoSave = true;\n                if (correct != 2) {\n                    setMessage(\n                        \"Does not look like correct code. Use carefully.\",\n                        correct\n                    );\n                    spinneroverlay.hidespinneroverlay([\n                        \"id_userprompt\",\n                        \"id_querysql\",\n                        \"id_senduserprompt\",\n                    ]);\n                    Selectors.targets.querysqlElem.value = message;\n                    let sqlEditors = Selectors.targets.querysqlElem.parentElement.querySelectorAll('.cm-editor');\n                    if (sqlEditors.length > 0) {\n                        sqlEditors.forEach((el) => {\n                            el.remove();\n                        });\n                    }\n                    dataTemp.editor = CodeMirror.editorFromTextArea(Selectors.targets.querysqlElem);\n                    return;\n                }\n                dataTemp.sqlOriginal = message;\n                dataTemp.sqlChanged = false;\n\n                // Show rate btns.\n                clearRateBtnsActiveClass();\n                showElement(Selectors.targets.ratebtnswrapper);\n\n                // Set promt id from responce to rate btns.\n                setPromptidToBtns(data.promptid);\n\n                setTargetText(message, autoSave);\n            },\n            fail: function(error) {\n                Notification.exception(error);\n                spinneroverlay.hidespinneroverlay([\n                    \"id_userprompt\",\n                    \"id_querysql\",\n                    \"id_senduserprompt\",\n                ]);\n            },\n        },\n    ]);\n};\n\n/**\n * Sets the user prompt value in the prompt element.\n *\n * @param {string} value - The user prompt value to set.\n */\nconst setUserPrompt = (value) => {\n    Selectors.targets.promptElem.value = value;\n};\n\n/**\n * Renders history items and adds click event listeners to them.\n */\nconst renderHistory = () => {\n    const historyItems = document.querySelectorAll(\n        \".lionai_reports-history-list-item\"\n    );\n\n    historyItems.forEach((item) => {\n        item.addEventListener(\"click\", (event) => {\n            event.preventDefault();\n\n            const value = item.textContent.trim();\n            const role = item.getAttribute(\"data-role\");\n\n            hideModal();\n\n            if (role == \"user\") {\n                setUserPrompt(value);\n                sendPrompt(value);\n            } else {\n                setTargetText(value, true);\n            }\n        });\n    });\n};\n\n/**\n * Rate last sent prompt.\n *\n * @param {number} promptid - prompr id.\n * @param {number} rate - prompr rate.\n * @param {object} target - target element.\n */\nconst ratePrompt = (promptid, rate, target) => {\n    rate = target.classList.contains('active') ? 0 : rate;\n    Ajax.call([\n        {\n            methodname: \"local_lionai_reports_rate_prompt\",\n            args: {\n                promptid: +promptid,\n                rate: +rate,\n            },\n            done: function() {\n                clearRateBtnsActiveClass();\n                return (rate === 0) ? target.classList.remove(\"active\") : target.classList.add(\"active\");\n            },\n            fail: function(error) {\n                Notification.exception(error);\n            },\n        },\n    ]);\n};\n\nconst setPromptidToBtns = (promptid) => {\n    Selectors.targets.thmbup.dataset.promptid = promptid;\n    Selectors.targets.thmbdown.dataset.promptid = promptid;\n};\n\nconst clearRateBtnsActiveClass = () => {\n    Selectors.targets.thmbup.classList.remove(\"active\");\n    Selectors.targets.thmbdown.classList.remove(\"active\");\n};\n/**\n * Initializes and renders a report with the given report ID.\n *\n * @param {number} _reportid - The unique identifier of the report to initialize and render.\n * @throws {Error} If an error occurs during report retrieval, parsing, or rendering.\n */\nexport const init = async(_reportid) => {\n\n    const response = await getReport(_reportid);\n    dataTemp.report = JSON.parse(response.data).report;\n\n    renderReport();\n};\n"],"names":["dataTemp","report","table","sqlChanged","sqlOriginal","editor","Selectors","elements","mainelement","promptTextarea","querysqlid","senduserpromptid","getresultid","submitbutton","trytofixid","errordivid","lionaiReportshistory","queryresultwrapperid","queryresultid","queryresultmessage","thmbup","thmbdown","ratebtnswrapper","targets","getReport","id","Ajax","call","methodname","args","renderReport","render","then","html","js","replaceNodeContents","document","getElementById","promptElem","querysqlElem","trytofixlElem","senduserpromptButton","getresultButton","errorDiv","lionai_reportshistory","CodeMirror","editorFromTextArea","onclick","e","ratePrompt","currentTarget","dataset","promptid","rate","addEventListener","sendPrompt","value","getResult","actualsql","textContent","originalDataChanged","event","ctrlKey","metaKey","key","hideElement","querySelectorAll","forEach","item","preventDefault","trim","setUserPrompt","hidespinneroverlay","classList","add","currentName","inputField","createElement","type","appendChild","async","newName","remove","updateResult","action","data","JSON","stringify","updateReport","name","response","parse","focus","showModal","catch","modal","ModalFactory","create","title","body","Templates","footer","show","createdModal","getRoot","on","ModalEvents","bodyRendered","renderHistory","target","showElement","query","done","result","message","setMessage","keys","Object","length","innerHTML","firstItem","columns","map","dataArray","DataTable","scrollX","setqueryresultid","fail","error","exception","setTargetText","newText","sql","sqlEditors","parentElement","el","setSql","correct","prompt","showspinneroverlay","reportid","engine","conversationid","clearRateBtnsActiveClass","setPromptidToBtns","role","getAttribute","destroy","contains","_reportid"],"mappings":";;;;;;;;4kCAqCMA,SAAW,CACbC,OAAQ,KACRC,MAAO,KACPC,YAAY,EACZC,YAAa,GACbC,OAAQ,MAENC,UAAY,CACdC,SAAU,CACNC,YAAa,sBACbP,OAAQ,wBACRQ,eAAgB,gBAChBC,WAAY,cACZC,iBAAkB,oBAClBC,YAAa,eACbC,aAAc,kBACdC,WAAY,cACZC,WAAY,oBACZC,qBAAsB,wBACtBC,qBAAsB,wBACtBC,cAAe,iBACfC,mBAAoB,wBACpBC,OAAQ,SACRC,SAAU,WACVC,gBAAiB,oBAErBC,QAAS,IAWPC,UAAaC,IACfC,cAAKC,KAAK,CACN,CACIC,WAAY,iCACZC,KAAM,CACFJ,GAAIA,OAGb,GA2CDK,aAAe,wBACPC,OAAO,8BAA+B/B,SAASC,QACpD+B,MAAK,SAASC,KAAMC,uBACPC,oBACNC,SAASC,eAAe/B,UAAUC,SAASC,aAC3CyB,KACAC,IAxBZ5B,UAAUiB,QAAQe,WAAaF,SAASC,eAAe/B,UAAUC,SAASE,gBAC1EH,UAAUiB,QAAQgB,aAAeH,SAASC,eAAe/B,UAAUC,SAASG,YAC5EJ,UAAUiB,QAAQiB,cAAgBJ,SAASC,eAAe/B,UAAUC,SAASO,YAC7ER,UAAUiB,QAAQJ,mBAAqBiB,SAASC,eAAe/B,UAAUC,SAASY,oBAClFb,UAAUiB,QAAQH,OAASgB,SAASC,eAAe/B,UAAUC,SAASa,QACtEd,UAAUiB,QAAQF,SAAWe,SAASC,eAAe/B,UAAUC,SAASc,UACxEf,UAAUiB,QAAQD,gBAAkBc,SAASC,eAAe/B,UAAUC,SAASe,iBAE/EhB,UAAUiB,QAAQkB,qBAAuBL,SAASC,eAAe/B,UAAUC,SAASI,kBACpFL,UAAUiB,QAAQmB,gBAAkBN,SAASC,eAAe/B,UAAUC,SAASK,aAC/EN,UAAUiB,QAAQoB,SAAWP,SAASC,eAAe/B,UAAUC,SAASQ,YACxET,UAAUiB,QAAQP,qBAAuBoB,SAASC,eAAe/B,UAAUC,SAASqC,uBAyB5E5C,SAASK,OAASwC,WAAWC,mBAAmBxC,UAAUiB,QAAQgB,cAMlEjC,UAAUiB,QAAQH,OAAO2B,QAAWC,GAChCC,WAAWD,EAAEE,cAAcC,QAAQC,SAAUJ,EAAEE,cAAcC,QAAQE,KAAML,EAAEE,eAEjF5C,UAAUiB,QAAQF,SAAS0B,QAAWC,GAClCC,WAAWD,EAAEE,cAAcC,QAAQC,SAAUJ,EAAEE,cAAcC,QAAQE,KAAML,EAAEE,eAGjF5C,UAAUiB,QAAQkB,qBAAqBa,iBAAiB,SAAS,KAC7DC,WAAWjD,UAAUiB,QAAQe,WAAWkB,UAG5ClD,UAAUiB,QAAQmB,gBAAgBY,iBAAiB,SAAS,KACxDG,UAAUnD,UAAUiB,QAAQgB,aAAaiB,UAG7ClD,UAAUiB,QAAQiB,cAAcc,iBAAiB,SAAS,SAClDE,MAAQ,GAEZA,OADqB,+BAGjBE,UAAYpD,UAAUiB,QAAQgB,aAAaiB,MAC/CE,WAAa,OACbF,OAASE,UAETF,OADoBlD,UAAUiB,QAAQJ,mBAAmBwC,YAGzDJ,WAAWC,UAIflD,UAAUiB,QAAQgB,aAAae,iBAAiB,UAAU,SAClDI,UAAYpD,UAAUiB,QAAQgB,aAAaiB,MAC3CxD,SAASI,aAAesD,WACxBE,yBAIRtD,UAAUiB,QAAQe,WAAWgB,iBAAiB,WAAW,SAASO,QACzDA,MAAMC,SAAWD,MAAME,UAA0B,UAAdF,MAAMG,IAC1CT,WAAWjD,UAAUiB,QAAQe,WAAWkB,OAExCS,YAAY3D,UAAUiB,QAAQD,oBAiBhBc,SAAS8B,iBAC3B,gDAGUC,SAASC,OACnBA,KAAKd,iBAAiB,SAAUO,QAC5BA,MAAMQ,qBAEFb,MAAQY,KAAKT,YAAYW,OAC7BC,cAAcf,OACdD,WAAWC,qCAIJgB,qBAKfP,YAAY3D,UAAUiB,QAAQJ,oBAC9B8C,YAAY3D,UAAUiB,QAAQiB,eAC9ByB,YAAY3D,UAAUiB,QAAQD,iBAE9Bc,SACKC,eAAe,oBACfiB,iBAAiB,SAAS,WACvBlB,SAASC,eAAe,oBAAoBoC,UAAUC,IAAI,cAEtDC,YAAcvC,SAASC,eAAe,aAAasB,YAEnDiB,WAAaxC,SAASyC,cAAc,SACxCD,WAAWE,KAAO,OAClBF,WAAWpB,MAAQmB,YACnBC,WAAWH,UAAUC,IAAI,SAEzBtC,SAASC,eAAe,aAAasB,YAAc,GACnDvB,SAASC,eAAe,aAAa0C,YAAYH,YAOjDA,WAAWtB,iBAAiB,WAAW0B,eAAenB,UAKhC,UAAdA,MAAMG,IAAiB,KACnBiB,QAAUL,WAAWpB,MACzBpB,SAASC,eAAe,aAAasB,YAAcsB,QACnD7C,SACKC,eAAe,oBACfoC,UAAUS,OAAO,gBAChBC,mBAxKb,SAAC1D,QAAI2D,8DAAS,SAAUC,mDAClC3D,cAAKC,KAAK,CACb,CACIC,WAAY,oCACZC,KAAM,CACFJ,GAAIA,GACJ2D,OAAQA,OACRC,KAAMC,KAAKC,UAAUF,UAG9B,GA8JgDG,CAAaxF,SAASC,OAAOwB,GAAI,SAAU,CAClEgE,KAAMR,aAENE,aAAc,OACRO,eAAiBlE,UAAUxB,SAASC,OAAOwB,IACjDzB,SAASC,OAASqF,KAAKK,MAAMD,SAASL,MAAMpF,OAC5C6B,oBAKZ8C,WAAWgB,WAEnBxD,SAASC,eAAe,yBAAyBU,QAAU,KACvD8C,gBAIPC,eAqEHD,UAAYb,gBACRe,YAAcC,uBAAaC,OAAO,CACpCC,OAAO,mBAAU,kBAAmB,wBACpCC,KAAMC,mBAAUrE,OAAO,oCAAqC/B,SAASC,QACrEoG,OAAQ,8BAEZN,MAAMO,OACNhG,UAAUiB,QAAQgF,aAAeR,MAEjCA,MAAMS,UAAUC,GAAGC,sBAAYC,cAAc,KACzCC,oBAaF3C,YAAe4C,SACjBA,OAAOpC,UAAUC,IAAI,WAGnBoC,YAAeD,SACjBA,OAAOpC,UAAUS,OAAO,WAQtBzB,UAAasD,QAIf9C,YAAY3D,UAAUiB,QAAQJ,oBAC9B8C,YAAY3D,UAAUiB,QAAQiB,6BACzBb,KAAK,CACN,CACIC,WAAY,iCACZC,KAAM,CACFkF,MAAOA,MACPtF,GAAIzB,SAASC,OAAOwB,IAExBuF,KAAM,SAAS3B,UACP4B,OAAS5B,KAAK4B,OACdC,QAAU7B,KAAK6B,QACnB7B,KAAOC,KAAKK,MAAMN,KAAKA,MACvB8B,WAAWD,SAAUD,QAjHb5B,CAAAA,aACd+B,KAAOC,OAAOD,KAAK/B,UAErBrF,SAASE,OAAUF,SAASE,OAAwB,GAAfkH,KAAKE,UAC1CtH,SAASE,MAAQ,GACjBkC,SAASC,eAAe/B,UAAUC,SAASW,eAAeqG,UAAY,IAG1EnF,SAASC,eAAe/B,UAAUC,SAASU,sBAAsBsG,UAAY,GAClDnF,SAASC,eAAe/B,UAAUC,SAASU,sBAEnDsG,UADD,sDAGdH,KAAKE,OAAS,EAAG,OACXE,UAAYnC,KAAK+B,KAAK,IACtBK,QAAUJ,OAAOD,KAAKI,WAAWE,KAAK1D,OACxCkC,MAAOlC,IACPqB,KAAMrB,QAEJ2D,UAAYP,KAAKM,KAAK1D,KAAQqB,KAAKrB,OAEzChE,SAASE,MAAQ,IAAI0H,2BAActH,UAAUC,SAASW,eAAiB,CACnEuG,QAASA,QACTpC,KAAMsC,UACNE,SAAS,MA0FLC,CAAiBzC,OAErB0C,KAAM,SAASC,6BACEC,UAAUD,YAWjCE,cAAiBC,UAtFPC,CAAAA,MAEZ9H,UAAUiB,QAAQgB,aAAaiB,MAAQ4E,QACnCC,WAAa/H,UAAUiB,QAAQgB,aAAa+F,cAAcpE,iBAAiB,cAC3EmE,WAAWf,OAAS,GACpBe,WAAWlE,SAASoE,KAChBA,GAAGrD,YAIXlF,SAASK,OAASwC,WAAWC,mBAAmBxC,UAAUiB,QAAQgB,cAClEkB,UAAU2E,MA4EVI,CAAOL,iCAEQ3D,mBAAmB,CAC9B,gBACA,cACA,uBAoBF2C,WAAa,SAAC3D,WAAOiF,+DAAU,EAC7BjF,MAAM8D,OAAS,IACflF,SAASC,eAAe/B,UAAUC,SAASY,oBAAoBoG,UAAY/D,MAI3EsD,YAAYxG,UAAUiB,QAAQJ,qBAGnB,GAAXsH,SAIA3B,YAAYxG,UAAUiB,QAAQiB,gBAKhCoB,oBAAsB,KACnB5D,SAASG,aACVH,SAASG,YAAa,EACtB8D,YAAY3D,UAAUiB,QAAQD,mBAUhCiC,WAAcmF,iCACDC,mBAAmB,CAC9B,gBACA,cACA,sBAGJ1E,YAAY3D,UAAUiB,QAAQJ,oBAC9B8C,YAAY3D,UAAUiB,QAAQiB,eAC9ByB,YAAY3D,UAAUiB,QAAQD,+BAEzBK,KAAK,CACN,CACIC,WAAY,mCACZC,KAAM,CACF+G,SAAU5I,SAASC,OAAOwB,GAC1BiH,OAAQA,OACRG,OAAQ7I,SAASC,OAAO4I,OACxBC,eAAgB9I,SAASC,OAAO6I,gBAEpC9B,KAAM,SAAS3B,UACP6B,QAAU7B,KAAK6B,QACfuB,QAAUpD,KAAKoD,WAEJ,GAAXA,QAAc,CACdtB,WACI,kDACAsB,iCAEWjE,mBAAmB,CAC9B,gBACA,cACA,sBAEJlE,UAAUiB,QAAQgB,aAAaiB,MAAQ0D,YACnCmB,WAAa/H,UAAUiB,QAAQgB,aAAa+F,cAAcpE,iBAAiB,qBAC3EmE,WAAWf,OAAS,GACpBe,WAAWlE,SAASoE,KAChBA,GAAGrD,iBAGXlF,SAASK,OAASwC,WAAWC,mBAAmBxC,UAAUiB,QAAQgB,eAGtEvC,SAASI,YAAc8G,QACvBlH,SAASG,YAAa,EAGtB4I,2BACAjC,YAAYxG,UAAUiB,QAAQD,iBAG9B0H,kBAAkB3D,KAAKjC,UAEvB8E,cAAchB,UAElBa,KAAM,SAASC,6BACEC,UAAUD,+BACRxD,mBAAmB,CAC9B,gBACA,cACA,2BAYdD,cAAiBf,QACnBlD,UAAUiB,QAAQe,WAAWkB,MAAQA,OAMnCoD,cAAgB,KACGxE,SAAS8B,iBAC1B,qCAGSC,SAASC,OAClBA,KAAKd,iBAAiB,SAAUO,QAC5BA,MAAMQ,uBAEAb,MAAQY,KAAKT,YAAYW,OACzB2E,KAAO7E,KAAK8E,aAAa,aApMvC5I,UAAUiB,QAAQgF,aAAa4C,UAwMX,QAARF,MACA1E,cAAcf,OACdD,WAAWC,QAEX0E,cAAc1E,cAaxBP,WAAa,CAACG,SAAUC,KAAMwD,UAChCxD,KAAOwD,OAAOpC,UAAU2E,SAAS,UAAY,EAAI/F,mBAC5C1B,KAAK,CACN,CACIC,WAAY,mCACZC,KAAM,CACFuB,UAAWA,SACXC,MAAOA,MAEX2D,KAAM,kBACF+B,2BACiB,IAAT1F,KAAcwD,OAAOpC,UAAUS,OAAO,UAAY2B,OAAOpC,UAAUC,IAAI,WAEnFqD,KAAM,SAASC,6BACEC,UAAUD,YAMjCgB,kBAAqB5F,WACvB9C,UAAUiB,QAAQH,OAAO+B,QAAQC,SAAWA,SAC5C9C,UAAUiB,QAAQF,SAAS8B,QAAQC,SAAWA,UAG5C2F,yBAA2B,KAC7BzI,UAAUiB,QAAQH,OAAOqD,UAAUS,OAAO,UAC1C5E,UAAUiB,QAAQF,SAASoD,UAAUS,OAAO,yBAQ5BF,MAAAA,kBAEVU,eAAiBlE,UAAU6H,WACjCrJ,SAASC,OAASqF,KAAKK,MAAMD,SAASL,MAAMpF,OAE5C6B"}