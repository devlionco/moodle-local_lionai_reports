{"version":3,"file":"report.min.js","sources":["../src/report.js"],"sourcesContent":["/* eslint-disable capitalized-comments */\n/* eslint-disable require-jsdoc */\n/* eslint-disable space-before-function-paren */\n/* eslint-disable babel/object-curly-spacing */\n/* eslint-disable jsdoc/require-jsdoc */\n/* eslint-disable no-console */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-trailing-spaces */\n\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Connect smartreport functionality.\n *\n * @module      local_smartreport/report\n * @author      Anton P. <anton@devlion.co>\n * @copyright   2023 Devlion <info@devlion.co>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from \"core/ajax\";\nimport $ from \"jquery\"; // TODO: Remove! Use only ES6\nimport Notification from \"core/notification\";\nimport { add } from \"core/toast\";\nimport Templates from \"core/templates\";\nimport spinneroverlay from \"./spinneroverlay\";\nimport \"https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js\";\n\nlet report;\nlet table;\n\nconst SELECTORS = {\n  MAINELEMENT: \"smartreport-area\",\n  REPORT: \"smartreport-report\",\n  promptid: \"id_userprompt\",\n  querysqlid: \"id_querysql\",\n  senduserpromptid: \"id_senduserprompt\",\n  submitbutton: \"id_submitbutton\",\n  trytofixid: \"id_trytofix\",\n  errordivid: \"id_error_querysql\",\n  smartreporthistory: \"smartreporthistory\",\n  queryresultwrapperid: \"id_queryresultwrapper\",\n  queryresultid: \"id_queryresult\",\n  queryresultmessage: \"id_queryresultmessage\",\n};\n\nconst getReport = (id) =>\n  Ajax.call([\n    {\n      methodname: \"local_smartreport_getreport\",\n      args: {\n        id: id,\n      },\n    },\n  ])[0];\n\nconst renderReport = (_report) => {\n  console.log(_report);\n  _report.allreportsurl = M.cfg.wwwroot + \"/local/smartreport\";\n  Templates.render(\"local_smartreport/report\", _report)\n    .then(function (html, js) {\n      Templates.appendNodeContents(\n        document.getElementById(SELECTORS.MAINELEMENT),\n        html,\n        js\n      );\n\n      const promptElem = document.getElementById(SELECTORS.promptid);\n      const querysqlElem = document.getElementById(SELECTORS.querysqlid);\n      const trytofixlElem = document.getElementById(SELECTORS.trytofixid);\n      const queryresultmessage = document.getElementById(\n        SELECTORS.queryresultmessage\n      );\n      const senduserpromptButton = document.getElementById(\n        SELECTORS.senduserpromptid\n      );\n      const errorDiv = document.getElementById(SELECTORS.errordivid);\n      const smartreporthistory = document.getElementById(\n        SELECTORS.smartreporthistory\n      );\n\n      let cm;\n      let reportid;\n\n      const setSql = (sql) => {\n        // TODO: after implementing CpdeMirror\n        // let nextSibling = querysqlElem.nextElementSibling;\n        // while (nextSibling) {\n        //   if (nextSibling.classList.contains(\"CodeMirror\")) {\n        //     cm = nextSibling.CodeMirror;\n        //     break;\n        //   }\n        //   nextSibling = nextSibling.nextElementSibling;\n        // }\n        // cm.setValue(sql);\n\n        // Using textfield.\n        querysqlElem.value = sql;\n\n        getResult(sql);\n      };\n\n      const setUserPrompt = (value) => {\n        promptElem.value = value;\n      };\n\n      let setTargetText = (newText, autoSave = false) => {\n        setSql(newText);\n\n        spinneroverlay.hidespinneroverlay([\n          \"id_userprompt\",\n          \"id_querysql\",\n          \"id_senduserprompt\",\n        ]);\n\n        // Some delay to render sql with codemirror. Rework to callback.\n        // setTimeout(function () {\n        //   hidespinneroverlay();\n\n        //   // TODO: autosave\n        //   // if (autoSave) {\n        //   //   virtualButtonClick();\n        //   // }\n        // }, 500);\n      };\n\n      let setqueryresultid = (data) => {\n        console.log(data);\n        const keys = Object.keys(data);\n\n        if (table || (table && keys.length == 0)) {\n          table.destroy();\n          $(\"#id_queryresult\").html(\"\");\n        }\n\n        $(\"#\" + SELECTORS.queryresultwrapperid).html(\"\");\n        const queryResultWrapper = $(\"#\" + SELECTORS.queryresultwrapperid);\n        const tableHtml = '<table class=\"display\" id=\"id_queryresult\"></table>';\n        queryResultWrapper.html(tableHtml);\n\n        if (keys.length > 0) {\n          const firstItem = data[keys[0]];\n          const columns = Object.keys(firstItem).map((key) => ({\n            title: key,\n            data: key,\n          }));\n          const dataArray = keys.map((key) => data[key]);\n          table = $(\"#\" + SELECTORS.queryresultid).DataTable({\n            columns: columns,\n            data: dataArray,\n          });\n        } else {\n          // Handle the case where data is empty or has no keys.\n          // setMessage(\"Data set is empty or has no keys.\");\n        }\n      };\n\n      const setMessage = (value) => {\n        $(\"#\" + SELECTORS.queryresultmessage).html(value);\n      };\n\n      let virtualButtonClick = () => {\n        const button = document.getElementById(\"id_submitbutton\");\n        button.click();\n      };\n\n      let sendPrompt = (prompt) => {\n        spinneroverlay.showspinneroverlay([\n          \"id_userprompt\",\n          \"id_querysql\",\n          \"id_senduserprompt\",\n        ]);\n\n        console.log(\"prompt\", prompt);\n        console.log(\"report\", report);\n\n        Ajax.call([\n          {\n            methodname: \"local_smartreport_send_prompt\",\n            args: {\n              reportid: report.id,\n              // model: model,\n              prompt: prompt,\n              engine: report.engine,\n              conversationid: report.conversationid,\n            },\n            done: function (data) {\n              let message = data.message;\n              let correct = data.correct;\n              console.log(data);\n              let autoSave = true;\n              setMessage(\"\");\n              if (!correct) {\n                // add(\"Does not look like correct code. Use carefully.\", {\n                //   type: \"danger\",\n                //   delay: 5000,\n                // });\n                setMessage(\"Does not look like correct code. Use carefully.\");\n                autoSave = false;\n              }\n              setTargetText(message, autoSave);\n            },\n            fail: function (error) {\n              Notification.exception(error);\n              spinneroverlay.hidespinneroverlay([\n                \"id_userprompt\",\n                \"id_querysql\",\n                \"id_senduserprompt\",\n              ]);\n            },\n          },\n        ]);\n      };\n\n      let getResult = (query) => {\n        // spinneroverlay.showspinneroverlay([\n        //   \"id_userprompt\",\n        //   \"id_querysql\",\n        //   \"id_senduserprompt\",\n        // ]);\n\n        // console.log(\"prompt\", prompt);\n        // console.log(\"report\", report);\n\n        Ajax.call([\n          {\n            methodname: \"local_smartreport_getresult\",\n            args: {\n              query: query,\n            },\n            done: function (data) {\n              console.log(data);\n              let result = data.result;\n              let message = data.message;\n              data = JSON.parse(data.data);\n              console.log(data);\n              setMessage(\"\");\n              if (!result) {\n                setMessage(message);\n                // add(\"Does not look like correct code. Use carefully.\", {\n                // add(message, {\n                //   type: \"danger\",\n                //   delay: 5000,\n                // });\n                // return;\n              }\n              setqueryresultid(data);\n            },\n            fail: function (error) {\n              Notification.exception(error);\n            },\n          },\n        ]);\n      };\n\n      const showModal = () => {\n        $(\"#historyModal\").modal(\"hide\");\n      };\n\n      const hideModal = () => {\n        $(\"#historyModal\").modal(\"hide\");\n      };\n\n      const renderHistory = () => {\n        // Get all the list items with the class 'smartreport-history-list-item'\n        const historyItems = document.querySelectorAll(\n          \".smartreport-history-list-item\"\n        );\n\n        // Add a click event listener to each list item\n        historyItems.forEach((item) => {\n          item.addEventListener(\"click\", (event) => {\n            // Prevent the default behavior of the link (if it's an anchor tag)\n            event.preventDefault();\n\n            // Get the value and data-role attributes of the clicked item\n            const value = item.textContent.trim();\n            const role = item.getAttribute(\"data-role\");\n\n            // Use the value and role as needed\n            console.log(`Value: ${value}, Role: ${role}`);\n\n            hideModal();\n\n            if (role == \"user\") {\n              setUserPrompt(value);\n              // sendPrompt(value);\n            } else {\n              setTargetText(value, true);\n            }\n          });\n        });\n      };\n\n      senduserpromptButton.addEventListener(\"click\", (event) => {\n        console.log(promptElem.value);\n        sendPrompt(promptElem.value);\n      });\n\n      if (trytofixlElem) {\n        trytofixlElem.addEventListener(\"click\", (event) => {\n          console.log(promptElem.value);\n          let value = \"\";\n          // Get from BE.\n          let trytofixprompt = \"try to fix this sql:\\n\\n\";\n          value += trytofixprompt;\n          let nextSibling = querysqlElem.nextElementSibling;\n          while (nextSibling) {\n            if (nextSibling.classList.contains(\"CodeMirror\")) {\n              cm = nextSibling.CodeMirror;\n              break;\n            }\n            nextSibling = nextSibling.nextElementSibling;\n          }\n          let actualsql = cm.getValue();\n          actualsql += \"\\n\\n\";\n          value += actualsql;\n          const codeElement = errorDiv.querySelector(\"code pre\");\n          if (codeElement) {\n            const textContent = codeElement.textContent;\n            console.log(textContent);\n            value += textContent;\n          }\n\n          sendPrompt(value);\n        });\n      }\n\n      promptElem.addEventListener(\"keydown\", function (event) {\n        if ((event.ctrlKey || event.metaKey) && event.key === \"Enter\") {\n          console.log(promptElem.value);\n          sendPrompt(promptElem.value);\n        }\n      });\n\n      // querysqlElem.addEventListener(\"keydown\", function (event) {\n      //   console.log(querysqlElem.value);\n      //   getResult(querysqlElem.value);\n      // });\n\n      let timeoutId; // Variable to store the timeout ID for debouncing\n\n      const handleQueryInputChange = (event) => {\n        clearTimeout(timeoutId); // Clear the previous timeout (if any)\n\n        // Get the input value\n        const inputValue = querysqlElem.value;\n\n        // Set a new timeout to delay the execution of getResult\n        timeoutId = setTimeout(() => {\n          getResult(inputValue);\n        }, 500); // Adjust the debounce delay (in milliseconds) as needed\n      };\n\n      // Add a listener for the \"keydown\" event\n      // querysqlElem.addEventListener(\"keyup\", handleQueryInputChange);\n\n      // Add a listener for the \"paste\" event\n      // querysqlElem.addEventListener(\"paste\", handleQueryInputChange);\n      querysqlElem.addEventListener(\"input\", handleQueryInputChange);\n\n      // Examples.\n      // Get all the dropdown items\n      const dropdownItems = document.querySelectorAll(\n        \".smartreport-examples-list .dropdown-item\"\n      );\n\n      // Add a click event listener to each dropdown item\n      dropdownItems.forEach((item) => {\n        item.addEventListener(\"click\", (event) => {\n          // Prevent the default behavior of the link (preventing navigation)\n          event.preventDefault();\n\n          // Print the text content of the clicked dropdown item to the console\n          let value = item.textContent.trim();\n          console.log(value);\n          setUserPrompt(value);\n          sendPrompt(value);\n        });\n      });\n\n      renderHistory();\n\n      spinneroverlay.hidespinneroverlay();\n\n      // TODO: remove\n      // getResult(\"select * from {course}\");\n\n      // Show the modal\n      // document.getElementById('historyModal').classList.add('show');\n      // document.body.classList.add('modal-open');\n\n      // // // Hide the modal\n      // // document.getElementById('historyModal').classList.remove('show');\n      // // document.body.classList.remove('modal-open');\n\n      return;\n    })\n    .catch();\n};\n\nexport const init = async (_reportid) => {\n  console.log(\"init\");\n  console.log(\"reportid\", _reportid);\n\n  // Get report\n  const response = await getReport(_reportid);\n  report = JSON.parse(response.data).report;\n  // this.setMessage(\"\");\n  renderReport(report);\n};\n"],"names":["report","table","SELECTORS","renderReport","_report","console","log","allreportsurl","M","cfg","wwwroot","render","then","html","js","appendNodeContents","document","getElementById","promptElem","querysqlElem","trytofixlElem","senduserpromptButton","errorDiv","cm","setSql","sql","value","getResult","setUserPrompt","setTargetText","newText","hidespinneroverlay","setMessage","sendPrompt","prompt","showspinneroverlay","call","methodname","args","reportid","id","engine","conversationid","done","data","message","correct","autoSave","fail","error","exception","query","result","JSON","parse","keys","Object","length","destroy","firstItem","columns","map","key","title","dataArray","DataTable","setqueryresultid","timeoutId","addEventListener","event","nextSibling","nextElementSibling","classList","contains","CodeMirror","actualsql","getValue","codeElement","querySelector","textContent","ctrlKey","metaKey","clearTimeout","inputValue","setTimeout","querySelectorAll","forEach","item","preventDefault","trim","role","getAttribute","modal","catch","async","_reportid","response","Ajax"],"mappings":"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"}