{"version":3,"file":"report.min.js","sources":["../src/report.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Connect lionai_reports functionality.\r\n *\r\n * @module      local_lionai_reports/report\r\n * @author      Anton P. <anton@devlion.co>\r\n * @copyright   2023 Devlion <info@devlion.co>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Ajax from \"core/ajax\";\r\nimport Notification from \"core/notification\";\r\nimport Templates from \"core/templates\";\r\nimport spinneroverlay from \"./spinneroverlay\";\r\nimport DataTable from \"./jquery.dataTables\";\r\nimport ModalFactory from 'core/modal_factory';\r\nimport ModalEvents from 'core/modal_events';\r\nimport {get_string as getString} from 'core/str';\r\nimport * as CodeMirror from \"./codemirror\";\r\n\r\n// import \"https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/sql/sql.min.js\";\r\n\r\nconst dataTemp = {\r\n    report: null,\r\n    table: null,\r\n    sqlChanged: false,\r\n    sqlOriginal: '',\r\n    editor: null,\r\n};\r\nconst Selectors = {\r\n    elements: {\r\n        mainelement: \"lionai_reports-area\",\r\n        report: \"lionai_reports-report\",\r\n        promptTextarea: \"id_userprompt\",\r\n        querysqlid: \"id_querysql\",\r\n        senduserpromptid: \"id_senduserprompt\",\r\n        getresultid: \"id_getresult\",\r\n        submitbutton: \"id_submitbutton\",\r\n        trytofixid: \"id_trytofix\",\r\n        errordivid: \"id_error_querysql\",\r\n        lionaiReportshistory: \"lionai_reportshistory\",\r\n        queryresultwrapperid: \"id_queryresultwrapper\",\r\n        queryresultid: \"id_queryresult\",\r\n        queryresultmessage: \"id_queryresultmessage\",\r\n        thmbup: \"thmbup\",\r\n        thmbdown: \"thmbdown\",\r\n        ratebtnswrapper: \"ratebtns-wrapper\"\r\n    },\r\n    targets: {}\r\n};\r\n\r\n\r\n/**\r\n * Retrieves a report by its ID using an AJAX call.\r\n *\r\n * @param {number} id - The unique identifier of the report to retrieve.\r\n * @returns {Promise<Object>} A Promise that resolves to the retrieved report object.\r\n * @throws {Error} If an error occurs during the AJAX call.\r\n */\r\nconst getReport = (id) =>\r\n    Ajax.call([\r\n        {\r\n            methodname: \"local_lionai_reports_getreport\",\r\n            args: {\r\n                id: id,\r\n            },\r\n        },\r\n    ])[0];\r\n\r\n/**\r\n * Updates a report by its ID using an AJAX call.\r\n *\r\n * @param {number} id - The unique identifier of the report to update.\r\n * @param {string} [action=\"update\"] - The action to perform on the report (default is \"update\").\r\n * @param {Object} data - The data to update the report with.\r\n * @returns {Promise<Object>} A Promise that resolves to the updated report object.\r\n * @throws {Error} If an error occurs during the AJAX call.\r\n */\r\nconst updateReport = (id, action = \"update\", data) => {\r\n    return Ajax.call([\r\n        {\r\n            methodname: \"local_lionai_reports_updatereport\",\r\n            args: {\r\n                id: id,\r\n                action: action,\r\n                data: JSON.stringify(data),\r\n            },\r\n        },\r\n    ])[0];\r\n};\r\n\r\nconst initTargets = () => {\r\n    Selectors.targets.promptElem = document.getElementById(Selectors.elements.promptTextarea);\r\n    Selectors.targets.querysqlElem = document.getElementById(Selectors.elements.querysqlid);\r\n    Selectors.targets.trytofixlElem = document.getElementById(Selectors.elements.trytofixid);\r\n    Selectors.targets.queryresultmessage = document.getElementById(Selectors.elements.queryresultmessage);\r\n    Selectors.targets.thmbup = document.getElementById(Selectors.elements.thmbup);\r\n    Selectors.targets.thmbdown = document.getElementById(Selectors.elements.thmbdown);\r\n    Selectors.targets.ratebtnswrapper = document.getElementById(Selectors.elements.ratebtnswrapper);\r\n\r\n    Selectors.targets.senduserpromptButton = document.getElementById(Selectors.elements.senduserpromptid);\r\n    Selectors.targets.getresultButton = document.getElementById(Selectors.elements.getresultid);\r\n    Selectors.targets.errorDiv = document.getElementById(Selectors.elements.errordivid);\r\n    Selectors.targets.lionaiReportshistory = document.getElementById(Selectors.elements.lionai_reportshistory);\r\n};\r\n\r\n/**\r\n * Renders a report by fetching its template, setting up event listeners, and updating the UI.\r\n *\r\n */\r\nconst renderReport = () => {\r\n    Templates.render(\"local_lionai_reports/report\", dataTemp.report)\r\n        .then(function(html, js) {\r\n            Templates.replaceNodeContents(\r\n                document.getElementById(Selectors.elements.mainelement),\r\n                html,\r\n                js\r\n            );\r\n\r\n            initTargets();\r\n            // TODO: Is it needed?\r\n            // const changeActualSql = () => {\r\n            //   dataTemp.actualsql = Selectors.targets.querysqlElem.value;\r\n            //   if (dataTemp.sqlOriginal != actualsql) {\r\n            //     originalDataChanged();\r\n            //   }\r\n            // }\r\n\r\n            dataTemp.editor = CodeMirror.editorFromTextArea(Selectors.targets.querysqlElem);\r\n            // TODO: Is it needed?\r\n            // let virtualButtonClick = () => {\r\n            //   const button = document.getElementById(\"id_submitbutton\");\r\n            //   button.click();\r\n            // };\r\n            Selectors.targets.thmbup.onclick = (e) =>\r\n                ratePrompt(e.currentTarget.dataset.promptid, e.currentTarget.dataset.rate, e.currentTarget);\r\n\r\n            Selectors.targets.thmbdown.onclick = (e) =>\r\n                ratePrompt(e.currentTarget.dataset.promptid, e.currentTarget.dataset.rate, e.currentTarget);\r\n\r\n\r\n            Selectors.targets.senduserpromptButton.addEventListener(\"click\", () => {\r\n                sendPrompt(Selectors.targets.promptElem.value);\r\n            });\r\n\r\n            Selectors.targets.getresultButton.addEventListener(\"click\", () => {\r\n                getResult(Selectors.targets.querysqlElem.value);\r\n            });\r\n\r\n            Selectors.targets.trytofixlElem.addEventListener(\"click\", () => {\r\n                let value = \"\";\r\n                let trytofixprompt = \"try to fix this sql:\\n\\n\";\r\n                value += trytofixprompt;\r\n\r\n                let actualsql = Selectors.targets.querysqlElem.value;\r\n                actualsql += \"\\n\\n\";\r\n                value += actualsql;\r\n                const textContent = Selectors.targets.queryresultmessage.textContent;\r\n                value += textContent;\r\n\r\n                sendPrompt(value);\r\n            });\r\n\r\n\r\n            Selectors.targets.querysqlElem.addEventListener(\"change\", () => {\r\n                let actualsql = Selectors.targets.querysqlElem.value;\r\n                if (dataTemp.sqlOriginal != actualsql) {\r\n                    originalDataChanged();\r\n                }\r\n            });\r\n\r\n            Selectors.targets.promptElem.addEventListener(\"keydown\", function(event) {\r\n                if ((event.ctrlKey || event.metaKey) && event.key === \"Enter\") {\r\n                    sendPrompt(Selectors.targets.promptElem.value);\r\n                } else {\r\n                    hideElement(Selectors.targets.ratebtnswrapper);\r\n                }\r\n            });\r\n\r\n            // TODO: Is it needed?\r\n            // let timeoutId;\r\n            // Variable to store the timeout ID for debouncing\r\n\r\n            // // TODO: Remove?\r\n            // const handleQueryInputChange = () => {\r\n            //   clearTimeout(timeoutId);\r\n            //   const inputValue = Selectors.targets.querysqlElem.value;\r\n            //   timeoutId = setTimeout(() => {\r\n            //     getResult(inputValue);\r\n            //   }, 500);\r\n            // };\r\n\r\n            const dropdownItems = document.querySelectorAll(\r\n                \".lionai_reports-examples-list .dropdown-item\"\r\n            );\r\n\r\n            dropdownItems.forEach((item) => {\r\n                item.addEventListener(\"click\", (event) => {\r\n                    event.preventDefault();\r\n\r\n                    let value = item.textContent.trim();\r\n                    setUserPrompt(value);\r\n                    sendPrompt(value);\r\n                });\r\n            });\r\n\r\n            spinneroverlay.hidespinneroverlay();\r\n            /**\r\n             * Hides the \"Try to Fix It\" element by adding the \"d-none\" class.\r\n             */\r\n\r\n            hideElement(Selectors.targets.queryresultmessage);\r\n            hideElement(Selectors.targets.trytofixlElem);\r\n            hideElement(Selectors.targets.ratebtnswrapper);\r\n\r\n            document\r\n                .getElementById(\"edit-name-button\")\r\n                .addEventListener(\"click\", function() {\r\n                    document.getElementById(\"edit-name-button\").classList.add(\"d-none\");\r\n\r\n                    var currentName = document.getElementById(\"edit-name\").textContent;\r\n\r\n                    var inputField = document.createElement(\"input\");\r\n                    inputField.type = \"text\";\r\n                    inputField.value = currentName;\r\n                    inputField.classList.add(\"w-100\"); // Add the 'w-100' class\r\n\r\n                    document.getElementById(\"edit-name\").textContent = \"\";\r\n                    document.getElementById(\"edit-name\").appendChild(inputField);\r\n\r\n                    // TODO: Discard by Focusout\r\n                    // inputField.addEventListener(\"blur\", async function (event) {\r\n                    //   return;\r\n                    // });\r\n\r\n                    inputField.addEventListener(\"keydown\", async function(event) {\r\n                        // TODO: Discard by Escape\r\n                        // if (event.key === \"Escape\") {\r\n                        //   return;\r\n                        // }\r\n                        if (event.key === \"Enter\") {\r\n                            var newName = inputField.value;\r\n                            document.getElementById(\"edit-name\").textContent = newName;\r\n                            document\r\n                                .getElementById(\"edit-name-button\")\r\n                                .classList.remove(\"d-none\");\r\n                            const updateResult = await updateReport(dataTemp.report.id, \"update\", {\r\n                                name: newName,\r\n                            });\r\n                            if (updateResult) {\r\n                                const response = await getReport(dataTemp.report.id);\r\n                                dataTemp.report = JSON.parse(response.data).report;\r\n                                renderReport();\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    inputField.focus();\r\n                });\r\n            document.getElementById('lionai_reportshistory').onclick = () => {\r\n                showModal();\r\n            };\r\n            return;\r\n        })\r\n        .catch((error) => Notification.displayException(error));\r\n};\r\n\r\n\r\n/**\r\n * Sets the query result data in a DataTable for display.\r\n *\r\n * @param {Object} data - The query result data.\r\n */\r\nlet setqueryresultid = (data) => {\r\n    const keys = Object.keys(data);\r\n\r\n    if (dataTemp.table || (dataTemp.table && keys.length == 0)) {\r\n        dataTemp.table = '';\r\n        document.getElementById(Selectors.elements.queryresultid).innerHTML = \"\";\r\n    }\r\n\r\n    document.getElementById(Selectors.elements.queryresultwrapperid).innerHTML = \"\";\r\n    const queryResultWrapper = document.getElementById(Selectors.elements.queryresultwrapperid);\r\n    const tableHtml = '<table class=\"display w-100\" id=\"id_queryresult\"></table>';\r\n    queryResultWrapper.innerHTML = tableHtml;\r\n\r\n    if (keys.length > 0) {\r\n        const firstItem = data[keys[0]];\r\n        const columns = Object.keys(firstItem).map((key) => ({\r\n            title: key,\r\n            data: key,\r\n        }));\r\n        const dataArray = keys.map((key) => data[key]);\r\n\r\n        dataTemp.table = new DataTable(`#${Selectors.elements.queryresultid}`, {\r\n            columns: columns,\r\n            data: dataArray,\r\n            scrollX: true,\r\n            autoWidth: true\r\n        });\r\n    } else {\r\n        // Handle the case where data is empty or has no keys.\r\n        // setMessage(\"Data set is empty or has no keys.\");\r\n    }\r\n};\r\n\r\n\r\n// TODO: Is it needed?\r\n// let cm;\r\n// let reportid;\r\n\r\n/**\r\n * Sets the SQL value in the query SQL element and triggers a result retrieval.\r\n *\r\n * @param {string} sql - The SQL string to set in the query SQL element.\r\n */\r\nconst setSql = (sql) => {\r\n\r\n    Selectors.targets.querysqlElem.value = sql;\r\n    let sqlEditors = Selectors.targets.querysqlElem.parentElement.querySelectorAll('.cm-editor');\r\n    if (sqlEditors.length > 0) {\r\n        sqlEditors.forEach((el) => {\r\n            el.remove();\r\n        });\r\n    }\r\n\r\n    dataTemp.editor = CodeMirror.editorFromTextArea(Selectors.targets.querysqlElem);\r\n    getResult(sql);\r\n};\r\n\r\n\r\n/**\r\n * Shows the history modal by hiding it.\r\n */\r\nconst showModal = async() => {\r\n    const modal = await ModalFactory.create({\r\n        title: getString('pickfromhistory', 'local_lionai_reports'),\r\n        large: true,\r\n        body: Templates.render('local_lionai_reports/historymodal', dataTemp.report),\r\n        footer: 'An example footer content',\r\n    });\r\n    modal.show();\r\n    Selectors.targets.createdModal = modal;\r\n\r\n    modal.getRoot().on(ModalEvents.bodyRendered, () => {\r\n        renderHistory();\r\n    });\r\n\r\n};\r\n\r\n/**\r\n * Hides the history modal.\r\n */\r\nconst hideModal = () => {\r\n    Selectors.targets.createdModal.destroy();\r\n};\r\n\r\n\r\nconst hideElement = (target) => {\r\n    target.classList.add(\"d-none\");\r\n};\r\n\r\nconst showElement = (target) => {\r\n    target.classList.remove(\"d-none\");\r\n};\r\n\r\n/**\r\n * Retrieves query results using an AJAX call and updates the UI with the results.\r\n *\r\n * @param {string} query - The SQL query to execute and retrieve results for.\r\n */\r\nconst getResult = (query) => {\r\n    /**\r\n     * Hides the alert message element by adding the \"d-none\" class.\r\n     */\r\n    hideElement(Selectors.targets.queryresultmessage);\r\n    hideElement(Selectors.targets.trytofixlElem);\r\n    Ajax.call([\r\n        {\r\n            methodname: \"local_lionai_reports_getresult\",\r\n            args: {\r\n                query: query,\r\n                id: dataTemp.report.id,\r\n            },\r\n            done: function(data) {\r\n                let result = data.result;\r\n                let message = data.message;\r\n                data = JSON.parse(data.data);\r\n                setMessage(message, !result);\r\n                setqueryresultid(data);\r\n            },\r\n            fail: function(error) {\r\n                Notification.exception(error);\r\n            },\r\n        },\r\n    ]);\r\n};\r\n\r\n/**\r\n * Sets the target text, which includes SQL and query results, and optionally triggers auto-saving.\r\n *\r\n * @param {string} newText - The new text to set.\r\n */\r\nconst setTargetText = (newText/* , autoSave = false */) => {\r\n    setSql(newText);\r\n\r\n    spinneroverlay.hidespinneroverlay([\r\n        \"id_userprompt\",\r\n        \"id_querysql\",\r\n        \"id_senduserprompt\",\r\n    ]);\r\n\r\n    // Some delay to render sql with codemirror. Rework to callback.\r\n    // setTimeout(function () {\r\n    //   hidespinneroverlay();\r\n\r\n    //   // TODO: autosave\r\n    //   // if (autoSave) {\r\n    //   //   virtualButtonClick();\r\n    //   // }\r\n    // }, 500);\r\n};\r\n\r\n/**\r\n * Sets a message to be displayed and optionally shows a correction prompt.\r\n *\r\n * @param {string} value - The message to display.\r\n * @param {number} [correct=2] - A flag to indicate if a correction prompt should be shown (default is 2).\r\n */\r\nconst setMessage = (value, correct = 2) => {\r\n    if (value.length > 0) {\r\n        document.getElementById(Selectors.elements.queryresultmessage).innerHTML = value;\r\n        /**\r\n         * Shows the alert message element by removing the \"d-none\" class.\r\n         */\r\n        showElement(Selectors.targets.queryresultmessage);\r\n    }\r\n\r\n    if (correct == 1) {\r\n        /**\r\n         * Shows the \"Try to Fix It\" element by removing the \"d-none\" class.\r\n         */\r\n        showElement(Selectors.targets.trytofixlElem);\r\n    }\r\n};\r\n\r\n\r\nconst originalDataChanged = () => {\r\n    if (!dataTemp.sqlChanged) {\r\n        dataTemp.sqlChanged = true;\r\n        hideElement(Selectors.targets.ratebtnswrapper);\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * Sends a user prompt via an AJAX call and updates the target text based on the response.\r\n *\r\n * @param {string} prompt - The user prompt to send.\r\n */\r\nconst sendPrompt = (prompt) => {\r\n    spinneroverlay.showspinneroverlay([\r\n        \"id_userprompt\",\r\n        \"id_querysql\",\r\n        \"id_senduserprompt\",\r\n    ]);\r\n\r\n    hideElement(Selectors.targets.queryresultmessage);\r\n    hideElement(Selectors.targets.trytofixlElem);\r\n    hideElement(Selectors.targets.ratebtnswrapper);\r\n\r\n    Ajax.call([\r\n        {\r\n            methodname: \"local_lionai_reports_send_prompt\",\r\n            args: {\r\n                reportid: dataTemp.report.id,\r\n                prompt: prompt,\r\n                engine: dataTemp.report.engine,\r\n                conversationid: dataTemp.report.conversationid,\r\n            },\r\n            done: function(data) {\r\n                let message = data.message;\r\n                let correct = data.correct;\r\n                let autoSave = true;\r\n                if (correct != 2) {\r\n                    setMessage(\r\n                        \"Does not look like correct code. Use carefully.\",\r\n                        correct\r\n                    );\r\n                    spinneroverlay.hidespinneroverlay([\r\n                        \"id_userprompt\",\r\n                        \"id_querysql\",\r\n                        \"id_senduserprompt\",\r\n                    ]);\r\n                    Selectors.targets.querysqlElem.value = message;\r\n                    let sqlEditors = Selectors.targets.querysqlElem.parentElement.querySelectorAll('.cm-editor');\r\n                    if (sqlEditors.length > 0) {\r\n                        sqlEditors.forEach((el) => {\r\n                            el.remove();\r\n                        });\r\n                    }\r\n                    dataTemp.editor = CodeMirror.editorFromTextArea(Selectors.targets.querysqlElem);\r\n                    return;\r\n                }\r\n                dataTemp.sqlOriginal = message;\r\n                dataTemp.sqlChanged = false;\r\n\r\n                // Show rate btns.\r\n                clearRateBtnsActiveClass();\r\n                showElement(Selectors.targets.ratebtnswrapper);\r\n\r\n                // Show action buttons.\r\n                var actionbuttons = document.getElementsByClassName(\"action-btns\")[0];\r\n                actionbuttons.classList.remove(\"d-none\");\r\n                actionbuttons.classList.add(\"d-flex\");\r\n\r\n                // Set promt id from responce to rate btns.\r\n                setPromptidToBtns(data.promptid);\r\n\r\n                setTargetText(message, autoSave);\r\n            },\r\n            fail: function(error) {\r\n                Notification.exception(error);\r\n                spinneroverlay.hidespinneroverlay([\r\n                    \"id_userprompt\",\r\n                    \"id_querysql\",\r\n                    \"id_senduserprompt\",\r\n                ]);\r\n            },\r\n        },\r\n    ]);\r\n};\r\n\r\n/**\r\n * Sets the user prompt value in the prompt element.\r\n *\r\n * @param {string} value - The user prompt value to set.\r\n */\r\nconst setUserPrompt = (value) => {\r\n    Selectors.targets.promptElem.value = value;\r\n};\r\n\r\n/**\r\n * Renders history items and adds click event listeners to them.\r\n */\r\nconst renderHistory = () => {\r\n    const historyItems = document.querySelectorAll(\r\n        \".lionai_reports-history-list-item\"\r\n    );\r\n\r\n    historyItems.forEach((item) => {\r\n        item.addEventListener(\"click\", (event) => {\r\n            event.preventDefault();\r\n\r\n            const value = item.textContent.trim();\r\n            const role = item.getAttribute(\"data-role\");\r\n\r\n            hideModal();\r\n\r\n            if (role == \"user\") {\r\n                setUserPrompt(value);\r\n                sendPrompt(value);\r\n            } else {\r\n                setTargetText(value, true);\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * Rate last sent prompt.\r\n *\r\n * @param {number} promptid - prompr id.\r\n * @param {number} rate - prompr rate.\r\n * @param {object} target - target element.\r\n */\r\nconst ratePrompt = (promptid, rate, target) => {\r\n    rate = target.classList.contains('active') ? 0 : rate;\r\n    Ajax.call([\r\n        {\r\n            methodname: \"local_lionai_reports_rate_prompt\",\r\n            args: {\r\n                promptid: +promptid,\r\n                rate: +rate,\r\n            },\r\n            done: function() {\r\n                clearRateBtnsActiveClass();\r\n                return (rate === 0) ? target.classList.remove(\"active\") : target.classList.add(\"active\");\r\n            },\r\n            fail: function(error) {\r\n                Notification.exception(error);\r\n            },\r\n        },\r\n    ]);\r\n};\r\n\r\nconst setPromptidToBtns = (promptid) => {\r\n    Selectors.targets.thmbup.dataset.promptid = promptid;\r\n    Selectors.targets.thmbdown.dataset.promptid = promptid;\r\n};\r\n\r\nconst clearRateBtnsActiveClass = () => {\r\n    Selectors.targets.thmbup.classList.remove(\"active\");\r\n    Selectors.targets.thmbdown.classList.remove(\"active\");\r\n};\r\n/**\r\n * Initializes and renders a report with the given report ID.\r\n *\r\n * @param {number} _reportid - The unique identifier of the report to initialize and render.\r\n * @throws {Error} If an error occurs during report retrieval, parsing, or rendering.\r\n */\r\nexport const init = async(_reportid) => {\r\n\r\n    const response = await getReport(_reportid);\r\n    dataTemp.report = JSON.parse(response.data).report;\r\n\r\n    renderReport();\r\n};\r\n"],"names":["dataTemp","report","table","sqlChanged","sqlOriginal","editor","Selectors","elements","mainelement","promptTextarea","querysqlid","senduserpromptid","getresultid","submitbutton","trytofixid","errordivid","lionaiReportshistory","queryresultwrapperid","queryresultid","queryresultmessage","thmbup","thmbdown","ratebtnswrapper","targets","getReport","id","Ajax","call","methodname","args","renderReport","render","then","html","js","replaceNodeContents","document","getElementById","promptElem","querysqlElem","trytofixlElem","senduserpromptButton","getresultButton","errorDiv","lionai_reportshistory","CodeMirror","editorFromTextArea","onclick","e","ratePrompt","currentTarget","dataset","promptid","rate","addEventListener","sendPrompt","value","getResult","actualsql","textContent","originalDataChanged","event","ctrlKey","metaKey","key","hideElement","querySelectorAll","forEach","item","preventDefault","trim","setUserPrompt","hidespinneroverlay","classList","add","currentName","inputField","createElement","type","appendChild","async","newName","remove","updateResult","action","data","JSON","stringify","updateReport","name","response","parse","focus","showModal","catch","error","Notification","displayException","modal","ModalFactory","create","title","large","body","Templates","footer","show","createdModal","getRoot","on","ModalEvents","bodyRendered","renderHistory","target","showElement","query","done","result","message","setMessage","keys","Object","length","innerHTML","firstItem","columns","map","dataArray","DataTable","scrollX","autoWidth","setqueryresultid","fail","exception","setTargetText","newText","sql","sqlEditors","parentElement","el","setSql","correct","prompt","showspinneroverlay","reportid","engine","conversationid","clearRateBtnsActiveClass","actionbuttons","getElementsByClassName","setPromptidToBtns","role","getAttribute","destroy","contains","_reportid"],"mappings":"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"}