{"version":3,"file":"main.min.js","sources":["../src/main.js"],"sourcesContent":["/* eslint-disable no-debugger */\n/* eslint-disable jsdoc/empty-tags */\n/* eslint-disable no-console */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript to initialise the main function.\n *\n * @module     local_lionai_reports/main\n * @package    local_lionai_reports\n * @copyright  2023 Devlion.co <info@devlion.co>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n/**\n * Module for managing the LionAI_Report UI, including rendering lists and reports.\n *\n * @module LionAI_ReportUI\n */\nimport Ajax from \"core/ajax\";\nimport Templates from \"core/templates\";\nimport * as LionAiReport from \"./report\";\nimport spinneroverlay from \"./spinneroverlay\";\n\n/**\n * The CSS selectors used in the module.\n * @typedef {Object} Selectors\n * @property {string} MAINELEMENT - The main element selector.\n * @property {string} LIST - The list selector.\n * @property {string} REPORT - The report selector.\n */\n\n/**\n * The main element selector and other CSS selectors.\n * @type {Selectors}\n */\nvar SELECTORS = {\n  MAINELEMENT: \"lionai_reports-area\",\n  LIST: \"lionai_reports-list\",\n  REPORT: \"lionai_reports-report\",\n};\n\n/**\n * Retrieves a list of LionAI_Reports via an AJAX call.\n *\n * @returns {Promise} A promise that resolves with the list data.\n */\nconst getList = () =>\n  Ajax.call([\n    {\n      methodname: \"local_lionai_reports_getlist\",\n      args: {},\n    },\n  ])[0];\n\n/**\n * Renders the list of LionAI_Reports.\n *\n * @param {string} listData - The list data to render.\n */\nconst renderList = (listData) => {\n  listData = JSON.parse(listData);\n  Templates.render(\"local_lionai_reports/list\", listData)\n    .then(function(html, js) {\n      Templates.appendNodeContents(\n        document.getElementById(SELECTORS.MAINELEMENT),\n        html,\n        js\n      );\n      spinneroverlay.hidespinneroverlay();\n\n      return;\n    })\n    .catch();\n};\n\n/**\n * Initializes the LionAI_Report UI.\n *\n * @param {number} id - The ID of the report to initialize.\n */\nexport const init = async(id) => {\n\n  spinneroverlay.initspinneroverlay();\n  spinneroverlay.showspinneroverlay();\n\n  if (id == 0) {\n    const response = await getList();\n    const listData = response.data;\n    renderList(listData);\n  }\n\n  if (id != 0) {\n    LionAiReport.init(id);\n  }\n};\n"],"names":["SELECTORS","async","initspinneroverlay","showspinneroverlay","id","listData","JSON","parse","render","then","html","js","appendNodeContents","document","getElementById","hidespinneroverlay","catch","renderList","Ajax","call","methodname","args","data","LionAiReport","init"],"mappings":";;;;;;;;w4BAgDIA,sBACW,oCA4CKC,MAAAA,gCAEHC,6CACAC,qBAEL,GAANC,GAAS,CA1BKC,CAAAA,WAClBA,SAAWC,KAAKC,MAAMF,6BACZG,OAAO,4BAA6BH,UAC3CI,MAAK,SAASC,KAAMC,uBACTC,mBACRC,SAASC,eAAed,uBACxBU,KACAC,4BAEaI,wBAIhBC,SAgBDC,QAzCFC,cAAKC,KAAK,CACR,CACEC,WAAY,+BACZC,KAAM,MAEP,IAmCyBC,MAIlB,GAANlB,IACFmB,aAAaC,KAAKpB"}